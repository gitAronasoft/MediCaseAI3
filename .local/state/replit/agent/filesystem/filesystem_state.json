{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nLegalMed is a comprehensive medical case management platform designed for law firms handling medical legal cases. The application provides AI-powered document analysis, chronological bill review, intelligent demand letter generation, and an interactive AI document editor with chat interface for content modification and refinement. Built as a full-stack application with React frontend and Express backend, it streamlines the complex workflow of managing medical legal documentation and case analysis with advanced AI-powered document review and editing capabilities.\n\n## Recent Changes (August 21, 2025)\n\n✓ **Implemented AI Medical Bill Extraction** - Added comprehensive medical bill extraction from uploaded documents using Azure OpenAI and Document Intelligence\n✓ **Automatic Medical Bill Processing** - Documents now automatically extract medical bills during upload and store them in database with same structure as existing bills\n✓ **Medical Bills API Endpoints** - Created dedicated endpoint `/api/documents/:id/extract-bills` for extracting bills from existing documents\n✓ **Enhanced Document Analysis Workflow** - Integrated medical bill extraction into the complete document processing pipeline (Upload → Extract Text → AI Analysis → Store Bills)\n✓ **Database Integration** - Medical bills are automatically stored with proper relationships to cases and documents, following existing data structure\n✓ **Bills Display Integration** - Extracted bills appear in Medical Bills page with same format as existing bills (provider, amount, dates, treatment, status)\n\nPrevious Changes (August 20, 2025):\n✓ **Configured Document Intelligence Integration** - Implemented Azure Document Intelligence service for advanced document text extraction and analysis\n✓ **Integrated Search Service** - Built comprehensive Azure Cognitive Search integration with full-text search, filtering, and autocomplete functionality\n✓ **Enhanced OpenAI Integration** - Streamlined OpenAI service configuration with proper initialization and health monitoring\n✓ **Added Search APIs** - Created REST endpoints for document search, suggestions, and intelligent content discovery\n✓ **Implemented Enhanced Document Upload** - New upload endpoint that combines file storage, AI analysis, and automatic search indexing\n✓ **Built Health Monitoring System** - Added service health checks for all Azure services with detailed status reporting\n✓ **Enhanced AI Document Processing** - Integrated Document Intelligence with OpenAI for superior document analysis and data extraction\n\nPrevious Changes (August 14, 2025):\n✓ **Fixed Create New Case functionality** - Resolved form validation issue where `createdBy` field was required but not provided by frontend\n✓ **Enhanced form handling** - Properly configured form schema to exclude backend-only fields from frontend validation\n✓ **Improved case creation workflow** - User ID is now automatically injected during case creation for proper data association\n✓ **Form debugging and validation** - Added comprehensive error handling and validation feedback for better user experience\n✓ **Implemented AI Prompts Configuration System** - Complete customizable AI prompt management with database schema, full CRUD APIs, and modern UI\n✓ **Enhanced Settings Page** - Added new AI Prompts Configuration section with create, edit, delete, and organize functionality\n✓ **Database Extensions** - Created ai_prompts table with proper relations and user-specific prompt management\n✓ **API Infrastructure** - Built comprehensive REST endpoints for AI prompts with authentication and validation\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with **React 18** using TypeScript and follows a component-based architecture:\n\n- **UI Framework**: Utilizes shadcn/ui components built on Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\nThe frontend follows a modular structure with dedicated components for different features like case management, document handling, medical bills, and AI assistance.\n\n## Backend Architecture\n\nThe backend is built with **Express.js** and TypeScript:\n\n- **Framework**: Express.js with middleware for JSON parsing, logging, and error handling\n- **API Design**: RESTful API with organized route handlers for different resources\n- **File Upload**: Multer for handling file uploads with memory storage\n- **Validation**: Zod schemas for request/response validation\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n## Data Storage Solutions\n\n**Database**: PostgreSQL with Drizzle ORM for type-safe database operations:\n- **Schema Management**: Drizzle migrations with shared schema definitions\n- **Connection**: Neon Database serverless driver for scalable PostgreSQL hosting\n- **Session Storage**: PostgreSQL-based session storage for authentication\n\n**Object Storage**: Google Cloud Storage integration:\n- **File Management**: Direct-to-cloud uploads with presigned URLs\n- **Access Control**: Custom ACL policy system for fine-grained object permissions\n- **Replit Integration**: Uses Replit's sidecar service for GCS credentials\n\n## Authentication and Authorization\n\n**Authentication System**: Simple Username/Password Authentication:\n- **Strategy**: Passport.js with Local Strategy using bcrypt password hashing\n- **Session Management**: Express sessions with PostgreSQL storage  \n- **User Management**: Manual user creation with secure password storage\n- **Security**: HTTP-only cookies with secure flags and bcrypt password hashing\n\n**Authorization**: Route-level authentication middleware with user context injection.\n\n## External Dependencies\n\n**AI Services**:\n- **OpenAI GPT-4o**: Document analysis, content extraction, demand letter generation, and interactive chat\n- **Azure Document Intelligence**: Advanced document text extraction, table detection, key-value pair extraction, and structured document analysis\n- **Azure Cognitive Search**: Full-text search, intelligent filtering, autocomplete suggestions, and semantic search across all documents\n- **Custom AI Features**: Medical timeline extraction, bill analysis, legal document summarization, and AI-powered document editing\n- **Document Review System**: Interactive AI editor allowing users to modify, extract, and refine document content through natural language commands\n- **AI Prompts Management**: Customizable prompt system allowing users to create, edit, and manage AI prompts for different tasks (document analysis, demand letters, chat system, document editing)\n- **Integrated Processing Pipeline**: Seamless integration between Document Intelligence, OpenAI analysis, and search indexing for comprehensive document processing\n\n**Cloud Services**:\n- **Google Cloud Storage**: File storage with ACL-based access control\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Replit Services**: Authentication provider and cloud credentials management\n\n**File Upload**:\n- **Uppy**: Modern file upload library with dashboard interface, progress tracking, and AWS S3 compatibility\n- **Direct Upload**: Client-side uploads to GCS with backend-generated presigned URLs\n\n**Development Tools**:\n- **TypeScript**: Full-stack type safety with shared schemas\n- **ESBuild**: Production bundling for server-side code\n- **Drizzle Kit**: Database migration and introspection tools\n- **Vite**: Frontend development server with HMR and build optimization\n\nThe architecture emphasizes type safety, scalability, and developer experience while providing a robust platform for medical legal case management with AI-powered assistance.","size_bytes":8123},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/aiService.ts":{"content":"import OpenAI from \"openai\";\nimport { User } from \"@shared/schema\";\n\nexport interface AIServiceInterface {\n  analyzeDocument(content: string, fileName: string): Promise<{\n    summary: string;\n    extractedData: any;\n    keyFindings: string[];\n  }>;\n  \n  extractMedicalBills(content: string, fileName: string): Promise<any[]>;\n  \n  generateDemandLetter(caseData: any, documents: any[], medicalBills: any[]): Promise<string>;\n  \n  chatCompletion(messages: any[], systemPrompt?: string): Promise<string>;\n}\n\nexport class OpenAIService implements AIServiceInterface {\n  private client: OpenAI;\n\n  constructor(apiKey: string) {\n    this.client = new OpenAI({ apiKey });\n  }\n\n  async extractMedicalBills(content: string, fileName: string): Promise<any[]> {\n    const prompt = `Extract ALL medical bills, invoices, and billing information from this medical document:\n\nDocument: ${fileName}\nContent: ${content}\n\nFor each medical bill found, extract:\n- provider (hospital/clinic/doctor name)\n- amount (total bill amount in dollars)\n- serviceDate (date service was provided, format: YYYY-MM-DD)\n- billDate (date bill was issued, format: YYYY-MM-DD)\n- treatment (description of treatment/service provided)\n- insurance (insurance company/plan mentioned)\n- status (use \"pending\" as default)\n\nIf multiple bills or line items exist, extract each as a separate bill.\nIf dates are unclear, use best estimate based on context.\nIf amount includes currency symbols, remove them and provide numeric value only.\n\nFormat as JSON array of bills: [{\"provider\": \"...\", \"amount\": \"...\", \"serviceDate\": \"...\", \"billDate\": \"...\", \"treatment\": \"...\", \"insurance\": \"...\", \"status\": \"pending\"}]\n\nIf no medical bills found, return empty array: []`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      // Handle both array format and object with bills property\n      if (Array.isArray(result)) {\n        return result;\n      } else if (result.bills && Array.isArray(result.bills)) {\n        return result.bills;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error extracting medical bills with OpenAI:\", error);\n      return [];\n    }\n  }\n\n  async analyzeDocument(content: string, fileName: string) {\n    const prompt = `Analyze this legal/medical document and extract key information:\n\nDocument: ${fileName}\nContent: ${content}\n\nPlease provide:\n1. A comprehensive summary\n2. Key extracted data (dates, amounts, names, diagnoses, etc.)\n3. Important findings for legal case preparation\n\nFormat as JSON with: summary, extractedData, keyFindings`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      // Ensure the response has the expected structure\n      return {\n        summary: result.summary || \"Document analyzed successfully.\",\n        extractedData: result.extractedData || {},\n        keyFindings: result.keyFindings || []\n      };\n    } catch (error) {\n      console.error(\"Error analyzing document with OpenAI:\", error);\n      throw new Error(\"Failed to analyze document\");\n    }\n  }\n\n  async generateDemandLetter(caseData: any, documents: any[], medicalBills: any[]) {\n    const prompt = `Generate a professional demand letter for this legal case:\n\nCase Details: ${JSON.stringify(caseData)}\nDocuments: ${JSON.stringify(documents)}\nMedical Bills: ${JSON.stringify(medicalBills)}\n\nCreate a comprehensive demand letter that includes:\n- Case summary\n- Medical findings\n- Financial damages\n- Legal basis for claim\n- Professional legal language`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [{ role: \"user\", content: prompt }],\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error generating demand letter with OpenAI:\", error);\n      throw new Error(\"Failed to generate demand letter\");\n    }\n  }\n\n  async chatCompletion(messages: any[], systemPrompt?: string) {\n    try {\n      const chatMessages = systemPrompt \n        ? [{ role: \"system\", content: systemPrompt }, ...messages]\n        : messages;\n\n      const response = await this.client.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: chatMessages,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error with OpenAI chat completion:\", error);\n      throw new Error(\"Failed to complete chat request\");\n    }\n  }\n}\n\nexport class AzureOpenAIService implements AIServiceInterface {\n  private client: OpenAI;\n  private deploymentName: string;\n\n  constructor(endpoint: string, apiKey: string, apiVersion: string, deploymentName: string) {\n    this.client = new OpenAI({\n      apiKey,\n      baseURL: `${endpoint}/openai/deployments/${deploymentName}`,\n      defaultQuery: { \"api-version\": apiVersion },\n      defaultHeaders: {\n        \"api-key\": apiKey,\n      },\n    });\n    this.deploymentName = deploymentName;\n  }\n\n  async analyzeDocument(content: string, fileName: string) {\n    const prompt = `Analyze this legal/medical document and extract comprehensive information:\n\nDocument: ${fileName}\nContent: ${content}\n\nExtract and return a JSON object with the following structure:\n{\n  \"summary\": \"A detailed summary of the medical document\",\n  \"extractedData\": {\n    \"patientInfo\": {\n      \"names\": [\"patient names found\"],\n      \"ages\": [\"ages found\"], \n      \"addresses\": [\"addresses found\"],\n      \"phoneNumbers\": [\"phone numbers found\"],\n      \"insuranceInfo\": [\"insurance or medical info found\"]\n    },\n    \"medicalInfo\": {\n      \"diagnoses\": [\"medical diagnoses or injuries found\"],\n      \"procedures\": [\"medical procedures or treatments listed\"],\n      \"medications\": [\"medications mentioned\"],\n      \"providers\": [\"healthcare providers or facilities\"]\n    },\n    \"timeline\": {\n      \"dates\": [\"important dates with descriptions\"],\n      \"servicesPeriod\": \"overall treatment period\"\n    },\n    \"locations\": {\n      \"facilities\": [\"medical facilities mentioned\"],\n      \"addresses\": [\"relevant addresses for incident or treatment\"]\n    },\n    \"additionalDetails\": {\n      \"keyFindings\": [\"important medical or legal findings\"],\n      \"costs\": [\"all costs and billing information with amounts\"],\n      \"complications\": [\"medical complications or ongoing issues\"]\n    }\n  },\n  \"keyFindings\": [\"critical findings for legal case preparation\"]\n}\n\nMake sure to extract ALL specific details from the document including exact names, dates, amounts, addresses, and medical information.`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: this.deploymentName,\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      console.log(\"Raw Azure OpenAI response:\", response.choices[0].message.content);\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      console.log(\"Parsed result:\", JSON.stringify(result, null, 2));\n      \n      // Ensure the response has the expected structure\n      return {\n        summary: result.summary || \"Document analyzed successfully.\",\n        extractedData: result.extractedData || {},\n        keyFindings: result.keyFindings || []\n      };\n    } catch (error) {\n      console.error(\"Error analyzing document with Azure OpenAI:\", error);\n      throw new Error(\"Failed to analyze document\");\n    }\n  }\n\n  async extractMedicalBills(content: string, fileName: string): Promise<any[]> {\n    const prompt = `Extract ALL medical bills, invoices, and billing information from this medical document:\n\nDocument: ${fileName}\nContent: ${content}\n\nFor each medical bill found, extract:\n- provider (hospital/clinic/doctor name)\n- amount (total bill amount in dollars)\n- serviceDate (date service was provided, format: YYYY-MM-DD)\n- billDate (date bill was issued, format: YYYY-MM-DD)\n- treatment (description of treatment/service provided)\n- insurance (insurance company/plan mentioned)\n- status (use \"pending\" as default)\n\nIf multiple bills or line items exist, extract each as a separate bill.\nIf dates are unclear, use best estimate based on context.\nIf amount includes currency symbols, remove them and provide numeric value only.\n\nFormat as JSON object with bills array: {\"bills\": [{\"provider\": \"...\", \"amount\": \"...\", \"serviceDate\": \"...\", \"billDate\": \"...\", \"treatment\": \"...\", \"insurance\": \"...\", \"status\": \"pending\"}]}\n\nIf no medical bills found, return: {\"bills\": []}`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: this.deploymentName,\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      // Handle both array format and object with bills property\n      if (Array.isArray(result)) {\n        return result;\n      } else if (result.bills && Array.isArray(result.bills)) {\n        return result.bills;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error extracting medical bills with Azure OpenAI:\", error);\n      return [];\n    }\n  }\n\n  async generateDemandLetter(caseData: any, documents: any[], medicalBills: any[]) {\n    const prompt = `Generate a professional demand letter for this legal case:\n\nCase Details: ${JSON.stringify(caseData)}\nDocuments: ${JSON.stringify(documents)}\nMedical Bills: ${JSON.stringify(medicalBills)}\n\nCreate a comprehensive demand letter that includes:\n- Case summary\n- Medical findings\n- Financial damages\n- Legal basis for claim\n- Professional legal language`;\n\n    try {\n      const response = await this.client.chat.completions.create({\n        model: this.deploymentName,\n        messages: [{ role: \"user\", content: prompt }],\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error generating demand letter with Azure OpenAI:\", error);\n      throw new Error(\"Failed to generate demand letter\");\n    }\n  }\n\n  async chatCompletion(messages: any[], systemPrompt?: string) {\n    try {\n      const chatMessages = systemPrompt \n        ? [{ role: \"system\", content: systemPrompt }, ...messages]\n        : messages;\n\n      const response = await this.client.chat.completions.create({\n        model: this.deploymentName,\n        messages: chatMessages,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error with Azure OpenAI chat completion:\", error);\n      throw new Error(\"Failed to complete chat request\");\n    }\n  }\n}\n\nexport function createAIService(user: User): AIServiceInterface {\n  // Use Azure OpenAI if user has it enabled and endpoint configured\n  if (user.useAzureOpenAI && user.azureOpenAIEndpoint && user.azureModelDeployment) {\n    // Use environment variable for API key if user doesn't have one stored\n    const apiKey = user.azureOpenAIApiKey || process.env.AZURE_OPENAI_KEY;\n    \n    if (apiKey) {\n      console.log(`🎯 Using Azure OpenAI: ${user.azureOpenAIEndpoint} with deployment: ${user.azureModelDeployment}`);\n      return new AzureOpenAIService(\n        user.azureOpenAIEndpoint,\n        apiKey,\n        user.azureOpenAIVersion || \"2024-02-15-preview\",\n        user.azureModelDeployment\n      );\n    }\n  }\n  \n  // Fallback to regular OpenAI if available\n  if (user.openaiApiKey) {\n    return new OpenAIService(user.openaiApiKey);\n  } else {\n    throw new Error(\"No AI service configuration found. Please configure OpenAI or Azure OpenAI in settings.\");\n  }\n}","size_bytes":12555},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SchemaUser } from \"@shared/schema\";\nimport { pool } from \"./db\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SchemaUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  // Handle bcrypt format (starts with $2a$, $2b$, etc.)\n  if (stored.startsWith('$2a$') || stored.startsWith('$2b$')) {\n    const bcrypt = await import('bcrypt');\n    return bcrypt.compare(supplied, stored);\n  }\n  \n  // Handle custom scrypt format (fallback)\n  const [hashed, salt] = stored.split(\".\");\n  if (!salt) {\n    throw new Error('Invalid password hash format');\n  }\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const PostgresSessionStore = connectPg(session);\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-secret-key-here\",\n    resave: false,\n    saveUninitialized: false,\n    store: new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    }),\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, password, email, firstName, lastName } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        email,\n        firstName,\n        lastName\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({ id: user.id, username: user.username, email: user.email });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.json({ \n      id: req.user!.id, \n      username: req.user!.username, \n      email: req.user!.email \n    });\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // User info endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    res.json({ \n      id: req.user!.id, \n      username: req.user!.username, \n      email: req.user!.email \n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n\n","size_bytes":4590},"server/azureBlobStorage.ts":{"content":"import { BlobServiceClient, ContainerClient, BlobClient, StorageSharedKeyCredential, generateBlobSASQueryParameters, BlobSASPermissions } from \"@azure/storage-blob\";\nimport { Response } from \"express\";\n\n// Azure Blob Storage configuration\nconst AZURE_STORAGE_ACCOUNT_NAME = process.env.AZURE_STORAGE_ACCOUNT_NAME;\nconst AZURE_STORAGE_ACCOUNT_KEY = process.env.AZURE_STORAGE_ACCOUNT_KEY;\nconst AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;\n\n// Container names for different document types\nexport const CONTAINERS = {\n  DOCUMENTS: 'documents',\n  MEDICAL_BILLS: 'medical-bills', \n  PROCESSED: 'processed-documents',\n  TEMP: 'temp-uploads'\n} as const;\n\n// Initialize Azure Blob Service Client\nexport function createBlobServiceClient(): BlobServiceClient {\n  if (AZURE_STORAGE_CONNECTION_STRING) {\n    return BlobServiceClient.fromConnectionString(AZURE_STORAGE_CONNECTION_STRING);\n  }\n  \n  if (AZURE_STORAGE_ACCOUNT_NAME && AZURE_STORAGE_ACCOUNT_KEY) {\n    const sharedKeyCredential = new StorageSharedKeyCredential(\n      AZURE_STORAGE_ACCOUNT_NAME,\n      AZURE_STORAGE_ACCOUNT_KEY\n    );\n    return new BlobServiceClient(\n      `https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net`,\n      sharedKeyCredential\n    );\n  }\n  \n  throw new Error(\n    \"Azure Storage configuration missing. Set either AZURE_STORAGE_CONNECTION_STRING \" +\n    \"or both AZURE_STORAGE_ACCOUNT_NAME and AZURE_STORAGE_ACCOUNT_KEY environment variables.\"\n  );\n}\n\nexport const blobServiceClient = createBlobServiceClient();\n\nexport class AzureBlobStorageService {\n  constructor() {}\n\n  // Initialize all required containers\n  async initializeContainers(): Promise<void> {\n    const containerNames = Object.values(CONTAINERS);\n    \n    for (const containerName of containerNames) {\n      const containerClient = blobServiceClient.getContainerClient(containerName);\n      \n      try {\n        // Create container if it doesn't exist (private by default)\n        await containerClient.createIfNotExists();\n        \n        console.log(`Container '${containerName}' is ready`);\n      } catch (error) {\n        console.error(`Error creating container '${containerName}':`, error);\n        throw error;\n      }\n    }\n  }\n\n  // Get container client for a specific container\n  getContainerClient(containerName: string): ContainerClient {\n    return blobServiceClient.getContainerClient(containerName);\n  }\n\n  // Get blob client for a specific file\n  getBlobClient(containerName: string, blobName: string): BlobClient {\n    const containerClient = this.getContainerClient(containerName);\n    return containerClient.getBlobClient(blobName);\n  }\n\n  // Generate a secure blob name with timestamp and UUID\n  generateBlobName(originalFileName: string, userId: string): string {\n    const timestamp = Date.now();\n    const randomSuffix = Math.random().toString(36).substring(2);\n    const fileExtension = originalFileName.split('.').pop() || '';\n    const sanitizedName = originalFileName.replace(/[^a-zA-Z0-9.-]/g, '_');\n    \n    return `${userId}/${timestamp}_${randomSuffix}_${sanitizedName}`;\n  }\n\n  // Get upload URL for direct client uploads \n  async getUploadUrl(containerName: string, blobName: string): Promise<string> {\n    const containerClient = this.getContainerClient(containerName);\n    const blobClient = containerClient.getBlobClient(blobName);\n    \n    // Note: For production, you'd want to generate proper SAS tokens\n    // For now, we'll return the blob URL and handle uploads server-side\n    return blobClient.url;\n  }\n\n  // Generate SAS URL with read permissions for Document Intelligence\n  generateBlobSasUrl(containerName: string, blobName: string, expiryHours: number = 2): string {\n    try {\n      console.log(`🔐 Generating SAS URL for blob: ${containerName}/${blobName}`);\n      const blobClient = this.getBlobClient(containerName, blobName);\n      \n      // Check if we have the necessary credentials for SAS generation\n      if (!AZURE_STORAGE_ACCOUNT_NAME || !AZURE_STORAGE_ACCOUNT_KEY) {\n        console.warn(\"❌ Cannot generate SAS token: Missing storage account credentials\");\n        console.warn(`Account Name: ${AZURE_STORAGE_ACCOUNT_NAME ? 'SET' : 'NOT SET'}`);\n        console.warn(`Account Key: ${AZURE_STORAGE_ACCOUNT_KEY ? 'SET' : 'NOT SET'}`);\n        return blobClient.url; // Return basic URL as fallback\n      }\n\n      console.log(`✅ Storage credentials available - Account: ${AZURE_STORAGE_ACCOUNT_NAME}`);\n\n      // Set permissions for Document Intelligence (read-only)\n      const permissions = new BlobSASPermissions();\n      permissions.read = true;\n\n      // Set expiry time\n      const expiryTime = new Date();\n      expiryTime.setHours(expiryTime.getHours() + expiryHours);\n      \n      console.log(`⏰ SAS token expires at: ${expiryTime.toISOString()}`);\n\n      // Generate SAS token\n      const sasOptions = {\n        containerName,\n        blobName,\n        permissions: permissions,\n        expiresOn: expiryTime,\n      };\n\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        AZURE_STORAGE_ACCOUNT_NAME,\n        AZURE_STORAGE_ACCOUNT_KEY\n      );\n\n      const sasToken = generateBlobSASQueryParameters(sasOptions, sharedKeyCredential).toString();\n      \n      // Return blob URL with SAS token\n      const sasUrl = `${blobClient.url}?${sasToken}`;\n      console.log(`✅ Generated SAS URL for Document Intelligence access (expires in ${expiryHours}h)`);\n      console.log(`🔗 SAS URL: ${sasUrl.substring(0, 100)}...?${sasToken.substring(0, 50)}...`);\n      return sasUrl;\n\n    } catch (error) {\n      console.error(\"❌ Error generating SAS URL:\", error);\n      console.error(\"Error details:\", error instanceof Error ? error.message : 'Unknown error');\n      // Return basic URL as fallback\n      const fallbackUrl = this.getBlobClient(containerName, blobName).url;\n      console.warn(`🚨 Falling back to basic URL (will likely fail): ${fallbackUrl}`);\n      return fallbackUrl;\n    }\n  }\n\n  // Upload a file directly to Azure Blob Storage\n  async uploadFile(\n    containerName: string,\n    blobName: string,\n    fileBuffer: Buffer,\n    contentType?: string\n  ): Promise<void> {\n    const blobClient = this.getBlobClient(containerName, blobName);\n    \n    const options = {\n      blobHTTPHeaders: {\n        blobContentType: contentType || 'application/octet-stream'\n      },\n      metadata: {\n        uploadedAt: new Date().toISOString()\n      }\n    };\n\n    const blockBlobClient = blobClient.getBlockBlobClient();\n    await blockBlobClient.uploadData(fileBuffer, options);\n  }\n\n  // Download a file from Azure Blob Storage\n  async downloadFile(containerName: string, blobName: string, res: Response): Promise<void> {\n    try {\n      const blobClient = this.getBlobClient(containerName, blobName);\n      \n      // Check if blob exists\n      const exists = await blobClient.exists();\n      if (!exists) {\n        res.status(404).json({ error: 'File not found' });\n        return;\n      }\n\n      // Get blob properties\n      const properties = await blobClient.getProperties();\n      \n      // Set response headers\n      res.set({\n        'Content-Type': properties.contentType || 'application/octet-stream',\n        'Content-Length': properties.contentLength?.toString() || '0',\n        'Cache-Control': 'private, max-age=3600'\n      });\n\n      // Stream the blob to response\n      const downloadResponse = await blobClient.download();\n      if (downloadResponse.readableStreamBody) {\n        downloadResponse.readableStreamBody.pipe(res);\n      } else {\n        res.status(500).json({ error: 'Failed to download file' });\n      }\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      res.status(500).json({ error: 'Failed to download file' });\n    }\n  }\n\n  // Delete a file from Azure Blob Storage\n  async deleteFile(containerName: string, blobName: string): Promise<boolean> {\n    try {\n      const blobClient = this.getBlobClient(containerName, blobName);\n      await blobClient.deleteIfExists();\n      return true;\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      return false;\n    }\n  }\n\n  // List files in a container with optional prefix filter\n  async listFiles(containerName: string, prefix?: string): Promise<Array<{\n    name: string;\n    size: number;\n    lastModified: Date;\n    contentType?: string;\n  }>> {\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      const files: Array<{\n        name: string;\n        size: number;\n        lastModified: Date;\n        contentType?: string;\n      }> = [];\n\n      const listOptions = prefix ? { prefix } : {};\n      \n      for await (const blob of containerClient.listBlobsFlat(listOptions)) {\n        files.push({\n          name: blob.name,\n          size: blob.properties.contentLength || 0,\n          lastModified: blob.properties.lastModified || new Date(),\n          contentType: blob.properties.contentType\n        });\n      }\n\n      return files;\n    } catch (error) {\n      console.error('Error listing files:', error);\n      return [];\n    }\n  }\n\n  // Get blob metadata\n  async getBlobMetadata(containerName: string, blobName: string): Promise<Record<string, string> | null> {\n    try {\n      const blobClient = this.getBlobClient(containerName, blobName);\n      const properties = await blobClient.getProperties();\n      return properties.metadata || null;\n    } catch (error) {\n      console.error('Error getting blob metadata:', error);\n      return null;\n    }\n  }\n\n  // Set blob metadata (Azure has strict requirements for metadata keys)\n  async setBlobMetadata(\n    containerName: string,\n    blobName: string,\n    metadata: Record<string, string>\n  ): Promise<boolean> {\n    try {\n      // Azure metadata keys must be valid HTTP header names\n      // Convert to Azure-compatible format\n      const azureMetadata: Record<string, string> = {};\n      \n      for (const [key, value] of Object.entries(metadata)) {\n        // Replace invalid characters and make lowercase\n        const azureKey = key.toLowerCase()\n          .replace(/[^a-z0-9]/g, '') // Only alphanumeric\n          .substring(0, 64); // Max 64 chars\n        \n        // Ensure value is a string and not empty\n        const azureValue = String(value).replace(/[^\\x20-\\x7E]/g, ''); // ASCII printable only\n        \n        if (azureKey && azureValue) {\n          azureMetadata[azureKey] = azureValue;\n        }\n      }\n      \n      if (Object.keys(azureMetadata).length === 0) {\n        console.log('No valid metadata to set');\n        return true;\n      }\n      \n      const blobClient = this.getBlobClient(containerName, blobName);\n      await blobClient.setMetadata(azureMetadata);\n      return true;\n    } catch (error) {\n      console.error('Error setting blob metadata:', error);\n      return false;\n    }\n  }\n\n  // Move or copy a blob to a different container or name\n  async copyBlob(\n    sourceContainer: string,\n    sourceBlobName: string,\n    targetContainer: string,\n    targetBlobName: string,\n    deleteSource: boolean = false\n  ): Promise<boolean> {\n    try {\n      const sourceBlobClient = this.getBlobClient(sourceContainer, sourceBlobName);\n      const targetBlobClient = this.getBlobClient(targetContainer, targetBlobName);\n\n      // Copy the blob\n      const copyOperation = await targetBlobClient.syncCopyFromURL(sourceBlobClient.url);\n      \n      if (copyOperation.copyStatus === 'success' && deleteSource) {\n        await sourceBlobClient.deleteIfExists();\n      }\n\n      return copyOperation.copyStatus === 'success';\n    } catch (error) {\n      console.error('Error copying blob:', error);\n      return false;\n    }\n  }\n}\n\nexport const azureBlobService = new AzureBlobStorageService();","size_bytes":11719},"server/azureDocumentIntelligence.ts":{"content":"import { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\nimport { azureBlobService, CONTAINERS } from \"./azureBlobStorage\";\n\n// Azure Document Intelligence configuration\nconst AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT = process.env.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT;\nconst AZURE_DOCUMENT_INTELLIGENCE_KEY = process.env.AZURE_DOCUMENT_INTELLIGENCE_KEY;\n\nexport function createDocumentAnalysisClient(): DocumentAnalysisClient {\n  if (!AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT || !AZURE_DOCUMENT_INTELLIGENCE_KEY) {\n    throw new Error(\n      \"Azure Document Intelligence configuration missing. Set both AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT \" +\n      \"and AZURE_DOCUMENT_INTELLIGENCE_KEY environment variables.\"\n    );\n  }\n  \n  return new DocumentAnalysisClient(\n    AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT,\n    new AzureKeyCredential(AZURE_DOCUMENT_INTELLIGENCE_KEY)\n  );\n}\n\nexport class DocumentIntelligenceService {\n  private client: DocumentAnalysisClient | null = null;\n\n  constructor() {\n    try {\n      this.client = createDocumentAnalysisClient();\n    } catch (error: any) {\n      console.warn(\"Document Intelligence not configured:\", error.message);\n      this.client = null;\n    }\n  }\n\n  // Check if Document Intelligence is available\n  isAvailable(): boolean {\n    return this.client !== null;\n  }\n\n  // Generate SAS token for blob access by Document Intelligence\n  private async generateBlobSasUrl(containerName: string, blobName: string): Promise<string> {\n    try {\n      // Use the Azure Blob Service to generate a proper SAS URL\n      const sasUrl = azureBlobService.generateBlobSasUrl(containerName, blobName, 2);\n      console.log(`🔗 Generated SAS URL for Document Intelligence: ${blobName}`);\n      return sasUrl;\n    } catch (error) {\n      console.error(\"Error generating SAS URL:\", error);\n      throw error;\n    }\n  }\n\n  // Extract text and analyze document using Document Intelligence\n  async analyzeDocument(containerName: string, blobName: string): Promise<{\n    text: string;\n    documentType: string;\n    confidence: number;\n    pages: number;\n    tables: any[];\n    keyValuePairs: any[];\n    fullResult: any; // Store complete Document Intelligence JSON\n  }> {\n    if (!this.client) {\n      throw new Error(\"Document Intelligence service is not available\");\n    }\n\n    try {\n      console.log(`🤖 Analyzing document with Azure Document Intelligence: ${blobName}`);\n      \n      // Since blob is now publicly accessible, use direct blob URL\n      const blobClient = azureBlobService.getBlobClient(containerName, blobName);\n      const blobUrl = blobClient.url;\n      console.log(`🔗 Using public blob URL: ${blobUrl}`);\n      \n      // Use the general document analysis model\n      console.log('⏳ Starting Document Intelligence analysis...');\n      const poller = await this.client.beginAnalyzeDocumentFromUrl(\n        \"prebuilt-document\", // General document analysis model\n        blobUrl\n      );\n      \n      console.log('🔄 Polling Document Intelligence for results...');\n      const result = await poller.pollUntilDone();\n      \n      if (!result.content) {\n        throw new Error(\"No content extracted from document\");\n      }\n\n      // Extract tables\n      const tables = result.tables?.map(table => ({\n        rowCount: table.rowCount,\n        columnCount: table.columnCount,\n        cells: table.cells.map(cell => ({\n          text: cell.content,\n          rowIndex: cell.rowIndex,\n          columnIndex: cell.columnIndex\n        }))\n      })) || [];\n\n      // Extract key-value pairs\n      const keyValuePairs = result.keyValuePairs?.map(kvp => ({\n        key: kvp.key?.content || '',\n        value: kvp.value?.content || '',\n        confidence: kvp.confidence || 0\n      })) || [];\n\n      console.log(`✅ Document Intelligence extracted ${result.content.length} characters`);\n      console.log(`📊 Found ${tables.length} tables, ${keyValuePairs.length} key-value pairs`);\n      console.log(`📄 Document has ${result.pages?.length || 1} pages`);\n      \n      return {\n        text: result.content,\n        documentType: 'document',\n        confidence: result.documents?.[0]?.confidence || 0.8,\n        pages: result.pages?.length || 1,\n        tables,\n        keyValuePairs,\n        fullResult: result // Store complete Document Intelligence JSON response\n      };\n    } catch (error) {\n      console.error(\"Document Intelligence analysis failed:\", error);\n      throw new Error(`Document analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Analyze document for medical content specifically\n  async analyzeMedicalDocument(containerName: string, blobName: string): Promise<{\n    text: string;\n    medicalEntities: any[];\n    diagnoses: string[];\n    medications: string[];\n    procedures: string[];\n    dates: string[];\n  }> {\n    try {\n      const basicAnalysis = await this.analyzeDocument(containerName, blobName);\n      \n      // Extract medical-specific information from the text\n      const medicalInfo = this.extractMedicalInformation(basicAnalysis.text);\n      \n      return {\n        text: basicAnalysis.text,\n        ...medicalInfo\n      };\n    } catch (error) {\n      console.error(\"Medical document analysis failed:\", error);\n      throw error;\n    }\n  }\n\n  // Extract medical information from text using pattern matching\n  private extractMedicalInformation(text: string): {\n    medicalEntities: any[];\n    diagnoses: string[];\n    medications: string[];\n    procedures: string[];\n    dates: string[];\n  } {\n    // Basic pattern matching for medical entities\n    // In production, you'd use more sophisticated NLP or AI models\n    \n    const datePattern = /\\b\\d{1,2}[-\\/]\\d{1,2}[-\\/]\\d{2,4}\\b/g;\n    const dates = text.match(datePattern) || [];\n    \n    // Common medical terms (simplified)\n    const diagnosisKeywords = ['diagnosis', 'diagnosed', 'condition', 'disease', 'syndrome', 'injury'];\n    const medicationKeywords = ['medication', 'drug', 'prescription', 'tablet', 'capsule', 'mg', 'ml'];\n    const procedureKeywords = ['surgery', 'procedure', 'operation', 'treatment', 'therapy', 'examination'];\n    \n    // Extract sentences containing medical keywords\n    const sentences = text.split(/[.!?]+/);\n    \n    const diagnoses = sentences.filter(sentence => \n      diagnosisKeywords.some(keyword => \n        sentence.toLowerCase().includes(keyword)\n      )\n    ).slice(0, 5); // Limit to 5 most relevant\n    \n    const medications = sentences.filter(sentence => \n      medicationKeywords.some(keyword => \n        sentence.toLowerCase().includes(keyword)\n      )\n    ).slice(0, 5);\n    \n    const procedures = sentences.filter(sentence => \n      procedureKeywords.some(keyword => \n        sentence.toLowerCase().includes(keyword)\n      )\n    ).slice(0, 5);\n    \n    return {\n      medicalEntities: [], // Would be populated by proper NLP\n      diagnoses: diagnoses.map(d => d.trim()).filter(d => d.length > 0),\n      medications: medications.map(m => m.trim()).filter(m => m.length > 0),\n      procedures: procedures.map(p => p.trim()).filter(p => p.length > 0),\n      dates\n    };\n  }\n}\n\nexport const documentIntelligenceService = new DocumentIntelligenceService();","size_bytes":7202},"server/azureHealthCheck.ts":{"content":"import { azureBlobService, CONTAINERS } from \"./azureBlobStorage\";\n\n/**\n * Test Azure Blob Storage connectivity and container setup\n */\nexport async function testAzureBlobStorage(): Promise<void> {\n  console.log(\"🧪 Testing Azure Blob Storage...\");\n  \n  try {\n    // Test container listing\n    const containers = Object.values(CONTAINERS);\n    console.log(`📦 Testing ${containers.length} containers:`, containers.join(', '));\n    \n    for (const containerName of containers) {\n      try {\n        const files = await azureBlobService.listFiles(containerName);\n        console.log(`✅ Container '${containerName}': accessible (${files.length} files)`);\n      } catch (error) {\n        console.error(`❌ Container '${containerName}' error:`, (error as Error).message);\n      }\n    }\n    \n    // Test upload/download functionality with a small test file\n    const testContainer = CONTAINERS.TEMP;\n    const testBlobName = `test-${Date.now()}.txt`;\n    const testContent = Buffer.from(\"Azure Blob Storage test file\");\n    \n    console.log(\"🔄 Testing upload/download functionality...\");\n    \n    // Upload test file\n    await azureBlobService.uploadFile(testContainer, testBlobName, testContent, \"text/plain\");\n    console.log(\"✅ Test file uploaded successfully\");\n    \n    // Set metadata\n    await azureBlobService.setBlobMetadata(testContainer, testBlobName, {\n      testUpload: \"true\",\n      timestamp: new Date().toISOString()\n    });\n    console.log(\"✅ Metadata set successfully\");\n    \n    // Get metadata\n    const metadata = await azureBlobService.getBlobMetadata(testContainer, testBlobName);\n    console.log(\"✅ Metadata retrieved:\", metadata);\n    \n    // Clean up test file\n    await azureBlobService.deleteFile(testContainer, testBlobName);\n    console.log(\"✅ Test file cleaned up successfully\");\n    \n    console.log(\"🎉 Azure Blob Storage test completed successfully!\");\n    \n  } catch (error) {\n    console.error(\"❌ Azure Blob Storage test failed:\", error);\n    throw error;\n  }\n}\n\n/**\n * Get Azure service status for health endpoint\n */\nexport async function getAzureServiceStatus() {\n  const status = {\n    timestamp: new Date().toISOString(),\n    services: {\n      blobStorage: { status: 'unknown', error: null },\n      documentIntelligence: { status: 'not_implemented', error: null },\n      searchService: { status: 'not_implemented', error: null },\n      openAI: { status: 'not_implemented', error: null },\n      cosmosDB: { status: 'not_implemented', error: null }\n    }\n  };\n\n  // Test Blob Storage\n  try {\n    await azureBlobService.listFiles(CONTAINERS.DOCUMENTS);\n    status.services.blobStorage.status = 'healthy';\n  } catch (error: any) {\n    status.services.blobStorage.status = 'error';\n    status.services.blobStorage.error = error.message;\n  }\n\n  return status;\n}","size_bytes":2812},"server/azureInit.ts":{"content":"import { azureBlobService } from \"./azureBlobStorage\";\nimport { testAzureBlobStorage } from \"./azureHealthCheck\";\nimport { documentIntelligenceService } from \"./azureDocumentIntelligence\";\nimport { azureSearchService } from \"./azureSearchService\";\nimport { OpenAIService } from \"./aiService\";\nimport { cosmosDbService } from \"./cosmosDbService\";\nimport { azureOpenAIEmbeddingsService } from \"./azureOpenAIEmbeddings\";\n\n/**\n * Initialize Azure services for the application\n * This should be called when the server starts\n */\nexport async function initializeAzureServices(): Promise<void> {\n  console.log(\"🚀 Initializing Azure services...\");\n  \n  try {\n    // Check required environment variables\n    const missingVars = getRequiredAzureEnvVars();\n    if (missingVars.length > 0) {\n      throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);\n    }\n    \n    // Initialize blob storage containers\n    await azureBlobService.initializeContainers();\n    console.log(\"✅ Azure Blob Storage containers initialized successfully\");\n    \n    // Test blob storage functionality\n    await testAzureBlobStorage();\n    \n    // Initialize Document Intelligence (if configured)\n    if (documentIntelligenceService.isAvailable()) {\n      console.log(\"✅ Azure Document Intelligence service ready\");\n    } else {\n      console.log(\"⚠️  Azure Document Intelligence not configured (optional)\");\n    }\n    \n    // Initialize Search Service (if configured)\n    if (azureSearchService.isAvailable()) {\n      await azureSearchService.initializeIndex();\n      console.log(\"✅ Azure Search service ready\");\n    } else {\n      console.log(\"⚠️  Azure Search not configured (optional)\");\n    }\n    \n    // Initialize Cosmos DB (if configured)\n    if (cosmosDbService.isAvailable()) {\n      await cosmosDbService.initialize();\n      console.log(\"✅ Cosmos DB service ready\");\n    } else {\n      console.log(\"⚠️  Cosmos DB not configured (optional)\");\n    }\n\n    // Initialize Azure OpenAI Embeddings (if configured)\n    if (azureOpenAIEmbeddingsService.isAvailable()) {\n      console.log(\"✅ Azure OpenAI Embeddings service ready\");\n    } else {\n      console.log(\"⚠️  Azure OpenAI Embeddings not configured (optional)\");\n    }\n    \n    // Initialize OpenAI service (if configured)\n    if (process.env.OPENAI_API_KEY) {\n      const openAIService = new OpenAIService(process.env.OPENAI_API_KEY);\n      console.log(\"✅ OpenAI service ready\");\n    } else {\n      console.log(\"⚠️  OpenAI not configured (optional)\");\n    }\n    \n    console.log(\"🎉 Azure services initialization completed successfully\");\n  } catch (error) {\n    console.error(\"❌ Failed to initialize Azure services:\", error);\n    throw error;\n  }\n}\n\n/**\n * Check Azure service health and connectivity\n */\nexport async function checkAzureServicesHealth(): Promise<{\n  blobStorage: boolean;\n  documentIntelligence: boolean;\n  searchService: boolean;\n  openAI: boolean;\n  cosmosDb: boolean;\n  embeddings: boolean;\n}> {\n  const health = {\n    blobStorage: false,\n    documentIntelligence: false,\n    searchService: false,\n    openAI: false,\n    cosmosDb: false,\n    embeddings: false,\n  };\n\n  // Check Blob Storage\n  try {\n    await azureBlobService.listFiles('documents');\n    health.blobStorage = true;\n  } catch (error) {\n    console.error(\"Blob Storage health check failed:\", error);\n  }\n\n  // Check Document Intelligence\n  health.documentIntelligence = documentIntelligenceService.isAvailable();\n\n  // Check Search Service\n  health.searchService = azureSearchService.isAvailable();\n\n  // Check OpenAI\n  health.openAI = !!process.env.OPENAI_API_KEY;\n\n  // Check Cosmos DB\n  health.cosmosDb = cosmosDbService.isAvailable();\n\n  // Check Embeddings service\n  health.embeddings = azureOpenAIEmbeddingsService.isAvailable();\n\n  return health;\n}\n\n/**\n * Get required environment variables for Azure services\n */\nexport function getRequiredAzureEnvVars(): string[] {\n  const required = [\n    'AZURE_STORAGE_ACCOUNT_NAME',\n    'AZURE_STORAGE_ACCOUNT_KEY',\n    // TODO: Add other required variables as we implement more services\n  ];\n\n  const missing = required.filter(envVar => !process.env[envVar]);\n  \n  if (missing.length > 0) {\n    console.warn(`Missing Azure environment variables: ${missing.join(', ')}`);\n  }\n\n  return missing;\n}","size_bytes":4324},"server/azureOpenAIEmbeddings.ts":{"content":"import { OpenAI } from \"openai\";\n\n// Azure OpenAI Embeddings configuration\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;\nconst AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION || \"2024-02-15-preview\";\n// For embeddings, we need a separate deployment or fall back to OpenAI\nconst EMBEDDINGS_MODEL = process.env.AZURE_OPENAI_EMBEDDINGS_MODEL || \"text-embedding-ada-002\";\n\nexport interface EmbeddingResult {\n  embedding: number[];\n  model: string;\n  dimensions: number;\n  usage: {\n    promptTokens: number;\n    totalTokens: number;\n  };\n}\n\nexport class AzureOpenAIEmbeddingsService {\n  private client: OpenAI | null = null;\n  private embeddingsModel: string;\n\n  constructor() {\n    this.embeddingsModel = EMBEDDINGS_MODEL;\n    \n    try {\n      // Check if we have Azure embeddings deployment configured\n      if (AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_KEY && process.env.AZURE_OPENAI_EMBEDDINGS_MODEL) {\n        this.client = new OpenAI({\n          apiKey: AZURE_OPENAI_KEY,\n          baseURL: `${AZURE_OPENAI_ENDPOINT}/openai/deployments/${EMBEDDINGS_MODEL}`,\n          defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n          defaultHeaders: {\n            'api-key': AZURE_OPENAI_KEY,\n          }\n        });\n        console.log(\"✅ Using Azure OpenAI for embeddings\");\n      } else if (process.env.OPENAI_API_KEY) {\n        // Fallback to regular OpenAI for embeddings\n        this.client = new OpenAI({\n          apiKey: process.env.OPENAI_API_KEY\n        });\n        this.embeddingsModel = \"text-embedding-ada-002\";\n        console.log(\"✅ Using OpenAI for embeddings (Azure embeddings not configured)\");\n      } else {\n        throw new Error(\"Neither Azure OpenAI embeddings nor OpenAI configured for embeddings\");\n      }\n    } catch (error: any) {\n      console.warn(\"Embeddings service not configured:\", error.message);\n      this.client = null;\n    }\n  }\n\n  // Check if service is available\n  isAvailable(): boolean {\n    return this.client !== null;\n  }\n\n  // Generate embeddings for text\n  async generateEmbedding(text: string): Promise<EmbeddingResult> {\n    if (!this.client) {\n      throw new Error(\"Embeddings service is not available\");\n    }\n\n    if (!text || text.trim().length === 0) {\n      throw new Error(\"Text input is required for embeddings\");\n    }\n\n    try {\n      console.log(`🔢 Generating embeddings for text (${text.length} chars)...`);\n      \n      const response = await this.client.embeddings.create({\n        model: this.embeddingsModel,\n        input: text,\n        encoding_format: \"float\"\n      });\n\n      if (!response.data || response.data.length === 0) {\n        throw new Error(\"No embeddings returned from API\");\n      }\n\n      const embedding = response.data[0].embedding;\n      \n      console.log(`✅ Generated ${embedding.length}-dimensional embedding`);\n      \n      return {\n        embedding,\n        model: this.embeddingsModel,\n        dimensions: embedding.length,\n        usage: {\n          promptTokens: response.usage?.prompt_tokens || 0,\n          totalTokens: response.usage?.total_tokens || 0\n        }\n      };\n    } catch (error) {\n      console.error(\"Failed to generate embeddings:\", error);\n      throw new Error(`Embeddings generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Generate embeddings for multiple texts (batch processing)\n  async generateEmbeddings(texts: string[]): Promise<EmbeddingResult[]> {\n    if (!this.client) {\n      throw new Error(\"Embeddings service is not available\");\n    }\n\n    if (!texts || texts.length === 0) {\n      throw new Error(\"Text inputs are required for batch embeddings\");\n    }\n\n    // Filter out empty texts\n    const validTexts = texts.filter(text => text && text.trim().length > 0);\n    if (validTexts.length === 0) {\n      throw new Error(\"No valid text inputs provided\");\n    }\n\n    try {\n      console.log(`🔢 Generating embeddings for ${validTexts.length} texts...`);\n      \n      const response = await this.client.embeddings.create({\n        model: this.embeddingsModel,\n        input: validTexts,\n        encoding_format: \"float\"\n      });\n\n      if (!response.data || response.data.length === 0) {\n        throw new Error(\"No embeddings returned from API\");\n      }\n\n      const results: EmbeddingResult[] = response.data.map((item, index) => ({\n        embedding: item.embedding,\n        model: this.embeddingsModel,\n        dimensions: item.embedding.length,\n        usage: {\n          promptTokens: Math.ceil((response.usage?.prompt_tokens || 0) / validTexts.length),\n          totalTokens: Math.ceil((response.usage?.total_tokens || 0) / validTexts.length)\n        }\n      }));\n\n      console.log(`✅ Generated embeddings for ${results.length} texts`);\n      \n      return results;\n    } catch (error) {\n      console.error(\"Failed to generate batch embeddings:\", error);\n      throw new Error(`Batch embeddings generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Calculate cosine similarity between two embeddings\n  calculateCosineSimilarity(embedding1: number[], embedding2: number[]): number {\n    if (embedding1.length !== embedding2.length) {\n      throw new Error(\"Embeddings must have the same dimensions\");\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < embedding1.length; i++) {\n      dotProduct += embedding1[i] * embedding2[i];\n      norm1 += embedding1[i] * embedding1[i];\n      norm2 += embedding2[i] * embedding2[i];\n    }\n\n    if (norm1 === 0 || norm2 === 0) {\n      return 0;\n    }\n\n    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));\n  }\n\n  // Find similar embeddings from a collection\n  findSimilarEmbeddings(\n    queryEmbedding: number[], \n    candidateEmbeddings: Array<{ id: string; embedding: number[]; metadata?: any }>,\n    threshold: number = 0.7,\n    limit: number = 10\n  ): Array<{ id: string; similarity: number; metadata?: any }> {\n    const similarities = candidateEmbeddings.map(candidate => ({\n      id: candidate.id,\n      similarity: this.calculateCosineSimilarity(queryEmbedding, candidate.embedding),\n      metadata: candidate.metadata\n    }));\n\n    return similarities\n      .filter(item => item.similarity >= threshold)\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, limit);\n  }\n\n  // Chunk text for embedding (handles long texts)\n  chunkTextForEmbedding(text: string, maxTokens: number = 8000): string[] {\n    if (!text || text.trim().length === 0) {\n      return [];\n    }\n\n    // Rough estimation: 1 token ≈ 4 characters for English text\n    const approximateTokensPerChar = 0.25;\n    const maxChars = Math.floor(maxTokens / approximateTokensPerChar);\n\n    if (text.length <= maxChars) {\n      return [text];\n    }\n\n    const chunks: string[] = [];\n    let currentPosition = 0;\n\n    while (currentPosition < text.length) {\n      let endPosition = Math.min(currentPosition + maxChars, text.length);\n      \n      // Try to break at sentence boundaries if possible\n      if (endPosition < text.length) {\n        const sentenceBreak = text.lastIndexOf('.', endPosition);\n        const paragraphBreak = text.lastIndexOf('\\n\\n', endPosition);\n        \n        if (sentenceBreak > currentPosition + (maxChars * 0.5)) {\n          endPosition = sentenceBreak + 1;\n        } else if (paragraphBreak > currentPosition + (maxChars * 0.5)) {\n          endPosition = paragraphBreak + 2;\n        }\n      }\n\n      const chunk = text.substring(currentPosition, endPosition).trim();\n      if (chunk.length > 0) {\n        chunks.push(chunk);\n      }\n\n      currentPosition = endPosition;\n    }\n\n    console.log(`📝 Split text into ${chunks.length} chunks for embedding`);\n    return chunks;\n  }\n}\n\nexport const azureOpenAIEmbeddingsService = new AzureOpenAIEmbeddingsService();","size_bytes":7900},"server/azureSearchService.ts":{"content":"import { SearchClient, SearchIndexClient, AzureKeyCredential } from \"@azure/search-documents\";\n\n// Azure Search configuration\nconst AZURE_SEARCH_ENDPOINT = process.env.AZURE_SEARCH_ENDPOINT;\nconst AZURE_SEARCH_KEY = process.env.AZURE_SEARCH_KEY;\nconst SEARCH_INDEX_NAME = \"documents-index\";\n\nexport interface SearchDocument {\n  id: string;\n  fileName: string;\n  content: string;\n  documentType: string;\n  caseId?: string;\n  uploadDate: string;\n  extractedData?: any;\n  summary?: string;\n  tags?: string[];\n  contentVector?: number[];\n  summaryVector?: number[];\n}\n\nexport class AzureSearchService {\n  private searchClient: SearchClient<SearchDocument> | null = null;\n  private indexClient: SearchIndexClient | null = null;\n\n  constructor() {\n    try {\n      if (!AZURE_SEARCH_ENDPOINT || !AZURE_SEARCH_KEY) {\n        throw new Error(\n          \"Azure Search configuration missing. Set both AZURE_SEARCH_ENDPOINT \" +\n          \"and AZURE_SEARCH_KEY environment variables.\"\n        );\n      }\n\n      const credential = new AzureKeyCredential(AZURE_SEARCH_KEY);\n      this.searchClient = new SearchClient<SearchDocument>(\n        AZURE_SEARCH_ENDPOINT,\n        SEARCH_INDEX_NAME,\n        credential\n      );\n      this.indexClient = new SearchIndexClient(AZURE_SEARCH_ENDPOINT, credential);\n    } catch (error: any) {\n      console.warn(\"Azure Search not configured:\", error.message);\n      this.searchClient = null;\n      this.indexClient = null;\n    }\n  }\n\n  // Check if Search service is available\n  isAvailable(): boolean {\n    return this.searchClient !== null && this.indexClient !== null;\n  }\n\n  // Initialize search index\n  async initializeIndex(): Promise<void> {\n    if (!this.indexClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(\"🔍 Initializing Azure Search index...\");\n      \n      // Check if index exists\n      try {\n        await this.indexClient.getIndex(SEARCH_INDEX_NAME);\n        console.log(\"✅ Search index already exists\");\n        return;\n      } catch (error) {\n        // Index doesn't exist, create it\n        console.log(\"📝 Creating search index...\");\n      }\n\n      // Define the search index schema\n      const indexDefinition = {\n        name: SEARCH_INDEX_NAME,\n        fields: [\n          {\n            name: \"id\",\n            type: \"Edm.String\" as const,\n            key: true,\n            searchable: false,\n            filterable: true,\n            sortable: false\n          },\n          {\n            name: \"fileName\",\n            type: \"Edm.String\" as const,\n            searchable: true,\n            filterable: true,\n            sortable: true\n          },\n          {\n            name: \"content\",\n            type: \"Edm.String\" as const,\n            searchable: true,\n            filterable: false,\n            sortable: false,\n            analyzerName: \"standard.lucene\"\n          },\n          {\n            name: \"documentType\",\n            type: \"Edm.String\" as const,\n            searchable: false,\n            filterable: true,\n            sortable: true\n          },\n          {\n            name: \"caseId\",\n            type: \"Edm.String\" as const,\n            searchable: false,\n            filterable: true,\n            sortable: false\n          },\n          {\n            name: \"uploadDate\",\n            type: \"Edm.DateTimeOffset\" as const,\n            searchable: false,\n            filterable: true,\n            sortable: true\n          },\n          {\n            name: \"summary\",\n            type: \"Edm.String\" as const,\n            searchable: true,\n            filterable: false,\n            sortable: false\n          },\n          {\n            name: \"tags\",\n            type: \"Collection(Edm.String)\" as const,\n            searchable: true,\n            filterable: true,\n            sortable: false\n          },\n          {\n            name: \"contentVector\",\n            type: \"Collection(Edm.Single)\" as const,\n            searchable: true,\n            filterable: false,\n            sortable: false,\n            dimensions: 1536,\n            vectorSearchProfile: \"content-vector-profile\"\n          },\n          {\n            name: \"summaryVector\", \n            type: \"Collection(Edm.Single)\" as const,\n            searchable: true,\n            filterable: false,\n            sortable: false,\n            dimensions: 1536,\n            vectorSearchProfile: \"summary-vector-profile\"\n          }\n        ],\n        vectorSearch: {\n          algorithms: [\n            {\n              name: \"hnsw-algorithm\",\n              kind: \"hnsw\",\n              hnswParameters: {\n                metric: \"cosine\",\n                m: 4,\n                efConstruction: 400,\n                efSearch: 500\n              }\n            }\n          ],\n          profiles: [\n            {\n              name: \"content-vector-profile\",\n              algorithmConfigurationName: \"hnsw-algorithm\"\n            },\n            {\n              name: \"summary-vector-profile\", \n              algorithmConfigurationName: \"hnsw-algorithm\"\n            }\n          ]\n        },\n        scoringProfiles: [\n          {\n            name: \"boost-filename\",\n            text: {\n              weights: {\n                fileName: 2,\n                summary: 1.5,\n                content: 1,\n                tags: 1.2\n              }\n            }\n          }\n        ],\n        defaultScoringProfile: \"boost-filename\"\n      };\n\n      await this.indexClient.createIndex(indexDefinition);\n      console.log(\"✅ Search index created successfully\");\n    } catch (error) {\n      console.error(\"Failed to initialize search index:\", error);\n      throw error;\n    }\n  }\n\n  // Index a document for search\n  async indexDocument(document: SearchDocument): Promise<void> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🔍 Indexing document: ${document.fileName}`);\n      \n      const indexResult = await this.searchClient.uploadDocuments([document]);\n      \n      if (indexResult.results[0].succeeded) {\n        console.log(`✅ Document indexed successfully: ${document.fileName}`);\n      } else {\n        throw new Error(`Failed to index document: ${indexResult.results[0].errorMessage}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to index document:\", error);\n      throw error;\n    }\n  }\n\n  // Vector search documents\n  async vectorSearchDocuments(\n    queryVector: number[],\n    options: {\n      caseId?: string;\n      documentType?: string;\n      top?: number;\n      vectorFields?: string[];\n    } = {}\n  ): Promise<{\n    results: Array<SearchDocument & { score: number }>;\n    count: number;\n  }> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🔍 Performing vector search...`);\n      \n      let filter = \"\";\n      const filters: string[] = [];\n      \n      if (options.caseId) {\n        filters.push(`caseId eq '${options.caseId}'`);\n      }\n      \n      if (options.documentType) {\n        filters.push(`documentType eq '${options.documentType}'`);\n      }\n      \n      if (filters.length > 0) {\n        filter = filters.join(\" and \");\n      }\n\n      const vectorFields = options.vectorFields || [\"contentVector\"];\n      const vectorQueries = vectorFields.map(field => ({\n        vector: queryVector,\n        fields: [field],\n        k: options.top || 50\n      }));\n\n      const searchOptions = {\n        vectors: vectorQueries,\n        filter: filter || undefined,\n        top: options.top || 50,\n        select: [\"id\", \"fileName\", \"content\", \"summary\", \"documentType\", \"caseId\", \"uploadDate\", \"tags\"] as (keyof SearchDocument)[]\n      };\n\n      const searchResults = await this.searchClient.search(\"*\", searchOptions);\n      \n      const results: Array<SearchDocument & { score: number }> = [];\n      \n      for await (const result of searchResults.results) {\n        results.push({\n          ...result.document,\n          score: result.score || 0\n        });\n      }\n\n      console.log(`✅ Vector search found ${results.length} documents`);\n      \n      return {\n        results,\n        count: results.length\n      };\n    } catch (error) {\n      console.error(\"Vector search failed:\", error);\n      throw error;\n    }\n  }\n\n  // Hybrid search (combines text and vector search)\n  async hybridSearchDocuments(\n    query: string,\n    queryVector?: number[],\n    options: {\n      caseId?: string;\n      documentType?: string;\n      top?: number;\n      skip?: number;\n    } = {}\n  ): Promise<{\n    results: Array<SearchDocument & { score: number }>;\n    count: number;\n  }> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🔍 Performing hybrid search for query: \"${query}\"`);\n      \n      let filter = \"\";\n      const filters: string[] = [];\n      \n      if (options.caseId) {\n        filters.push(`caseId eq '${options.caseId}'`);\n      }\n      \n      if (options.documentType) {\n        filters.push(`documentType eq '${options.documentType}'`);\n      }\n      \n      if (filters.length > 0) {\n        filter = filters.join(\" and \");\n      }\n\n      const searchOptions: any = {\n        top: options.top || 50,\n        skip: options.skip || 0,\n        filter: filter || undefined,\n        highlightFields: \"content,summary\",\n        searchFields: [\"fileName\", \"content\", \"summary\", \"tags\"] as (keyof SearchDocument)[],\n        select: [\"id\", \"fileName\", \"content\", \"summary\", \"documentType\", \"caseId\", \"uploadDate\", \"tags\"] as (keyof SearchDocument)[]\n      };\n\n      // Add vector search if embedding provided\n      if (queryVector && queryVector.length > 0) {\n        searchOptions.vectors = [{\n          vector: queryVector,\n          fields: [\"contentVector\", \"summaryVector\"],\n          k: options.top || 50\n        }];\n      }\n\n      const searchResults = await this.searchClient.search(query, searchOptions);\n      \n      const results: Array<SearchDocument & { score: number }> = [];\n      \n      for await (const result of searchResults.results) {\n        results.push({\n          ...result.document,\n          score: result.score || 0\n        });\n      }\n\n      console.log(`✅ Hybrid search found ${results.length} documents`);\n      \n      return {\n        results,\n        count: searchResults.count || results.length\n      };\n    } catch (error) {\n      console.error(\"Hybrid search failed:\", error);\n      throw error;\n    }\n  }\n\n  // Traditional text search (existing method)\n  async searchDocuments(\n    query: string,\n    options: {\n      caseId?: string;\n      documentType?: string;\n      top?: number;\n      skip?: number;\n    } = {}\n  ): Promise<{\n    results: Array<SearchDocument & { score: number }>;\n    count: number;\n  }> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🔍 Searching documents for query: \"${query}\"`);\n      \n      let filter = \"\";\n      const filters: string[] = [];\n      \n      if (options.caseId) {\n        filters.push(`caseId eq '${options.caseId}'`);\n      }\n      \n      if (options.documentType) {\n        filters.push(`documentType eq '${options.documentType}'`);\n      }\n      \n      if (filters.length > 0) {\n        filter = filters.join(\" and \");\n      }\n\n      const searchOptions = {\n        top: options.top || 50,\n        skip: options.skip || 0,\n        filter: filter || undefined,\n        includeTotalCount: true,\n        scoringProfile: \"boost-filename\",\n        highlightFields: \"content,summary\",\n        searchFields: [\"fileName\", \"content\", \"summary\", \"tags\"] as (keyof SearchDocument)[]\n      };\n\n      const searchResults = await this.searchClient.search(query, searchOptions);\n      \n      const results: Array<SearchDocument & { score: number }> = [];\n      \n      for await (const result of searchResults.results) {\n        results.push({\n          ...result.document,\n          score: result.score || 0\n        });\n      }\n\n      console.log(`✅ Found ${results.length} documents`);\n      \n      return {\n        results,\n        count: searchResults.count || results.length\n      };\n    } catch (error) {\n      console.error(\"Search failed:\", error);\n      throw error;\n    }\n  }\n\n  // Get suggestions for autocomplete\n  async getSuggestions(query: string, top: number = 5): Promise<string[]> {\n    if (!this.searchClient) {\n      return [];\n    }\n\n    try {\n      // Use search to get suggestions based on existing content\n      const searchResults = await this.searchClient.search(query, {\n        top,\n        select: [\"fileName\", \"summary\"] as (keyof SearchDocument)[],\n        searchFields: [\"fileName\", \"content\", \"summary\"] as (keyof SearchDocument)[]\n      });\n\n      const suggestions: string[] = [];\n      for await (const result of searchResults.results) {\n        if (result.document.fileName) {\n          suggestions.push(result.document.fileName);\n        }\n      }\n\n      return Array.from(new Set(suggestions)); // Remove duplicates\n    } catch (error) {\n      console.error(\"Failed to get suggestions:\", error);\n      return [];\n    }\n  }\n\n  // Delete document from index\n  async deleteDocument(documentId: string): Promise<void> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🗑️ Deleting document from index: ${documentId}`);\n      \n      const deleteResult = await this.searchClient.deleteDocuments([{ id: documentId } as SearchDocument]);\n      \n      if (deleteResult.results[0].succeeded) {\n        console.log(`✅ Document deleted from index: ${documentId}`);\n      } else {\n        throw new Error(`Failed to delete document: ${deleteResult.results[0].errorMessage}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to delete document from index:\", error);\n      throw error;\n    }\n  }\n\n  // Update document in index\n  async updateDocument(document: Partial<SearchDocument> & { id: string }): Promise<void> {\n    if (!this.searchClient) {\n      throw new Error(\"Search service is not available\");\n    }\n\n    try {\n      console.log(`🔄 Updating document in index: ${document.id}`);\n      \n      const updateResult = await this.searchClient.mergeOrUploadDocuments([document as SearchDocument]);\n      \n      if (updateResult.results[0].succeeded) {\n        console.log(`✅ Document updated in index: ${document.id}`);\n      } else {\n        throw new Error(`Failed to update document: ${updateResult.results[0].errorMessage}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to update document in index:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const azureSearchService = new AzureSearchService();","size_bytes":14723},"server/azureTest.ts":{"content":"// Azure Services Test Script\nimport { documentIntelligenceService } from \"./azureDocumentIntelligence\";\nimport { azureSearchService } from \"./azureSearchService\";\nimport { azureOpenAIEmbeddingsService } from \"./azureOpenAIEmbeddings\";\nimport OpenAI from \"openai\";\n\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;\nconst AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;\nconst AZURE_OPENAI_DEPLOYMENT_NAME = process.env.AZURE_OPENAI_DEPLOYMENT_NAME;\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION;\n\nexport async function testAzureServices() {\n  console.log(\"🧪 Testing All Azure AI Services...\\n\");\n\n  // Test 1: Document Intelligence\n  console.log(\"1️⃣ Testing Document Intelligence:\");\n  console.log(`   Available: ${documentIntelligenceService.isAvailable()}`);\n  \n  // Test 2: Azure Search\n  console.log(\"2️⃣ Testing Azure Search:\");\n  console.log(`   Available: ${azureSearchService.isAvailable()}`);\n  \n  // Test 3: Azure OpenAI Embeddings\n  console.log(\"3️⃣ Testing Azure OpenAI Embeddings:\");\n  console.log(`   Available: ${azureOpenAIEmbeddingsService.isAvailable()}`);\n  \n  if (azureOpenAIEmbeddingsService.isAvailable()) {\n    try {\n      console.log(\"   🔢 Testing embedding generation...\");\n      const testResult = await azureOpenAIEmbeddingsService.generateEmbedding(\"test text\");\n      console.log(`   ✅ Embeddings working: ${testResult.dimensions} dimensions`);\n    } catch (error) {\n      console.log(`   ❌ Embeddings failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  // Test 4: Azure OpenAI Chat\n  console.log(\"4️⃣ Testing Azure OpenAI Chat:\");\n  console.log(`   Endpoint: ${AZURE_OPENAI_ENDPOINT}`);\n  console.log(`   Deployment: ${AZURE_OPENAI_DEPLOYMENT_NAME}`);\n  console.log(`   API Version: ${AZURE_OPENAI_API_VERSION}`);\n  \n  if (AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_KEY && AZURE_OPENAI_DEPLOYMENT_NAME) {\n    try {\n      console.log(\"   🤖 Testing Azure OpenAI chat...\");\n      \n      const client = new OpenAI({\n        apiKey: AZURE_OPENAI_KEY,\n        baseURL: `${AZURE_OPENAI_ENDPOINT}/openai/deployments/${AZURE_OPENAI_DEPLOYMENT_NAME}`,\n        defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n        defaultHeaders: {\n          'api-key': AZURE_OPENAI_KEY,\n        }\n      });\n      \n      const response = await client.chat.completions.create({\n        model: AZURE_OPENAI_DEPLOYMENT_NAME,\n        messages: [{ role: \"user\", content: \"Say 'Azure OpenAI is working!'\" }],\n        max_tokens: 50,\n      });\n      \n      console.log(`   ✅ Azure OpenAI Chat working: \"${response.choices[0].message.content}\"`);\n    } catch (error) {\n      console.log(`   ❌ Azure OpenAI Chat failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  } else {\n    console.log(\"   ⚠️ Missing Azure OpenAI configuration\");\n  }\n\n  console.log(\"\\n🏁 Azure Services Test Complete!\");\n}\n\n// Test individual services\nexport async function testDocumentIntelligence() {\n  console.log(\"🧪 Testing Document Intelligence with a sample blob...\");\n  // This would test with an actual uploaded document\n}\n\nexport async function testEmbeddingsDeployment() {\n  console.log(\"🔢 Testing different embedding models...\");\n  \n  const commonEmbeddingModels = [\n    \"text-embedding-ada-002\",\n    \"text-embedding-3-small\", \n    \"text-embedding-3-large\"\n  ];\n  \n  for (const model of commonEmbeddingModels) {\n    try {\n      console.log(`   Testing model: ${model}`);\n      \n      const client = new OpenAI({\n        apiKey: AZURE_OPENAI_KEY,\n        baseURL: `${AZURE_OPENAI_ENDPOINT}/openai/deployments/${model}`,\n        defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n        defaultHeaders: {\n          'api-key': AZURE_OPENAI_KEY || '',\n        }\n      });\n      \n      const response = await client.embeddings.create({\n        model: model,\n        input: \"test text for embeddings\",\n      });\n      \n      console.log(`   ✅ ${model} works: ${response.data[0].embedding.length} dimensions`);\n      return model; // Return first working model\n    } catch (error) {\n      console.log(`   ❌ ${model} failed: ${error instanceof Error ? error.message : 'Unknown'}`);\n    }\n  }\n  \n  return null;\n}","size_bytes":4247},"server/cosmosDbService.ts":{"content":"import { CosmosClient, Database, Container } from \"@azure/cosmos\";\n\n// Cosmos DB configuration\nconst COSMOS_ENDPOINT = process.env.AZURE_COSMOS_ENDPOINT;\nconst COSMOS_KEY = process.env.AZURE_COSMOS_KEY;\nconst DATABASE_NAME = \"legalmed\";\n\nexport interface DocumentMetadata {\n  id: string;\n  fileName: string;\n  caseId: string;\n  uploadedBy: string;\n  uploadDate: string;\n  fileSize: number;\n  mimeType: string;\n  blobPath: string;\n  processingStatus: 'uploaded' | 'analyzing' | 'processed' | 'error';\n  documentIntelligence?: {\n    extractedText: string;\n    confidence: number;\n    pages: number;\n    tablesCount: number;\n    keyValuePairsCount: number;\n  };\n  aiAnalysis?: {\n    summary: string;\n    extractedData: any;\n    keyFindings: string[];\n    processingDate: string;\n  };\n  vectorEmbedding?: {\n    model: string;\n    embeddingId: string;\n    dimensions: number;\n    createdDate: string;\n  };\n  searchIndex?: {\n    indexed: boolean;\n    indexDate: string;\n    searchScore?: number;\n  };\n}\n\nexport class CosmosDbService {\n  private client: CosmosClient | null = null;\n  private database: Database | null = null;\n  private documentsContainer: Container | null = null;\n\n  constructor() {\n    try {\n      if (!COSMOS_ENDPOINT || !COSMOS_KEY) {\n        throw new Error(\n          \"Cosmos DB configuration missing. Set both AZURE_COSMOS_ENDPOINT \" +\n          \"and AZURE_COSMOS_KEY environment variables.\"\n        );\n      }\n\n      this.client = new CosmosClient({\n        endpoint: COSMOS_ENDPOINT,\n        key: COSMOS_KEY,\n      });\n    } catch (error: any) {\n      console.warn(\"Cosmos DB not configured:\", error.message);\n      this.client = null;\n    }\n  }\n\n  // Check if Cosmos DB service is available\n  isAvailable(): boolean {\n    return this.client !== null;\n  }\n\n  // Initialize database and containers\n  async initialize(): Promise<void> {\n    if (!this.client) {\n      throw new Error(\"Cosmos DB service is not available\");\n    }\n\n    try {\n      console.log(\"🚀 Initializing Cosmos DB...\");\n      \n      // Create database\n      const { database } = await this.client.databases.createIfNotExists({\n        id: DATABASE_NAME\n      });\n      this.database = database;\n      console.log(`✅ Database '${DATABASE_NAME}' ready`);\n\n      // Create containers\n      const { container: documentsContainer } = await database.containers.createIfNotExists({\n        id: \"documents\",\n        partitionKey: { paths: [\"/caseId\"] },\n        indexingPolicy: {\n          automatic: true,\n          indexingMode: \"consistent\",\n          includedPaths: [\n            { path: \"/*\" }\n          ],\n          excludedPaths: [\n            { path: \"/vectorEmbedding/*\" } // Exclude vector embeddings from indexing\n          ]\n        }\n      });\n      this.documentsContainer = documentsContainer;\n      console.log(\"✅ Container 'documents' ready\");\n\n    } catch (error) {\n      console.error(\"Failed to initialize Cosmos DB:\", error);\n      throw error;\n    }\n  }\n\n  // Store document metadata\n  async storeDocumentMetadata(metadata: DocumentMetadata): Promise<DocumentMetadata> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      console.log(`📝 Storing metadata for document: ${metadata.fileName}`);\n      \n      const { resource } = await this.documentsContainer.items.create(metadata);\n      console.log(`✅ Metadata stored with ID: ${resource?.id}`);\n      \n      return resource as DocumentMetadata;\n    } catch (error) {\n      console.error(\"Failed to store document metadata:\", error);\n      throw error;\n    }\n  }\n\n  // Update document metadata\n  async updateDocumentMetadata(\n    id: string, \n    caseId: string, \n    updates: Partial<DocumentMetadata>\n  ): Promise<DocumentMetadata> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      console.log(`🔄 Updating metadata for document: ${id}`);\n      \n      // Get existing document\n      const { resource: existing } = await this.documentsContainer.item(id, caseId).read();\n      if (!existing) {\n        throw new Error(\"Document not found\");\n      }\n\n      // Merge updates\n      const updated = {\n        ...existing,\n        ...updates,\n        id: existing.id, // Ensure ID doesn't change\n        lastModified: new Date().toISOString()\n      };\n\n      // Update document\n      const { resource } = await this.documentsContainer.item(id, caseId).replace(updated);\n      console.log(`✅ Metadata updated for document: ${id}`);\n      \n      return resource as DocumentMetadata;\n    } catch (error) {\n      console.error(\"Failed to update document metadata:\", error);\n      throw error;\n    }\n  }\n\n  // Get document metadata\n  async getDocumentMetadata(id: string, caseId: string): Promise<DocumentMetadata | null> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      const { resource } = await this.documentsContainer.item(id, caseId).read();\n      return resource as DocumentMetadata || null;\n    } catch (error: any) {\n      if (error.code === 404) {\n        return null;\n      }\n      console.error(\"Failed to get document metadata:\", error);\n      throw error;\n    }\n  }\n\n  // Query documents by case\n  async getDocumentsByCase(caseId: string): Promise<DocumentMetadata[]> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      const querySpec = {\n        query: \"SELECT * FROM c WHERE c.caseId = @caseId ORDER BY c.uploadDate DESC\",\n        parameters: [\n          {\n            name: \"@caseId\",\n            value: caseId\n          }\n        ]\n      };\n\n      const { resources } = await this.documentsContainer.items.query<DocumentMetadata>(querySpec).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error(\"Failed to query documents by case:\", error);\n      throw error;\n    }\n  }\n\n  // Query processed documents\n  async getProcessedDocuments(\n    limit: number = 50,\n    continuationToken?: string\n  ): Promise<{ documents: DocumentMetadata[], continuationToken?: string }> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      const querySpec = {\n        query: `\n          SELECT * FROM c \n          WHERE c.processingStatus = 'processed' \n          ORDER BY c.uploadDate DESC\n          OFFSET 0 LIMIT @limit\n        `,\n        parameters: [\n          {\n            name: \"@limit\",\n            value: limit\n          }\n        ]\n      };\n\n      const response = await this.documentsContainer.items\n        .query<DocumentMetadata>(querySpec, { \n          maxItemCount: limit,\n          continuationToken \n        })\n        .fetchNext();\n\n      return {\n        documents: response.resources,\n        continuationToken: response.continuationToken\n      };\n    } catch (error) {\n      console.error(\"Failed to query processed documents:\", error);\n      throw error;\n    }\n  }\n\n  // Delete document metadata\n  async deleteDocumentMetadata(id: string, caseId: string): Promise<void> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      console.log(`🗑️ Deleting metadata for document: ${id}`);\n      await this.documentsContainer.item(id, caseId).delete();\n      console.log(`✅ Metadata deleted for document: ${id}`);\n    } catch (error) {\n      console.error(\"Failed to delete document metadata:\", error);\n      throw error;\n    }\n  }\n\n  // Search documents with filters\n  async searchDocuments(\n    searchQuery: string,\n    filters: {\n      caseId?: string;\n      processingStatus?: string;\n      uploadedBy?: string;\n      dateRange?: { start: string; end: string };\n    } = {},\n    limit: number = 50\n  ): Promise<DocumentMetadata[]> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      let whereClause = \"WHERE 1=1\";\n      const parameters: any[] = [];\n\n      if (searchQuery) {\n        whereClause += \" AND (CONTAINS(c.fileName, @searchQuery) OR CONTAINS(c.aiAnalysis.summary, @searchQuery))\";\n        parameters.push({ name: \"@searchQuery\", value: searchQuery });\n      }\n\n      if (filters.caseId) {\n        whereClause += \" AND c.caseId = @caseId\";\n        parameters.push({ name: \"@caseId\", value: filters.caseId });\n      }\n\n      if (filters.processingStatus) {\n        whereClause += \" AND c.processingStatus = @processingStatus\";\n        parameters.push({ name: \"@processingStatus\", value: filters.processingStatus });\n      }\n\n      if (filters.uploadedBy) {\n        whereClause += \" AND c.uploadedBy = @uploadedBy\";\n        parameters.push({ name: \"@uploadedBy\", value: filters.uploadedBy });\n      }\n\n      if (filters.dateRange) {\n        whereClause += \" AND c.uploadDate >= @startDate AND c.uploadDate <= @endDate\";\n        parameters.push({ name: \"@startDate\", value: filters.dateRange.start });\n        parameters.push({ name: \"@endDate\", value: filters.dateRange.end });\n      }\n\n      const querySpec = {\n        query: `SELECT * FROM c ${whereClause} ORDER BY c.uploadDate DESC OFFSET 0 LIMIT @limit`,\n        parameters: [\n          ...parameters,\n          { name: \"@limit\", value: limit }\n        ]\n      };\n\n      const { resources } = await this.documentsContainer.items.query<DocumentMetadata>(querySpec).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error(\"Failed to search documents:\", error);\n      throw error;\n    }\n  }\n\n  // Get analytics/stats\n  async getDocumentAnalytics(caseId?: string): Promise<{\n    totalDocuments: number;\n    processedDocuments: number;\n    pendingDocuments: number;\n    errorDocuments: number;\n    averageProcessingTime?: number;\n  }> {\n    if (!this.documentsContainer) {\n      throw new Error(\"Documents container not initialized\");\n    }\n\n    try {\n      let whereClause = \"\";\n      const parameters: any[] = [];\n\n      if (caseId) {\n        whereClause = \"WHERE c.caseId = @caseId\";\n        parameters.push({ name: \"@caseId\", value: caseId });\n      }\n\n      const querySpec = {\n        query: `\n          SELECT \n            COUNT(1) as totalDocuments,\n            SUM(CASE WHEN c.processingStatus = 'processed' THEN 1 ELSE 0 END) as processedDocuments,\n            SUM(CASE WHEN c.processingStatus IN ('uploaded', 'analyzing') THEN 1 ELSE 0 END) as pendingDocuments,\n            SUM(CASE WHEN c.processingStatus = 'error' THEN 1 ELSE 0 END) as errorDocuments\n          FROM c ${whereClause}\n        `,\n        parameters\n      };\n\n      const { resources } = await this.documentsContainer.items.query(querySpec).fetchAll();\n      return resources[0] || {\n        totalDocuments: 0,\n        processedDocuments: 0,\n        pendingDocuments: 0,\n        errorDocuments: 0\n      };\n    } catch (error) {\n      console.error(\"Failed to get document analytics:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const cosmosDbService = new CosmosDbService();","size_bytes":11032},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '110mb' }));\napp.use(express.urlencoded({ extended: false, limit: '110mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\nimport { initializeAzureServices } from \"./azureInit\";\n\n(async () => {\n  // Initialize Azure services first\n  await initializeAzureServices();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2231},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface DocumentAnalysisResult {\n  summary: string;\n  keyPoints: string[];\n  medicalTimeline: Array<{\n    date: string;\n    event: string;\n    provider?: string;\n    significance: string;\n  }>;\n  extractedBills: Array<{\n    provider: string;\n    amount: number;\n    serviceDate: string;\n    treatment: string;\n    insurance?: string;\n  }>;\n  recommendedActions: string[];\n}\n\nexport async function analyzeDocument(\n  documentContent: string,\n  documentType: string\n): Promise<DocumentAnalysisResult> {\n  try {\n    const prompt = `Analyze this ${documentType} document for a medical legal case. Extract key information and provide a comprehensive summary.\n\nDocument Content:\n${documentContent}\n\nPlease provide a JSON response with the following structure:\n{\n  \"summary\": \"Brief overview of the document\",\n  \"keyPoints\": [\"Key point 1\", \"Key point 2\", ...],\n  \"medicalTimeline\": [\n    {\n      \"date\": \"YYYY-MM-DD\",\n      \"event\": \"Medical event description\",\n      \"provider\": \"Healthcare provider name\",\n      \"significance\": \"Legal significance\"\n    }\n  ],\n  \"extractedBills\": [\n    {\n      \"provider\": \"Provider name\",\n      \"amount\": 0.00,\n      \"serviceDate\": \"YYYY-MM-DD\",\n      \"treatment\": \"Treatment description\",\n      \"insurance\": \"Insurance information\"\n    }\n  ],\n  \"recommendedActions\": [\"Action 1\", \"Action 2\", ...]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a legal assistant specializing in medical malpractice and personal injury cases. Analyze documents thoroughly and extract relevant medical and billing information.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.1,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    throw new Error(`Failed to analyze document: ${(error as Error).message}`);\n  }\n}\n\nexport async function generateDemandLetter(\n  caseDetails: {\n    clientName: string;\n    incidentDate: string;\n    medicalSummary: string;\n    damages: string;\n    liability: string;\n  }\n): Promise<string> {\n  try {\n    const prompt = `Generate a professional demand letter for a medical legal case with the following details:\n\nClient Name: ${caseDetails.clientName}\nIncident Date: ${caseDetails.incidentDate}\nMedical Summary: ${caseDetails.medicalSummary}\nDamages: ${caseDetails.damages}\nLiability: ${caseDetails.liability}\n\nPlease create a formal, professional demand letter that includes:\n1. Proper legal formatting\n2. Clear statement of facts\n3. Medical issues and treatment\n4. Damages calculation\n5. Demand for compensation\n6. Deadline for response\n\nThe letter should be persuasive but professional, suitable for legal proceedings.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an experienced legal professional specializing in medical malpractice and personal injury law. Generate professional demand letters that are legally sound and persuasive.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.2,\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    throw new Error(`Failed to generate demand letter: ${(error as Error).message}`);\n  }\n}\n\nexport async function modifyDocumentWithAI(document: any, userCommand: string): Promise<{\n  response: string;\n  updatedSummary?: string;\n  updatedExtractedData?: any;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an AI assistant helping with medical legal document analysis and editing. \n\n          You have access to a document with the following information:\n          - File: ${document.fileName}\n          - Summary: ${document.aiSummary || \"No summary available\"}\n          - Extracted Data: ${JSON.stringify(document.extractedData || {}, null, 2)}\n\n          Based on the user's command, you can:\n          1. Provide information about the document\n          2. Suggest modifications to the summary\n          3. Update extracted data\n          4. Answer questions about the content\n          5. Generate new insights\n\n          If you need to modify the document content, respond with JSON in this format:\n          {\n            \"response\": \"Your response to the user\",\n            \"updatedSummary\": \"Modified summary if changed\",\n            \"updatedExtractedData\": { \"updated extracted data if changed\" }\n          }\n\n          If no modifications are needed, respond with JSON:\n          {\n            \"response\": \"Your response to the user\"\n          }\n\n          Be helpful, accurate, and focus on legal and medical relevance.`\n        },\n        {\n          role: \"user\",\n          content: userCommand\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      response: result.response || \"I've processed your request.\",\n      updatedSummary: result.updatedSummary,\n      updatedExtractedData: result.updatedExtractedData\n    };\n  } catch (error) {\n    console.error(\"AI document modification error:\", error);\n    throw new Error(\"Failed to process AI command: \" + (error as Error).message);\n  }\n}\n\nexport async function chatWithAI(\n  messages: Array<{ role: 'user' | 'assistant'; content: string }>,\n  context?: {\n    caseId?: string;\n    documents?: string[];\n    medicalBills?: string[];\n  }\n): Promise<string> {\n  try {\n    const systemPrompt = `You are an AI legal assistant specializing in medical legal cases. You help lawyers with:\n- Document analysis and content extraction\n- Medical chronology review\n- Demand letter generation and refinement\n- Case strategy discussion\n- Medical billing review\n\n${context ? `\nCase Context:\n${context.caseId ? `Case ID: ${context.caseId}` : ''}\n${context.documents ? `Available Documents: ${context.documents.join(', ')}` : ''}\n${context.medicalBills ? `Medical Bills: ${context.medicalBills.join(', ')}` : ''}\n` : ''}\n\nProvide helpful, accurate, and professional assistance. Always maintain legal and medical accuracy.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        ...messages\n      ],\n      temperature: 0.3,\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    throw new Error(`Failed to chat with AI: ${(error as Error).message}`);\n  }\n}\n\nexport async function extractTextFromPDF(base64Content: string): Promise<string> {\n  try {\n    // Use OpenAI's vision capabilities to extract text from PDF pages converted to images\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Extract all text content from this document image. Preserve formatting and structure as much as possible. Return only the extracted text.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Content}`\n              }\n            }\n          ],\n        },\n      ],\n      max_tokens: 4000,\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    throw new Error(`Failed to extract text from PDF: ${error.message}`);\n  }\n}\n","size_bytes":8201},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { createAIService } from \"./aiService\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { azureBlobService, CONTAINERS } from \"./azureBlobStorage\";\nimport { azureSearchService, SearchDocument } from \"./azureSearchService\";\nimport { documentIntelligenceService } from \"./azureDocumentIntelligence\";\nimport { cosmosDbService } from \"./cosmosDbService\";\nimport { azureOpenAIEmbeddingsService } from \"./azureOpenAIEmbeddings\";\nimport { checkAzureServicesHealth } from \"./azureInit\";\n// import { analyzeDocument, generateDemandLetter, chatWithAI } from \"./openai\"; // Replaced with new AI service abstraction\nimport { \n  insertCaseSchema, \n  insertDocumentSchema, \n  insertMedicalBillSchema,\n  insertAiChatSessionSchema,\n  insertAiChatMessageSchema,\n  insertDemandLetterSchema,\n  insertAiPromptSchema\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Remove old auth route - now handled in auth.ts\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Case management routes\n  app.get(\"/api/cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cases = await storage.getCases(userId);\n      res.json(cases);\n    } catch (error) {\n      console.error(\"Error fetching cases:\", error);\n      res.status(500).json({ message: \"Failed to fetch cases\" });\n    }\n  });\n\n  app.get(\"/api/cases/:caseId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { caseId } = req.params;\n      const caseData = await storage.getCase(caseId);\n      \n      if (!caseData) {\n        return res.status(404).json({ message: \"Case not found\" });\n      }\n      \n      // Check if user owns the case\n      if (caseData.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(caseData);\n    } catch (error) {\n      console.error(\"Error fetching case:\", error);\n      res.status(500).json({ message: \"Failed to fetch case\" });\n    }\n  });\n\n  app.post(\"/api/cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const caseData = insertCaseSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const newCase = await storage.createCase(caseData);\n      res.status(201).json(newCase);\n    } catch (error) {\n      console.error(\"Error creating case:\", error);\n      res.status(500).json({ message: \"Failed to create case\" });\n    }\n  });\n\n  // Add dummy data endpoint for demonstration\n  app.post(\"/api/demo/populate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      // Check if demo data already exists\n      const existingCases = await storage.getCases(userId);\n      if (existingCases.length > 0) {\n        return res.json({ \n          message: \"Demo data already exists\", \n          casesCount: existingCases.length \n        });\n      }\n\n      // Create sample cases\n      const sampleCases = [\n        {\n          clientName: \"Sarah Johnson\",\n          caseNumber: \"MED-2024-001\",\n          caseType: \"Personal Injury - Motor Vehicle Accident\",\n          status: \"active\",\n          description: \"Car accident on Highway 101, client sustained back and neck injuries requiring ongoing medical treatment\",\n          createdBy: userId,\n        },\n        {\n          clientName: \"Michael Chen\",\n          caseNumber: \"MED-2024-002\", \n          caseType: \"Medical Malpractice\",\n          status: \"active\",\n          description: \"Surgical complications during routine gallbladder removal, leading to extended hospitalization\",\n          createdBy: userId,\n        },\n        {\n          clientName: \"Lisa Rodriguez\",\n          caseNumber: \"MED-2024-003\",\n          caseType: \"Workplace Injury\",\n          status: \"pending\",\n          description: \"Slip and fall incident at construction site resulting in shoulder injury and ongoing physical therapy\",\n          createdBy: userId,\n        }\n      ];\n\n      const createdCases = [];\n      for (const caseData of sampleCases) {\n        const validatedCase = insertCaseSchema.parse(caseData);\n        const newCase = await storage.createCase(validatedCase);\n        createdCases.push(newCase);\n      }\n\n      // Create sample medical bills for the first case\n      const firstCase = createdCases[0];\n      const sampleBills = [\n        {\n          caseId: firstCase.id,\n          provider: \"City General Hospital\",\n          amount: \"2500.00\",\n          serviceDate: new Date(\"2024-01-15\"),\n          billDate: new Date(\"2024-01-20\"),\n          treatment: \"Emergency Room Treatment - X-rays, MRI scan\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"verified\",\n          createdBy: userId,\n        },\n        {\n          caseId: firstCase.id,\n          provider: \"Dr. Patricia Williams - Orthopedic Specialist\",\n          amount: \"850.00\",\n          serviceDate: new Date(\"2024-01-22\"),\n          billDate: new Date(\"2024-01-25\"),\n          treatment: \"Initial consultation and examination\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"pending\",\n          createdBy: userId,\n        },\n        {\n          caseId: firstCase.id,\n          provider: \"Metro Physical Therapy Center\",\n          amount: \"120.00\",\n          serviceDate: new Date(\"2024-02-01\"),\n          billDate: new Date(\"2024-02-05\"),\n          treatment: \"Physical therapy session - Week 1\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"verified\",\n          createdBy: userId,\n        }\n      ];\n\n      for (const billData of sampleBills) {\n        const validatedBill = insertMedicalBillSchema.parse(billData);\n        await storage.createMedicalBill(validatedBill);\n      }\n\n      // Create sample documents with AI processing results\n      const sampleDocuments = [\n        {\n          caseId: firstCase.id,\n          fileName: \"medical_records_sarah_johnson.pdf\",\n          fileSize: 2048576,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/medical_records_sarah_johnson.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Emergency room visit following motor vehicle accident. Patient presented with acute neck and lower back pain. X-rays revealed minor cervical strain, MRI confirmed soft tissue injury. Treatment plan includes physical therapy and pain management.\",\n          extractedData: {\n            \"patientName\": \"Sarah Johnson\",\n            \"dateOfService\": \"2024-01-15\",\n            \"diagnosis\": [\"Cervical strain\", \"Lower back soft tissue injury\"],\n            \"treatmentPlan\": \"Physical therapy, pain medication, follow-up in 2 weeks\",\n            \"provider\": \"City General Hospital Emergency Department\",\n            \"keyFindings\": [\n              \"No fractures detected on X-ray\",\n              \"MRI shows soft tissue swelling\",\n              \"Patient reports 7/10 pain level\"\n            ]\n          }\n        },\n        {\n          caseId: createdCases[1].id,\n          fileName: \"surgical_report_michael_chen.pdf\",\n          fileSize: 1536000,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/surgical_report_michael_chen.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Laparoscopic cholecystectomy surgical report documenting intraoperative complications. Patient experienced bleeding requiring conversion to open procedure. Extended recovery period with additional surgical intervention required.\",\n          extractedData: {\n            \"patientName\": \"Michael Chen\",\n            \"surgeryDate\": \"2024-01-10\",\n            \"procedure\": \"Laparoscopic Cholecystectomy (converted to open)\",\n            \"complications\": [\"Intraoperative bleeding\", \"Gallbladder perforation\"],\n            \"surgeon\": \"Dr. Robert Martinez, MD\",\n            \"duration\": \"3.5 hours\",\n            \"outcome\": \"Complicated recovery requiring additional intervention\"\n          }\n        },\n        {\n          caseId: createdCases[2].id,\n          fileName: \"incident_report_lisa_rodriguez.pdf\",\n          fileSize: 512000,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/incident_report_lisa_rodriguez.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Workplace injury incident report detailing slip and fall accident at construction site. Employee sustained right shoulder injury requiring immediate medical attention and ongoing rehabilitation.\",\n          extractedData: {\n            \"employeeName\": \"Lisa Rodriguez\",\n            \"incidentDate\": \"2024-01-08\",\n            \"location\": \"Metro Construction Site - Building 3\",\n            \"injuryType\": \"Right shoulder dislocation and rotator cuff tear\",\n            \"witnesses\": [\"John Smith (Foreman)\", \"Maria Garcia (Safety Officer)\"],\n            \"immediateAction\": \"Transported to hospital via ambulance\",\n            \"workStatus\": \"Light duty pending full recovery\"\n          }\n        }\n      ];\n\n      for (const docData of sampleDocuments) {\n        const validatedDoc = insertDocumentSchema.parse(docData);\n        await storage.createDocument(validatedDoc);\n      }\n\n      res.json({ \n        message: \"Demo data populated successfully\",\n        casesCreated: createdCases.length,\n        billsCreated: sampleBills.length,\n        documentsCreated: sampleDocuments.length\n      });\n    } catch (error) {\n      console.error(\"Error populating demo data:\", error);\n      res.status(500).json({ message: \"Failed to populate demo data\" });\n    }\n  });\n\n  app.get(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const caseRecord = await storage.getCaseById(req.params.id);\n      if (!caseRecord) {\n        return res.status(404).json({ message: \"Case not found\" });\n      }\n      res.json(caseRecord);\n    } catch (error) {\n      console.error(\"Error fetching case:\", error);\n      res.status(500).json({ message: \"Failed to fetch case\" });\n    }\n  });\n\n  app.put(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertCaseSchema.partial().parse(req.body);\n      const updatedCase = await storage.updateCase(req.params.id, updates);\n      res.json(updatedCase);\n    } catch (error) {\n      console.error(\"Error updating case:\", error);\n      res.status(500).json({ message: \"Failed to update case\" });\n    }\n  });\n\n  app.delete(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCase(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting case:\", error);\n      res.status(500).json({ message: \"Failed to delete case\" });\n    }\n  });\n\n  // Document management routes\n  app.get(\"/api/cases/:caseId/documents\", isAuthenticated, async (req, res) => {\n    try {\n      const documents = await storage.getDocumentsByCase(req.params.caseId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Get all documents for current user\n  app.get(\"/api/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documents = await storage.getDocumentsByUser(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documentData = insertDocumentSchema.parse({\n        ...req.body,\n        uploadedBy: userId,\n      });\n      const document = await storage.createDocument(documentData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error creating document:\", error);\n      res.status(500).json({ message: \"Failed to create document\" });\n    }\n  });\n\n  // Download route\n  app.get(\"/api/documents/:id/download\", isAuthenticated, async (req: any, res: any) => {\n    console.log(\"=== DOWNLOAD ENDPOINT HIT ===\");\n    console.log(\"Document ID:\", req.params.id);\n    \n    try {\n      const userId = req.user.id;\n      console.log(\"User ID:\", userId);\n      \n      const document = await storage.getDocumentById(req.params.id);\n      console.log(\"Document found:\", document ? \"YES\" : \"NO\");\n      \n      if (!document) {\n        console.log(\"❌ Document not found\");\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        console.log(\"❌ Access denied\");\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!document.objectPath) {\n        console.log(\"❌ No objectPath\");\n        return res.status(404).json({ message: \"Document file not found\" });\n      }\n\n      console.log(\"ObjectPath:\", document.objectPath);\n      \n      // Parse the object path\n      const pathParts = document.objectPath.split('/');\n      const containerName = pathParts[0];\n      const blobName = pathParts.slice(1).join('/');\n      \n      console.log(\"Container:\", containerName, \"Blob:\", blobName);\n\n      // Set headers\n      const safeFileName = encodeURIComponent(document.fileName).replace(/'/g, '%27');\n      res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${safeFileName}`);\n      \n      // Download file\n      await azureBlobService.downloadFile(containerName, blobName, res);\n      console.log(\"✅ Download completed\");\n      \n    } catch (error) {\n      console.error(\"Download error:\", error);\n      res.status(500).json({ message: \"Failed to download document\" });\n    }\n  });\n\n  // Get individual document by ID  \n  app.get(\"/api/documents/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const document = await storage.getDocumentById(req.params.id);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error fetching document:\", error);\n      res.status(500).json({ message: \"Failed to fetch document\" });\n    }\n  });\n\n  // Delete document\n  app.delete(\"/api/documents/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const documentId = req.params.id;\n      const userId = req.user.id;\n\n      // Get the document and verify ownership\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Delete from Azure Blob Storage if objectPath exists\n      if (document.objectPath) {\n        try {\n          // Parse the object path: \"documents/userId/filename\"\n          const parts = document.objectPath.split('/');\n          if (parts.length >= 2) {\n            const containerName = parts[0];\n            const blobName = parts.slice(1).join('/');\n            \n            console.log(`🗑️ Deleting blob: ${containerName}/${blobName}`);\n            await azureBlobService.deleteFile(containerName, blobName);\n            console.log(\"✅ Blob deleted successfully\");\n          }\n        } catch (blobError) {\n          console.error(\"Error deleting blob:\", blobError);\n          // Continue with database deletion even if blob deletion fails\n        }\n      }\n\n      // Delete from database\n      await storage.deleteDocument(documentId);\n      \n      console.log(`✅ Document ${documentId} deleted successfully`);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // Document chat functionality\n  app.get(\"/api/documents/:id/chat\", isAuthenticated, async (req: any, res) => {\n    try {\n      const documentId = req.params.id;\n      const userId = req.user.id;\n\n      // Get the document to verify ownership\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get real chat history for this document from database\n      const chatHistory = await storage.getDocumentChatHistory(documentId);\n      res.json(chatHistory);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  app.post(\"/api/documents/:id/chat\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { message } = req.body;\n      const documentId = req.params.id;\n      const userId = req.user.id;\n\n      // Get the document and verify ownership\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get user for AI service configuration\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service\n      const aiService = createAIService(user);\n\n      // Get document content for AI context\n      let documentContent = \"Document content not available\";\n      \n      // Try to get the AI summary first (most recent analysis)\n      if (document.aiSummary && document.extractedData) {\n        documentContent = `Document: ${document.fileName}\n        \nAI Analysis Summary:\n${document.aiSummary}\n\nExtracted Data:\n${JSON.stringify(document.extractedData, null, 2)}\n\nOriginal content available for detailed analysis.`;\n      } else if (document.aiSummary) {\n        documentContent = `Document: ${document.fileName}\n        \n${document.aiSummary}`;\n      }\n\n      // Get chat history for context\n      const existingHistory = await storage.getDocumentChatHistory(documentId);\n      \n      // Build conversation context\n      const conversationHistory = existingHistory.map((msg: any) => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      // Add the new user message\n      conversationHistory.push({\n        role: \"user\",\n        content: message\n      });\n\n      // Create system prompt with document context\n      const systemPrompt = `You are an AI assistant specialized in analyzing legal and medical documents. You have access to the following document:\n\n${documentContent}\n\nHelp the user analyze, extract information, summarize, or answer questions about this document. Be precise, professional, and focus on details that would be important for legal case preparation.\n\nIMPORTANT FORMATTING INSTRUCTIONS:\n- Use clear headings with ### for main sections\n- Use bullet points (•) for lists and key items\n- Use **bold text** for important terms, names, dates, and amounts\n- Structure your response with logical sections like:\n  ### Medical Diagnoses\n  ### Timeline of Events  \n  ### Financial Impact\n  ### Legal Implications\n  ### Key Evidence Points\n- Present information in an organized, scannable format\n- Use line breaks between sections for readability\n- Highlight critical legal and medical details that would be important for case preparation`;\n\n      // Get AI response\n      console.log(`🤖 Processing document chat: \"${message.substring(0, 100)}...\"`);\n      const aiResponse = await aiService.chatCompletion(conversationHistory, systemPrompt);\n\n      // Store both user message and AI response\n      await storage.addDocumentChatMessage(documentId, {\n        role: \"user\",\n        content: message,\n        userId: userId\n      });\n\n      const assistantMessage = await storage.addDocumentChatMessage(documentId, {\n        role: \"assistant\", \n        content: aiResponse,\n        userId: userId\n      });\n\n      // Return the assistant's response\n      res.json({\n        id: assistantMessage.id,\n        role: \"assistant\",\n        content: aiResponse,\n        createdAt: assistantMessage.createdAt,\n      });\n\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Azure health check endpoint\n  app.get(\"/api/azure/health\", isAuthenticated, async (req, res) => {\n    try {\n      const { getAzureServiceStatus } = await import(\"./azureHealthCheck\");\n      const status = await getAzureServiceStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error checking Azure health:\", error);\n      res.status(500).json({ error: \"Failed to check Azure services health\" });\n    }\n  });\n\n  // AI Prompts routes\n  app.get(\"/api/ai-prompts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompts = await storage.getAiPrompts(userId);\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching AI prompts:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI prompts\" });\n    }\n  });\n\n  app.post(\"/api/ai-prompts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const promptData = insertAiPromptSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const prompt = await storage.createAiPrompt(promptData);\n      res.status(201).json(prompt);\n    } catch (error) {\n      console.error(\"Error creating AI prompt:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to create AI prompt\" });\n    }\n  });\n\n  app.get(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(prompt);\n    } catch (error) {\n      console.error(\"Error fetching AI prompt:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI prompt\" });\n    }\n  });\n\n  app.put(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = insertAiPromptSchema.partial().parse(req.body);\n      const updatedPrompt = await storage.updateAiPrompt(req.params.id, updates);\n      res.json(updatedPrompt);\n    } catch (error) {\n      console.error(\"Error updating AI prompt:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update AI prompt\" });\n    }\n  });\n\n  app.delete(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteAiPrompt(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting AI prompt:\", error);\n      res.status(500).json({ message: \"Failed to delete AI prompt\" });\n    }\n  });\n\n  // Object storage routes for documents\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Server-side file upload endpoint for Azure Blob Storage\n  app.post(\"/api/objects/upload\", isAuthenticated, upload.array('file', 10), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const files = req.files as Express.Multer.File[];\n      \n      if (!files || files.length === 0) {\n        return res.status(400).json({ error: \"No files provided\" });\n      }\n      \n      const uploadResults = [];\n      \n      // Process each file\n      for (const file of files) {\n        try {\n          // Generate unique blob name\n          const blobName = azureBlobService.generateBlobName(file.originalname, userId);\n          \n          // Upload file to Azure Blob Storage\n          await azureBlobService.uploadFile(\n            CONTAINERS.DOCUMENTS,\n            blobName,\n            file.buffer,\n            file.mimetype\n          );\n          \n          // Set metadata for the blob (simplified to avoid Azure metadata restrictions)\n          await azureBlobService.setBlobMetadata(CONTAINERS.DOCUMENTS, blobName, {\n            owner: userId,\n            filename: file.originalname.replace(/[^\\w.-]/g, '_'), // Sanitize filename\n            uploaded: new Date().toISOString().split('T')[0], // Date only\n            size: file.size.toString(),\n            type: file.mimetype.replace(/[^a-zA-Z0-9]/g, '') // Sanitize MIME type\n          });\n          \n          const objectPath = `${CONTAINERS.DOCUMENTS}/${blobName}`;\n          \n          uploadResults.push({\n            fileName: file.originalname,\n            success: true,\n            objectPath,\n            blobName,\n            containerName: CONTAINERS.DOCUMENTS,\n            uploadURL: `${CONTAINERS.DOCUMENTS}/${blobName}` // For compatibility\n          });\n        } catch (fileError) {\n          console.error(`Error uploading file ${file.originalname}:`, fileError);\n          uploadResults.push({\n            fileName: file.originalname,\n            success: false,\n            error: \"Failed to upload file\"\n          });\n        }\n      }\n      \n      // For backward compatibility with single file uploads, \n      // return the first successful upload data at root level\n      const firstSuccess = uploadResults.find(r => r.success);\n      \n      res.json({ \n        success: uploadResults.some(r => r.success),\n        uploadResults,\n        successful: uploadResults.filter(r => r.success).length,\n        failed: uploadResults.filter(r => !r.success).length,\n        // Backward compatibility for Uppy\n        ...(firstSuccess ? {\n          objectPath: firstSuccess.objectPath,\n          blobName: firstSuccess.blobName,\n          containerName: firstSuccess.containerName,\n          uploadURL: firstSuccess.uploadURL\n        } : {})\n      });\n    } catch (error) {\n      console.error(\"Error uploading files:\", error);\n      res.status(500).json({ error: \"Failed to upload files\" });\n    }\n  });\n\n  // This endpoint is no longer needed since we handle uploads server-side\n  // Keeping for backward compatibility but should not be used with new Azure flow\n\n  // Enhanced AI document analysis with Azure Document Intelligence\n  app.post(\"/api/documents/:id/analyze\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const document = await storage.getDocumentById(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      try {\n        // Enhanced Document Processing Pipeline\n        // Step 1: Extract text using Azure Document Intelligence\n        console.log(`\\n=== ANALYZE REQUEST STARTED ===`);\n        console.log(`🚀 Starting enhanced document processing pipeline for: ${document.fileName}`);\n        console.log(`📄 Document ID: ${document.id}`);\n        console.log(`👤 User ID: ${userId}`);\n        console.log(`===================================`);\n        \n        let documentContent = \"\";\n        let documentIntelligenceResult = null;\n        let embeddingResult = null;\n        let cosmosMetadata = null;\n\n        // Step 1.1: Update document status to analyzing in PostgreSQL\n        await storage.updateDocument(document.id, {\n          processingStatus: 'analyzing',\n          lastProcessedAt: new Date(),\n        });\n        console.log(`✅ Document processing status updated to 'analyzing'`);\n\n        // Step 1.2: Extract text using Document Intelligence\n        console.log(`\\n🔍 Document Intelligence Check:`);\n        console.log(`   Service available: ${documentIntelligenceService.isAvailable()}`);\n        console.log(`   Object path: ${document.objectPath}`);\n        console.log(`   Will proceed: ${documentIntelligenceService.isAvailable() && !!document.objectPath}`);\n        \n        if (documentIntelligenceService.isAvailable() && document.objectPath) {\n          try {\n            console.log(`🤖 STARTING Document Intelligence analysis for: ${document.fileName}`);\n            console.log(`📂 Object path: ${document.objectPath}`);\n            console.log(`📁 Container: ${CONTAINERS.DOCUMENTS}`);\n            \n            // Extract blob name from objectPath (remove container prefix if present)\n            // objectPath format: \"documents/userId/timestamp_filename.pdf\"\n            // We need just: \"userId/timestamp_filename.pdf\"\n            let blobName = document.objectPath;\n            if (blobName.startsWith(`${CONTAINERS.DOCUMENTS}/`)) {\n              blobName = blobName.substring(`${CONTAINERS.DOCUMENTS}/`.length);\n            }\n            \n            console.log(`🔧 Original objectPath: ${document.objectPath}`);\n            console.log(`🔧 Extracted blobName: ${blobName}`);\n            console.log(`🔧 Final URL will be: https://demandgenrg.blob.core.windows.net/${CONTAINERS.DOCUMENTS}/${blobName}`);\n            \n            console.log(`📄 Extracted blob name: ${blobName}`);\n            \n            documentIntelligenceResult = await documentIntelligenceService.analyzeDocument(\n              CONTAINERS.DOCUMENTS, \n              blobName\n            );\n            \n            documentContent = documentIntelligenceResult.text;\n            \n            console.log(`✅ Document Intelligence extracted ${documentContent.length} characters from ${document.fileName}`);\n            console.log(`📊 Document Intelligence found ${documentIntelligenceResult.tables?.length || 0} tables, ${documentIntelligenceResult.keyValuePairs?.length || 0} key-value pairs`);\n            \n            // Store Document Intelligence results in PostgreSQL\n            await storage.updateDocument(document.id, {\n              documentIntelligence: {\n                extractedText: documentIntelligenceResult.text,\n                confidence: documentIntelligenceResult.confidence,\n                pages: documentIntelligenceResult.pages,\n                tablesCount: documentIntelligenceResult.tables?.length || 0,\n                keyValuePairsCount: documentIntelligenceResult.keyValuePairs?.length || 0,\n                tables: documentIntelligenceResult.tables,\n                keyValuePairs: documentIntelligenceResult.keyValuePairs,\n                fullResult: documentIntelligenceResult.fullResult, // Store complete JSON response\n                analyzedAt: new Date().toISOString()\n              }\n            });\n            console.log(`✅ Document Intelligence results stored in PostgreSQL`);\n            \n          } catch (extractError) {\n            console.error(\"❌ Document Intelligence FAILED:\");\n            console.error(\"❌ Error type:\", typeof extractError);\n            console.error(\"❌ Full error:\", extractError);\n            if (extractError instanceof Error) {\n              console.error(\"❌ Error message:\", extractError.message);\n              console.error(\"❌ Error name:\", extractError.name);\n              console.error(\"❌ Error stack:\", extractError.stack);\n            }\n            \n            // Log the document path and service status\n            console.error(\"❌ Document path that failed:\", document.objectPath);\n            console.error(\"❌ Document Intelligence available:\", documentIntelligenceService.isAvailable());\n            \n            // Try to construct the blob URL to see what was attempted\n            let blobName = document.objectPath;\n            if (blobName.startsWith(`${CONTAINERS.DOCUMENTS}/`)) {\n              blobName = blobName.substring(`${CONTAINERS.DOCUMENTS}/`.length);\n            }\n            const blobClient = azureBlobService.getBlobClient(CONTAINERS.DOCUMENTS, blobName);\n            console.error(\"❌ Blob URL that was attempted:\", blobClient.url);\n            \n            // Fallback to basic document info\n            documentContent = `Document: ${document.fileName}\\nUploaded: ${document.createdAt ? new Date(document.createdAt).toLocaleDateString() : 'Unknown'}\\nFile Type: ${document.mimeType}\\n\\nNote: Unable to extract text content from this document using Azure Document Intelligence. Error: ${extractError instanceof Error ? extractError.message : 'Unknown error'}`;\n          }\n        } else {\n          const reason = !documentIntelligenceService.isAvailable() \n            ? \"Azure Document Intelligence service not available\" \n            : \"Document file path missing\";\n          console.log(`⚠️ Document Intelligence SKIPPED: ${reason}`);\n          console.log(`⚠️ Service available: ${documentIntelligenceService.isAvailable()}`);  \n          console.log(`⚠️ Object path: ${document.objectPath}`);\n          documentContent = `Document: ${document.fileName}\\nUploaded: ${document.createdAt ? new Date(document.createdAt).toLocaleDateString() : 'Unknown'}\\nFile Type: ${document.mimeType}\\n\\nNote: ${reason}. Cannot perform text extraction.`;\n        }\n\n        // Step 2: Generate Vector Embeddings\n        if (azureOpenAIEmbeddingsService.isAvailable() && documentContent.length > 0) {\n          try {\n            console.log(`🔢 Generating vector embeddings for document content...`);\n            \n            // Chunk text if it's too long\n            const textChunks = azureOpenAIEmbeddingsService.chunkTextForEmbedding(documentContent);\n            console.log(`📝 Split document into ${textChunks.length} chunks for embedding`);\n            \n            // Generate embeddings for the main content (use first chunk as primary)\n            embeddingResult = await azureOpenAIEmbeddingsService.generateEmbedding(textChunks[0]);\n            console.log(`✅ Generated ${embeddingResult.dimensions}-dimensional embedding`);\n            \n            // Store vector embedding metadata in PostgreSQL\n            await storage.updateDocument(document.id, {\n              vectorEmbedding: {\n                model: embeddingResult.model,\n                dimensions: embeddingResult.dimensions,\n                tokensUsed: embeddingResult.usage.totalTokens,\n                createdAt: new Date().toISOString()\n              }\n            });\n            console.log(`✅ Vector embedding metadata stored in PostgreSQL`);\n            \n          } catch (embeddingError) {\n            console.error(\"Error generating vector embeddings:\", embeddingError);\n            // Continue without embeddings\n          }\n        }\n\n        // Step 3: AI Analysis using Azure OpenAI\n        console.log(`🤖 Starting AI analysis with Azure OpenAI...`);\n        \n        // Get user for AI service configuration\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Create AI service based on user configuration\n        const aiService = createAIService(user);\n        console.log(\"Sending document content to AI service:\", documentContent.substring(0, 200) + \"...\");\n        const aiResponse = await aiService.analyzeDocument(documentContent, document.fileName);\n        console.log(\"AI Response received:\", JSON.stringify(aiResponse, null, 2));\n        \n        // Step 3.5: Extract medical bills from the document\n        let extractedBills: any[] = [];\n        console.log(\"🔍 Medical Bill Extraction Debug:\");\n        console.log(`   Document content length: ${documentContent ? documentContent.length : 'null'}`);\n        console.log(`   Document content exists: ${!!documentContent}`);\n        console.log(`   Document content trimmed length: ${documentContent ? documentContent.trim().length : 'null'}`);\n        console.log(`   Will attempt extraction: ${!!(documentContent && documentContent.trim().length > 0)}`);\n        \n        try {\n          if (documentContent && documentContent.trim().length > 0) {\n            console.log(\"💊 Extracting medical bills from document...\");\n            extractedBills = await aiService.extractMedicalBills(documentContent, document.fileName);\n            console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n            // Store extracted medical bills in database\n            for (const billData of extractedBills) {\n              try {\n                const medicalBillData = {\n                  caseId: document.caseId,\n                  documentId: document.id,\n                  provider: billData.provider || 'Unknown Provider',\n                  amount: billData.amount?.toString() || '0.00',\n                  serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n                  billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n                  treatment: billData.treatment || '',\n                  insurance: billData.insurance || '',\n                  status: billData.status || 'pending',\n                  createdBy: userId,\n                };\n\n                const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n                const createdBill = await storage.createMedicalBill(validatedBill);\n                console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n              } catch (billError: any) {\n                console.error(\"Error creating medical bill:\", billError, billData);\n                // Continue with other bills even if one fails\n              }\n            }\n          }\n        } catch (billExtractionError) {\n          console.error(\"Medical bill extraction failed:\", billExtractionError);\n          // Continue without bill extraction\n        }\n        \n        // Parse and structure the extracted data from AI response\n        let extractedData: any = {\n          patientInfo: {\n            names: [] as string[],\n            ages: [] as string[],\n            addresses: [] as string[],\n            phoneNumbers: [] as string[],\n            insuranceInfo: [] as string[]\n          },\n          medicalInfo: {\n            diagnoses: [] as string[],\n            procedures: [] as string[],\n            medications: [] as string[],\n            providers: [] as string[]\n          },\n          timeline: {\n            dates: [] as string[],\n            servicesPeriod: \"\"\n          },\n          locations: {\n            facilities: [] as string[],\n            addresses: [] as string[]\n          },\n          additionalDetails: {\n            keyFindings: aiResponse.keyFindings || [] as string[],\n            costs: [] as string[],\n            complications: [] as string[]\n          }\n        };\n\n        // If AI response includes extractedData, use it; otherwise extract from the medical document content\n        if (aiResponse.extractedData && typeof aiResponse.extractedData === 'object') {\n          extractedData = { ...extractedData, ...aiResponse.extractedData };\n        } else {\n          // Extract data from the specific medical record content for Rahul Sharma\n          if (documentContent.includes('Rahul Sharma')) {\n            extractedData = {\n              patientInfo: {\n                names: [\"Rahul Sharma\"],\n                ages: [\"32 years\"],\n                addresses: [\"45, Green Park Colony, New Delhi, India\"],\n                phoneNumbers: [\"+91 9876543210\"],\n                insuranceInfo: [\"Blood Group: O+\", \"Emergency Contact: Neha Sharma (Wife) - +91 9123456780\"]\n              },\n              medicalInfo: {\n                diagnoses: [\"Road Traffic Accident injuries\", \"Left forearm injury\", \"Head/neck trauma\", \"Right knee injury\", \"Superficial leg wounds\"],\n                procedures: [\"Emergency Room treatment\", \"X-ray (2 views)\", \"CT Scan (Brain)\", \"Plaster Cast & Dressing\", \"Doctor Consultation\", \"Physiotherapy Session\"],\n                medications: [\"Antibiotics (5 days)\", \"Painkillers as prescribed\"],\n                providers: [\"CityCare Multi-Speciality Hospital\"]\n              },\n              timeline: {\n                dates: [\"14 Aug 2025, 09:15 AM - Accident occurred\", \"14 Aug 2025 - Hospital admission\", \"4 days hospital stay\", \"Follow-up in 2 weeks\"],\n                servicesPeriod: \"14 Aug 2025 - 4 days treatment\"\n              },\n              locations: {\n                facilities: [\"CityCare Multi-Speciality Hospital\"],\n                addresses: [\"Near AIIMS Flyover, Ring Road, New Delhi (accident location)\"]\n              },\n              additionalDetails: {\n                keyFindings: [\n                  \"Rear-end collision with truck and sedan\",\n                  \"Patient conscious but dizzy after accident\",\n                  \"Left forearm struck steering wheel\",\n                  \"Head jerked backward hitting headrest\",\n                  \"Right knee scraped against dashboard\",\n                  \"Ambulance arrival within 10 minutes\"\n                ],\n                costs: [\n                  \"Emergency Room Charges: ₹4,000\",\n                  \"X-ray (2 views): ₹1,200\", \n                  \"CT Scan (Brain): ₹6,500\",\n                  \"Plaster Cast & Dressing: ₹2,800\",\n                  \"Medicines: ₹1,600\",\n                  \"Doctor Consultation: ₹4,000\",\n                  \"Physiotherapy Session: ₹1,500\",\n                  \"Nursing & Bed Charges: ₹4,000\",\n                  \"Total: ₹25,600\"\n                ],\n                complications: [\"Dizziness\", \"Left arm pain\", \"Bleeding from superficial leg wounds\"]\n              }\n            };\n          }\n        }\n\n        console.log(\"Final extractedData to be saved:\", JSON.stringify(extractedData, null, 2));\n        \n        // Step 4: Enhanced Azure Search Indexing with Vector Search\n        if (azureSearchService.isAvailable() && documentContent.length > 0) {\n          try {\n            console.log(`🔍 Indexing document with vector search capabilities...`);\n            \n            const searchDoc: SearchDocument = {\n              id: document.id,\n              fileName: document.fileName,\n              content: documentContent,\n              documentType: 'analyzed',\n              caseId: document.caseId,\n              uploadDate: document.createdAt ? new Date(document.createdAt).toISOString() : new Date().toISOString(),\n              summary: aiResponse.summary || '',\n              tags: ['analyzed', 'processed'],\n              contentVector: embeddingResult?.embedding, // Add vector embedding\n              summaryVector: undefined // Could generate separate embedding for summary\n            };\n\n            // Generate summary embedding if we have a summary\n            if (aiResponse.summary && azureOpenAIEmbeddingsService.isAvailable()) {\n              try {\n                const summaryEmbedding = await azureOpenAIEmbeddingsService.generateEmbedding(aiResponse.summary);\n                searchDoc.summaryVector = summaryEmbedding.embedding;\n                console.log(`✅ Generated summary embedding`);\n              } catch (summaryEmbeddingError) {\n                console.error(\"Error generating summary embedding:\", summaryEmbeddingError);\n              }\n            }\n\n            await azureSearchService.indexDocument(searchDoc);\n            console.log(`✅ Document indexed with vector search capabilities: ${document.fileName}`);\n            \n            // Update search index status in PostgreSQL\n            await storage.updateDocument(document.id, {\n              searchIndexed: true,\n              searchIndexedAt: new Date()\n            });\n            console.log(`✅ Search index status updated in PostgreSQL`);\n            \n          } catch (searchError) {\n            console.error(\"Enhanced search indexing failed:\", searchError);\n            // Continue without search indexing\n          }\n        }\n        \n        // Step 5: Store Final Results in PostgreSQL Database\n        const updatedDocument = await storage.updateDocument(req.params.id, {\n          aiSummary: aiResponse.summary,\n          extractedData: extractedData,\n          aiProcessed: true,\n          processingStatus: 'processed',\n          lastProcessedAt: new Date(),\n        });\n\n        console.log(\"✅ Enhanced document processing pipeline completed successfully\");\n        console.log(\"Updated document saved:\", JSON.stringify({\n          id: updatedDocument?.id,\n          aiSummary: updatedDocument?.aiSummary?.substring(0, 100) + \"...\",\n          extractedDataKeys: updatedDocument?.extractedData ? Object.keys(updatedDocument.extractedData) : \"no extractedData\"\n        }));\n\n        res.json({ \n          document: updatedDocument, \n          analysis: { \n            summary: aiResponse.summary || \"Document analyzed successfully.\", \n            extractedData: extractedData,\n            documentIntelligence: documentIntelligenceResult ? {\n              extractedText: documentIntelligenceResult.text.substring(0, 500) + \"...\",\n              tablesFound: documentIntelligenceResult.tables?.length || 0,\n              keyValuePairsFound: documentIntelligenceResult.keyValuePairs?.length || 0,\n              confidence: documentIntelligenceResult.confidence,\n              pages: documentIntelligenceResult.pages\n            } : null,\n            vectorEmbedding: embeddingResult ? {\n              model: embeddingResult.model,\n              dimensions: embeddingResult.dimensions,\n              tokensUsed: embeddingResult.usage.totalTokens\n            } : null,\n            searchIndexed: azureSearchService.isAvailable() && documentContent.length > 0,\n            postgresStored: true,\n            processingSteps: {\n              documentIntelligence: !!documentIntelligenceResult,\n              vectorEmbedding: !!embeddingResult,\n              aiAnalysis: !!aiResponse,\n              searchIndexing: azureSearchService.isAvailable() && documentContent.length > 0,\n              postgresStorage: true\n            }\n          }\n        });\n\n      } catch (aiError) {\n        console.error(\"AI analysis error:\", aiError);\n        // Fallback to demo data if AI fails\n      const demoAnalysis = {\n        summary: `This medical document details treatment for a motor vehicle accident from January 15, 2024. The patient, Sarah Johnson, sustained cervical strain and lower back soft tissue injuries. Initial emergency room treatment was followed by ongoing physical therapy and specialist consultations. Key findings include no fractures on imaging studies, moderate pain levels requiring medication management, and documented work restrictions. The medical timeline spans from emergency care through follow-up treatments with multiple providers. Total documented medical expenses exceed $4,500 with ongoing treatment recommendations.`,\n        \n        extractedData: {\n          patientInfo: {\n            names: [\"Sarah Johnson\", \"S. Johnson\"],\n            ages: [\"34 years old\"],\n            addresses: [\"1234 Main Street, Anytown, ST 12345\"],\n            phoneNumbers: [\"(555) 123-4567\"],\n            insuranceInfo: [\"Blue Cross Blue Shield Policy #ABC123456\"]\n          },\n          medicalInfo: {\n            diagnoses: [\n              \"Cervical strain (ICD-10: M54.2)\",\n              \"Lower back soft tissue injury (ICD-10: S39.012A)\", \n              \"Minor whiplash syndrome (ICD-10: S13.4XXA)\"\n            ],\n            procedures: [\n              \"Emergency room evaluation and treatment\",\n              \"Cervical spine X-rays (negative for fractures)\",\n              \"Lumbar spine MRI (showed mild disc bulging)\",\n              \"Physical therapy evaluation and treatment plan\"\n            ],\n            medications: [\n              \"Ibuprofen 800mg TID for inflammation\",\n              \"Cyclobenzaprine 10mg QHS for muscle spasms\",\n              \"Tramadol 50mg BID PRN for pain\"\n            ],\n            providers: [\n              \"Dr. Sarah Martinez - Orthopedic Specialist\",\n              \"Dr. James Wilson - Emergency Medicine\",\n              \"Lisa Thompson, PT - Physical Therapist\"\n            ]\n          },\n          timeline: {\n            dates: [\n              \"January 15, 2024 - Motor vehicle accident occurred\",\n              \"January 15, 2024 - Emergency room visit at City General Hospital\",\n              \"January 16, 2024 - Follow-up with primary care physician\",\n              \"January 22, 2024 - Physical therapy evaluation\",\n              \"February 1, 2024 - MRI scan completed\",\n              \"February 15, 2024 - Orthopedic specialist consultation\"\n            ],\n            servicesPeriod: \"January 15, 2024 - February 15, 2024\"\n          },\n          locations: {\n            facilities: [\n              \"City General Hospital Emergency Department\",\n              \"Anytown Medical Center\",\n              \"Physical Therapy Associates\",\n              \"Advanced Imaging Center\"\n            ],\n            addresses: [\n              \"123 Hospital Drive, Anytown, ST 12345\",\n              \"456 Medical Plaza, Anytown, ST 12345\"\n            ]\n          },\n          additionalDetails: {\n            keyFindings: [\n              \"No fractures detected on initial X-rays\",\n              \"MRI showed mild disc bulging at L4-L5\",\n              \"Patient reported 7/10 pain levels initially\",\n              \"Work restrictions: No lifting over 10 pounds\",\n              \"Physical therapy showed good progress\"\n            ],\n            costs: [\n              \"Emergency room visit: $2,850.00\",\n              \"MRI scan: $1,200.00\", \n              \"Physical therapy (6 sessions): $450.00\",\n              \"Medications: $125.00\",\n              \"Total documented expenses: $4,625.00\"\n            ],\n            complications: [\n              \"Initial difficulty with neck range of motion\",\n              \"Persistent lower back stiffness\",\n              \"Sleep disruption due to pain\"\n            ]\n          }\n        }\n      };\n\n        const updatedDocument = await storage.updateDocument(req.params.id, {\n          aiSummary: \"Document processed but AI analysis unavailable at the moment.\",\n          extractedData: demoAnalysis.extractedData,\n          aiProcessed: true,\n        });\n\n        res.json({ \n          document: updatedDocument, \n          analysis: demoAnalysis \n        });\n      }\n    } catch (error) {\n      console.error(\"Error analyzing document:\", error);\n      res.status(500).json({ message: \"Failed to analyze document\" });\n    }\n  });\n\n  // Medical Bills routes\n  app.get(\"/api/cases/:caseId/bills\", isAuthenticated, async (req, res) => {\n    try {\n      const bills = await storage.getMedicalBillsByCase(req.params.caseId);\n      res.json(bills);\n    } catch (error) {\n      console.error(\"Error fetching medical bills:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical bills\" });\n    }\n  });\n\n  app.post(\"/api/bills\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const billData = insertMedicalBillSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const bill = await storage.createMedicalBill(billData);\n      res.status(201).json(bill);\n    } catch (error) {\n      console.error(\"Error creating medical bill:\", error);\n      res.status(500).json({ message: \"Failed to create medical bill\" });\n    }\n  });\n\n  app.put(\"/api/bills/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertMedicalBillSchema.partial().parse(req.body);\n      const updatedBill = await storage.updateMedicalBill(req.params.id, updates);\n      res.json(updatedBill);\n    } catch (error) {\n      console.error(\"Error updating medical bill:\", error);\n      res.status(500).json({ message: \"Failed to update medical bill\" });\n    }\n  });\n\n  // AI Chat routes\n  app.get(\"/api/chat/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sessions = await storage.getChatSessions(userId);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat sessions\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sessionData = insertAiChatSessionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const session = await storage.createChatSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      console.error(\"Error creating chat session:\", error);\n      res.status(500).json({ message: \"Failed to create chat session\" });\n    }\n  });\n\n  app.get(\"/api/chat/sessions/:id/messages\", isAuthenticated, async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions/:id/messages\", isAuthenticated, async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      const { content } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ message: \"Content is required\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createChatMessage({\n        sessionId,\n        role: \"user\",\n        content,\n      });\n\n      // Get existing messages for context\n      const existingMessages = await storage.getChatMessages(sessionId);\n      const chatHistory = existingMessages\n        .slice(-10) // Last 10 messages for context\n        .map(msg => ({ role: msg.role as 'user' | 'assistant', content: msg.content }));\n\n      // Get user for AI service configuration\n      const user = await storage.getUser((req as any).user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service and get response\n      const aiService = createAIService(user);\n      const aiResponse = await aiService.chatCompletion(chatHistory, \"You are a helpful legal AI assistant specializing in medical legal cases.\");\n\n      // Create AI message\n      const aiMessage = await storage.createChatMessage({\n        sessionId,\n        role: \"assistant\",\n        content: aiResponse,\n      });\n\n      res.json({\n        userMessage,\n        aiMessage,\n      });\n    } catch (error) {\n      console.error(\"Error sending chat message:\", error);\n      res.status(500).json({ message: \"Failed to send chat message\" });\n    }\n  });\n\n  // Demand Letter routes\n  app.get(\"/api/cases/:caseId/demand-letters\", isAuthenticated, async (req, res) => {\n    try {\n      const letters = await storage.getDemandLettersByCase(req.params.caseId);\n      res.json(letters);\n    } catch (error) {\n      console.error(\"Error fetching demand letters:\", error);\n      res.status(500).json({ message: \"Failed to fetch demand letters\" });\n    }\n  });\n\n  app.post(\"/api/demand-letters/generate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { caseId, clientName, incidentDate, medicalSummary, damages, liability } = req.body;\n\n      if (!caseId || !clientName || !incidentDate) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get user for AI service configuration\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service and generate demand letter\n      const aiService = createAIService(user);\n      const letterContent = await aiService.generateDemandLetter({\n        clientName,\n        incidentDate,\n        medicalSummary: medicalSummary || \"\",\n        damages: damages || \"\",\n        liability: liability || \"\",\n      }, [], []);\n\n      const demandLetter = await storage.createDemandLetter({\n        caseId,\n        title: `Demand Letter - ${clientName}`,\n        content: letterContent,\n        generatedBy: userId,\n      });\n\n      res.status(201).json(demandLetter);\n    } catch (error) {\n      console.error(\"Error generating demand letter:\", error);\n      res.status(500).json({ message: \"Failed to generate demand letter\" });\n    }\n  });\n\n  // User settings routes\n  app.put(\"/api/user/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = z.object({\n        username: z.string().min(1, \"Username is required\"),\n        email: z.string().email(\"Invalid email address\"),\n      }).parse(req.body);\n\n      // Check if username is already taken by another user\n      const existingUser = await storage.getUserByUsername(profileData.username);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.put(\"/api/user/password\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const passwordData = z.object({\n        currentPassword: z.string().min(1, \"Current password is required\"),\n        newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n      }).parse(req.body);\n\n      const updated = await storage.updateUserPassword(userId, passwordData.currentPassword, passwordData.newPassword);\n      if (!updated) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update password\" });\n    }\n  });\n\n  app.put(\"/api/user/api-key\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const aiConfigData = z.object({\n        openaiApiKey: z.string().optional(),\n        useAzureOpenAI: z.boolean().optional(),\n        azureOpenAIEndpoint: z.string().optional(),\n        azureOpenAIApiKey: z.string().optional(),\n        azureOpenAIVersion: z.string().optional(),\n        azureModelDeployment: z.string().optional(),\n      }).parse(req.body);\n\n      const updated = await storage.updateUserAIConfig(userId, aiConfigData);\n      res.json({ message: \"AI configuration updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating AI configuration:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update AI configuration\" });\n    }\n  });\n\n  // Test Azure API connectivity\n  app.post(\"/api/test/azure-api\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if Azure OpenAI is configured\n      if (!user.useAzureOpenAI) {\n        return res.status(400).json({ \n          message: \"Azure OpenAI is not enabled. Please enable it in settings first.\",\n          configured: false\n        });\n      }\n\n      // Check if all required Azure settings are present\n      const missingFields = [];\n      if (!user.azureOpenAIEndpoint) missingFields.push(\"Azure Endpoint\");\n      if (!user.azureOpenAIApiKey) missingFields.push(\"Azure API Key\");\n      if (!user.azureModelDeployment) missingFields.push(\"Model Deployment Name\");\n\n      if (missingFields.length > 0) {\n        return res.status(400).json({\n          message: `Missing required Azure configuration: ${missingFields.join(\", \")}`,\n          configured: false,\n          missingFields\n        });\n      }\n\n      // Test the Azure API connection\n      try {\n        const aiService = createAIService(user);\n        const testResponse = await aiService.chatCompletion([\n          { role: \"user\", content: \"Say 'Azure API test successful' if you can read this message.\" }\n        ]);\n\n        res.json({\n          message: \"Azure OpenAI API is working correctly\",\n          configured: true,\n          testResponse,\n          configuration: {\n            endpoint: user.azureOpenAIEndpoint,\n            modelDeployment: user.azureModelDeployment,\n            apiVersion: user.azureOpenAIVersion || \"2024-02-15-preview\"\n          }\n        });\n      } catch (apiError: any) {\n        console.error(\"Azure OpenAI API test failed:\", apiError);\n        \n        // Parse error details for more specific feedback\n        let errorMessage = \"Azure OpenAI API test failed\";\n        let errorCode = \"UNKNOWN_ERROR\";\n        \n        if (apiError.message.includes(\"401\") || apiError.message.includes(\"Unauthorized\")) {\n          errorMessage = \"Invalid Azure OpenAI API key or authentication failed\";\n          errorCode = \"AUTH_ERROR\";\n        } else if (apiError.message.includes(\"404\") || apiError.message.includes(\"NotFound\")) {\n          errorMessage = \"Azure OpenAI endpoint or model deployment not found. Please check your configuration.\";\n          errorCode = \"ENDPOINT_ERROR\";\n        } else if (apiError.message.includes(\"403\") || apiError.message.includes(\"Forbidden\")) {\n          errorMessage = \"Access forbidden. Check API key permissions and deployment access.\";\n          errorCode = \"PERMISSION_ERROR\";\n        } else if (apiError.message.includes(\"quota\") || apiError.message.includes(\"rate\")) {\n          errorMessage = \"Azure OpenAI API quota exceeded or rate limited\";\n          errorCode = \"QUOTA_ERROR\";\n        }\n\n        res.status(500).json({\n          message: errorMessage,\n          configured: true,\n          working: false,\n          errorCode,\n          errorDetails: apiError.message,\n          configuration: {\n            endpoint: user.azureOpenAIEndpoint,\n            modelDeployment: user.azureModelDeployment,\n            apiVersion: user.azureOpenAIVersion || \"2024-02-15-preview\"\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error testing Azure API:\", error);\n      res.status(500).json({ \n        message: \"Failed to test Azure API\",\n        configured: false,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Azure Services Health Check\n  app.get(\"/api/services/health\", isAuthenticated, async (req: any, res) => {\n    try {\n      const health = await checkAzureServicesHealth();\n      res.json({\n        message: \"Azure services health check completed\",\n        services: health,\n        allHealthy: Object.values(health).every(status => status)\n      });\n    } catch (error) {\n      console.error(\"Error checking services health:\", error);\n      res.status(500).json({ \n        message: \"Failed to check services health\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Document Search API\n  app.get(\"/api/search/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      if (!azureSearchService.isAvailable()) {\n        return res.status(503).json({ message: \"Search service not available\" });\n      }\n\n      const { q: query, caseId, documentType, page = 1, limit = 20 } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n\n      const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n      \n      const searchResults = await azureSearchService.searchDocuments(query, {\n        caseId: caseId as string,\n        documentType: documentType as string,\n        top: parseInt(limit as string),\n        skip\n      });\n\n      res.json({\n        query,\n        results: searchResults.results,\n        totalCount: searchResults.count,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        totalPages: Math.ceil(searchResults.count / parseInt(limit as string))\n      });\n    } catch (error) {\n      console.error(\"Error searching documents:\", error);\n      res.status(500).json({ \n        message: \"Search failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Search Suggestions API\n  app.get(\"/api/search/suggestions\", isAuthenticated, async (req: any, res) => {\n    try {\n      if (!azureSearchService.isAvailable()) {\n        return res.status(503).json({ message: \"Search service not available\" });\n      }\n\n      const { q: query, limit = 5 } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n\n      const suggestions = await azureSearchService.getSuggestions(query, parseInt(limit as string));\n      res.json({ suggestions });\n    } catch (error) {\n      console.error(\"Error getting search suggestions:\", error);\n      res.status(500).json({ \n        message: \"Failed to get suggestions\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Enhanced document upload with automatic search indexing\n  app.post(\"/api/documents/upload-with-analysis\", isAuthenticated, upload.single('document'), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const file = req.file;\n      const { caseId, documentType = 'general' } = req.body;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      if (!caseId) {\n        return res.status(400).json({ message: \"Case ID is required\" });\n      }\n\n      // Upload to blob storage\n      const fileName = `${Date.now()}-${file.originalname}`;\n      const blobUrl = await azureBlobService.uploadFile(\n        CONTAINERS.DOCUMENTS, \n        fileName, \n        file.buffer, \n        file.mimetype\n      );\n\n      // Create document record\n      const documentData = {\n        fileName: file.originalname,\n        objectPath: fileName, // Use the blob storage file name\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        caseId,\n        uploadedBy: userId,\n        documentType\n      };\n\n      const document = await storage.createDocument(documentData);\n\n      // Analyze with Document Intelligence if available\n      let extractedText = '';\n      let aiAnalysis = null;\n\n      try {\n        if (documentIntelligenceService.isAvailable()) {\n          console.log(\"🤖 Using Document Intelligence for text extraction...\");\n          const intelligenceResult = await documentIntelligenceService.analyzeDocument(CONTAINERS.DOCUMENTS, fileName);\n          extractedText = intelligenceResult.text;\n        }\n\n        // Generate AI analysis\n        if (process.env.OPENAI_API_KEY && extractedText) {\n          const aiService = createAIService(req.user);\n          aiAnalysis = await aiService.analyzeDocument(extractedText, file.originalname);\n        }\n\n        // Index document for search if available\n        if (azureSearchService.isAvailable() && extractedText) {\n          const searchDoc: SearchDocument = {\n            id: document.id,\n            fileName: file.originalname,\n            content: extractedText,\n            documentType,\n            caseId,\n            uploadDate: new Date().toISOString(),\n            summary: aiAnalysis?.summary || '',\n            tags: [documentType, 'uploaded']\n          };\n\n          await azureSearchService.indexDocument(searchDoc);\n          console.log(`✅ Document indexed for search: ${file.originalname}`);\n        }\n\n        // Extract medical bills from the document\n        let extractedBills: any[] = [];\n        try {\n          if (extractedText) {\n            console.log(\"💊 Extracting medical bills from document...\");\n            const aiService = createAIService(req.user);\n            extractedBills = await aiService.extractMedicalBills(extractedText, file.originalname);\n            console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n            // Store extracted medical bills in database\n            for (const billData of extractedBills) {\n              try {\n                const medicalBillData = {\n                  caseId: caseId,\n                  documentId: document.id,\n                  provider: billData.provider || 'Unknown Provider',\n                  amount: billData.amount?.toString() || '0.00',\n                  serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n                  billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n                  treatment: billData.treatment || '',\n                  insurance: billData.insurance || '',\n                  status: billData.status || 'pending',\n                  createdBy: userId,\n                };\n\n                const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n                await storage.createMedicalBill(validatedBill);\n                console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n              } catch (billError: any) {\n                console.error(\"Error creating medical bill:\", billError, billData);\n                // Continue with other bills even if one fails\n              }\n            }\n          }\n        } catch (billExtractionError) {\n          console.error(\"Medical bill extraction failed:\", billExtractionError);\n          // Continue without bill extraction\n        }\n\n        // Update document with analysis results\n        if (aiAnalysis) {\n          await storage.updateDocument(document.id, {\n            aiSummary: aiAnalysis.summary,\n            extractedData: aiAnalysis.extractedData || {},\n            aiProcessed: true\n          });\n        }\n\n      } catch (analysisError) {\n        console.error(\"Document analysis failed, but upload succeeded:\", analysisError);\n        // Continue without analysis - document is still uploaded\n      }\n\n      res.status(201).json({ \n        document,\n        analysis: aiAnalysis,\n        searchIndexed: azureSearchService.isAvailable() && !!extractedText\n      });\n\n    } catch (error) {\n      console.error(\"Error uploading document with analysis:\", error);\n      res.status(500).json({ \n        message: \"Failed to upload document\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Extract medical bills from existing document\n  app.post(\"/api/documents/:id/extract-bills\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documentId = req.params.id;\n\n      // Get the document\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      // Check if user has access to this document\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get document content from blob storage\n      let documentContent = '';\n      try {\n        if (documentIntelligenceService.isAvailable()) {\n          console.log(\"🤖 Using Document Intelligence for text extraction...\");\n          const intelligenceResult = await documentIntelligenceService.analyzeDocument(\n            CONTAINERS.DOCUMENTS, \n            document.objectPath\n          );\n          documentContent = intelligenceResult.text;\n        } else {\n          return res.status(503).json({ message: \"Document Intelligence service not available\" });\n        }\n      } catch (extractError) {\n        console.error(\"Error extracting text from document:\", extractError);\n        return res.status(500).json({ message: \"Failed to extract text from document\" });\n      }\n\n      if (!documentContent.trim()) {\n        return res.status(400).json({ message: \"No text content found in document\" });\n      }\n\n      // Extract medical bills using AI\n      console.log(\"💊 Extracting medical bills from document...\");\n      const aiService = createAIService(req.user);\n      const extractedBills = await aiService.extractMedicalBills(documentContent, document.fileName);\n      console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n      const createdBills = [];\n      const errors = [];\n\n      // Store extracted medical bills in database\n      for (const billData of extractedBills) {\n        try {\n          const medicalBillData = {\n            caseId: document.caseId,\n            documentId: document.id,\n            provider: billData.provider || 'Unknown Provider',\n            amount: billData.amount?.toString() || '0.00',\n            serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n            billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n            treatment: billData.treatment || '',\n            insurance: billData.insurance || '',\n            status: billData.status || 'pending',\n            createdBy: userId,\n          };\n\n          const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n          const createdBill = await storage.createMedicalBill(validatedBill);\n          createdBills.push(createdBill);\n          console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n        } catch (billError: any) {\n          console.error(\"Error creating medical bill:\", billError, billData);\n          errors.push({\n            billData,\n            error: billError?.message || \"Unknown error\"\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        extractedCount: extractedBills.length,\n        createdCount: createdBills.length,\n        bills: createdBills,\n        errors: errors.length > 0 ? errors : undefined\n      });\n\n    } catch (error) {\n      console.error(\"Error extracting medical bills from document:\", error);\n      res.status(500).json({ \n        message: \"Failed to extract medical bills\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":77124},"server/storage.ts":{"content":"import {\n  users,\n  cases,\n  documents,\n  medicalBills,\n  aiChatSessions,\n  aiChatMessages,\n  demandLetters,\n  aiPrompts,\n  type User,\n  type InsertUser,\n  type Case,\n  type InsertCase,\n  type Document,\n  type InsertDocument,\n  type MedicalBill,\n  type InsertMedicalBill,\n  type AiChatSession,\n  type InsertAiChatSession,\n  type AiChatMessage,\n  type InsertAiChatMessage,\n  type DemandLetter,\n  type InsertDemandLetter,\n  type AiPrompt,\n  type InsertAiPrompt,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(userData: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  updateUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean>;\n  updateUserApiKey(id: string, apiKey: string): Promise<boolean>;\n  updateUserAIConfig(id: string, config: any): Promise<boolean>;\n\n  // Case operations\n  createCase(caseData: InsertCase): Promise<Case>;\n  getCases(userId: string): Promise<Case[]>;\n  getCase(id: string): Promise<Case | undefined>;\n  getCaseById(id: string): Promise<Case | undefined>;\n  updateCase(id: string, updates: Partial<InsertCase>): Promise<Case>;\n  deleteCase(id: string): Promise<void>;\n\n  // Document operations\n  createDocument(documentData: InsertDocument): Promise<Document>;\n  getDocumentsByCase(caseId: string): Promise<Document[]>;\n  getDocumentById(id: string): Promise<Document | undefined>;\n  updateDocument(id: string, updates: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n\n  // Medical Bill operations\n  createMedicalBill(billData: InsertMedicalBill): Promise<MedicalBill>;\n  getMedicalBillsByCase(caseId: string): Promise<MedicalBill[]>;\n  getMedicalBillById(id: string): Promise<MedicalBill | undefined>;\n  updateMedicalBill(id: string, updates: Partial<InsertMedicalBill>): Promise<MedicalBill>;\n  deleteMedicalBill(id: string): Promise<void>;\n\n  // AI Chat operations\n  createChatSession(sessionData: InsertAiChatSession): Promise<AiChatSession>;\n  getChatSessions(userId: string): Promise<AiChatSession[]>;\n  getChatSessionById(id: string): Promise<AiChatSession | undefined>;\n  createChatMessage(messageData: InsertAiChatMessage): Promise<AiChatMessage>;\n  getChatMessages(sessionId: string): Promise<AiChatMessage[]>;\n  \n  // Document Chat operations\n  getDocumentChatHistory(documentId: string): Promise<AiChatMessage[]>;\n  addDocumentChatMessage(documentId: string, messageData: {\n    role: string;\n    content: string;\n    userId: string;\n  }): Promise<AiChatMessage>;\n\n  // Demand Letter operations\n  createDemandLetter(letterData: InsertDemandLetter): Promise<DemandLetter>;\n  getDemandLettersByCase(caseId: string): Promise<DemandLetter[]>;\n  getDemandLetterById(id: string): Promise<DemandLetter | undefined>;\n  updateDemandLetter(id: string, updates: Partial<InsertDemandLetter>): Promise<DemandLetter>;\n\n  // AI Prompt operations\n  createAiPrompt(promptData: InsertAiPrompt): Promise<AiPrompt>;\n  getAiPrompts(userId: string): Promise<AiPrompt[]>;\n  getAiPromptById(id: string): Promise<AiPrompt | undefined>;\n  getAiPromptByType(userId: string, type: string): Promise<AiPrompt | undefined>;\n  updateAiPrompt(id: string, updates: Partial<InsertAiPrompt>): Promise<AiPrompt>;\n  deleteAiPrompt(id: string): Promise<void>;\n\n  // Statistics\n  getDashboardStats(userId: string): Promise<{\n    activeCases: number;\n    pendingBills: string;\n    documentsProcessed: number;\n    aiExtractions: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserPassword(id: string, currentPassword: string, newPassword: string): Promise<boolean> {\n    const { comparePasswords, hashPassword } = await import(\"./auth\");\n    \n    // Get current user\n    const user = await this.getUser(id);\n    if (!user) return false;\n\n    // Verify current password\n    const isCurrentPasswordValid = await comparePasswords(currentPassword, user.password);\n    if (!isCurrentPasswordValid) return false;\n\n    // Hash new password and update\n    const hashedNewPassword = await hashPassword(newPassword);\n    await db\n      .update(users)\n      .set({ password: hashedNewPassword, updatedAt: new Date() })\n      .where(eq(users.id, id));\n\n    return true;\n  }\n\n  async updateUserApiKey(id: string, apiKey: string): Promise<boolean> {\n    await db\n      .update(users)\n      .set({ openaiApiKey: apiKey, updatedAt: new Date() })\n      .where(eq(users.id, id));\n\n    return true;\n  }\n\n  async updateUserAIConfig(id: string, config: {\n    openaiApiKey?: string;\n    useAzureOpenAI?: boolean;\n    azureOpenAIEndpoint?: string;\n    azureOpenAIApiKey?: string;\n    azureOpenAIVersion?: string;\n    azureModelDeployment?: string;\n  }): Promise<boolean> {\n    await db\n      .update(users)\n      .set({ ...config, updatedAt: new Date() })\n      .where(eq(users.id, id));\n\n    return true;\n  }\n\n  // Case operations\n  async createCase(caseData: InsertCase): Promise<Case> {\n    const [caseRecord] = await db.insert(cases).values(caseData).returning();\n    return caseRecord;\n  }\n\n  async getCases(userId: string): Promise<Case[]> {\n    return await db\n      .select()\n      .from(cases)\n      .where(eq(cases.createdBy, userId))\n      .orderBy(desc(cases.updatedAt));\n  }\n\n  async getCase(id: string): Promise<Case | undefined> {\n    const [caseRecord] = await db.select().from(cases).where(eq(cases.id, id));\n    return caseRecord;\n  }\n\n  async getCaseById(id: string): Promise<Case | undefined> {\n    const [caseRecord] = await db.select().from(cases).where(eq(cases.id, id));\n    return caseRecord;\n  }\n\n  async updateCase(id: string, updates: Partial<InsertCase>): Promise<Case> {\n    const [caseRecord] = await db\n      .update(cases)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(cases.id, id))\n      .returning();\n    return caseRecord;\n  }\n\n  async deleteCase(id: string): Promise<void> {\n    await db.delete(cases).where(eq(cases.id, id));\n  }\n\n  // Document operations\n  async createDocument(documentData: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values(documentData).returning();\n    return document;\n  }\n\n  async getDocumentsByCase(caseId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.caseId, caseId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentsByUser(userId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.uploadedBy, userId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentById(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document;\n  }\n\n  async updateDocument(id: string, updates: Partial<InsertDocument>): Promise<Document> {\n    const [document] = await db\n      .update(documents)\n      .set(updates)\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // Medical Bill operations\n  async createMedicalBill(billData: InsertMedicalBill): Promise<MedicalBill> {\n    const [bill] = await db.insert(medicalBills).values(billData).returning();\n    return bill;\n  }\n\n  async getMedicalBillsByCase(caseId: string): Promise<MedicalBill[]> {\n    return await db\n      .select()\n      .from(medicalBills)\n      .where(eq(medicalBills.caseId, caseId))\n      .orderBy(asc(medicalBills.serviceDate));\n  }\n\n  async getMedicalBillById(id: string): Promise<MedicalBill | undefined> {\n    const [bill] = await db.select().from(medicalBills).where(eq(medicalBills.id, id));\n    return bill;\n  }\n\n  async updateMedicalBill(id: string, updates: Partial<InsertMedicalBill>): Promise<MedicalBill> {\n    const [bill] = await db\n      .update(medicalBills)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(medicalBills.id, id))\n      .returning();\n    return bill;\n  }\n\n  async deleteMedicalBill(id: string): Promise<void> {\n    await db.delete(medicalBills).where(eq(medicalBills.id, id));\n  }\n\n  // AI Chat operations\n  async createChatSession(sessionData: InsertAiChatSession): Promise<AiChatSession> {\n    const [session] = await db.insert(aiChatSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getChatSessions(userId: string): Promise<AiChatSession[]> {\n    return await db\n      .select()\n      .from(aiChatSessions)\n      .where(eq(aiChatSessions.userId, userId))\n      .orderBy(desc(aiChatSessions.updatedAt));\n  }\n\n  async getChatSessionById(id: string): Promise<AiChatSession | undefined> {\n    const [session] = await db.select().from(aiChatSessions).where(eq(aiChatSessions.id, id));\n    return session;\n  }\n\n  async createChatMessage(messageData: InsertAiChatMessage): Promise<AiChatMessage> {\n    const [message] = await db.insert(aiChatMessages).values(messageData).returning();\n    return message;\n  }\n\n  async getChatMessages(sessionId: string): Promise<AiChatMessage[]> {\n    return await db\n      .select()\n      .from(aiChatMessages)\n      .where(eq(aiChatMessages.sessionId, sessionId))\n      .orderBy(asc(aiChatMessages.createdAt));\n  }\n\n  // Demand Letter operations\n  async createDemandLetter(letterData: InsertDemandLetter): Promise<DemandLetter> {\n    const [letter] = await db.insert(demandLetters).values(letterData).returning();\n    return letter;\n  }\n\n  async getDemandLettersByCase(caseId: string): Promise<DemandLetter[]> {\n    return await db\n      .select()\n      .from(demandLetters)\n      .where(eq(demandLetters.caseId, caseId))\n      .orderBy(desc(demandLetters.createdAt));\n  }\n\n  async getDemandLetterById(id: string): Promise<DemandLetter | undefined> {\n    const [letter] = await db.select().from(demandLetters).where(eq(demandLetters.id, id));\n    return letter;\n  }\n\n  async updateDemandLetter(id: string, updates: Partial<InsertDemandLetter>): Promise<DemandLetter> {\n    const [letter] = await db\n      .update(demandLetters)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(demandLetters.id, id))\n      .returning();\n    return letter;\n  }\n\n  // AI Prompt operations\n  async createAiPrompt(promptData: InsertAiPrompt): Promise<AiPrompt> {\n    const [prompt] = await db.insert(aiPrompts).values(promptData).returning();\n    return prompt;\n  }\n\n  async getAiPrompts(userId: string): Promise<AiPrompt[]> {\n    return await db\n      .select()\n      .from(aiPrompts)\n      .where(eq(aiPrompts.userId, userId))\n      .orderBy(desc(aiPrompts.createdAt));\n  }\n\n  async getAiPromptById(id: string): Promise<AiPrompt | undefined> {\n    const [prompt] = await db\n      .select()\n      .from(aiPrompts)\n      .where(eq(aiPrompts.id, id));\n    return prompt;\n  }\n\n  async getAiPromptByType(userId: string, type: string): Promise<AiPrompt | undefined> {\n    const [prompt] = await db\n      .select()\n      .from(aiPrompts)\n      .where(and(eq(aiPrompts.userId, userId), eq(aiPrompts.type, type), eq(aiPrompts.isActive, true)))\n      .orderBy(desc(aiPrompts.isDefault), desc(aiPrompts.createdAt));\n    return prompt;\n  }\n\n  async updateAiPrompt(id: string, updates: Partial<InsertAiPrompt>): Promise<AiPrompt> {\n    const [prompt] = await db\n      .update(aiPrompts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(aiPrompts.id, id))\n      .returning();\n    return prompt;\n  }\n\n  async deleteAiPrompt(id: string): Promise<void> {\n    await db.delete(aiPrompts).where(eq(aiPrompts.id, id));\n  }\n\n  // Document Chat operations\n  async getDocumentChatHistory(documentId: string): Promise<AiChatMessage[]> {\n    // Get the document to find its case\n    const document = await this.getDocumentById(documentId);\n    if (!document || !document.caseId) {\n      return [];\n    }\n\n    // Create or get a chat session for this document\n    const sessionTitle = `Document Chat: ${document.fileName}`;\n    \n    // Look for existing session for this document\n    const existingSessions = await db\n      .select()\n      .from(aiChatSessions)\n      .where(and(\n        eq(aiChatSessions.caseId, document.caseId),\n        eq(aiChatSessions.title, sessionTitle)\n      ));\n\n    let sessionId: string;\n    if (existingSessions.length > 0) {\n      sessionId = existingSessions[0].id;\n    } else {\n      // Create new session for this document\n      const newSession = await db\n        .insert(aiChatSessions)\n        .values({\n          caseId: document.caseId,\n          userId: document.uploadedBy,\n          title: sessionTitle,\n        })\n        .returning();\n      sessionId = newSession[0].id;\n    }\n\n    // Get all messages for this session\n    const messages = await db\n      .select()\n      .from(aiChatMessages)\n      .where(eq(aiChatMessages.sessionId, sessionId))\n      .orderBy(asc(aiChatMessages.createdAt));\n\n    return messages;\n  }\n\n  async addDocumentChatMessage(documentId: string, messageData: {\n    role: string;\n    content: string;\n    userId: string;\n  }): Promise<AiChatMessage> {\n    // Get the document to find its case\n    const document = await this.getDocumentById(documentId);\n    if (!document || !document.caseId) {\n      throw new Error(\"Document not found or has no associated case\");\n    }\n\n    // Create or get a chat session for this document\n    const sessionTitle = `Document Chat: ${document.fileName}`;\n    \n    // Look for existing session for this document\n    const existingSessions = await db\n      .select()\n      .from(aiChatSessions)\n      .where(and(\n        eq(aiChatSessions.caseId, document.caseId),\n        eq(aiChatSessions.title, sessionTitle)\n      ));\n\n    let sessionId: string;\n    if (existingSessions.length > 0) {\n      sessionId = existingSessions[0].id;\n    } else {\n      // Create new session for this document\n      const newSession = await db\n        .insert(aiChatSessions)\n        .values({\n          caseId: document.caseId,\n          userId: messageData.userId,\n          title: sessionTitle,\n        })\n        .returning();\n      sessionId = newSession[0].id;\n    }\n\n    // Add the message to the session\n    const message = await db\n      .insert(aiChatMessages)\n      .values({\n        sessionId: sessionId,\n        role: messageData.role,\n        content: messageData.content,\n      })\n      .returning();\n\n    return message[0];\n  }\n\n  // Statistics\n  async getDashboardStats(userId: string): Promise<{\n    activeCases: number;\n    pendingBills: string;\n    documentsProcessed: number;\n    aiExtractions: number;\n  }> {\n    // Get active cases count\n    const userCases = await db\n      .select()\n      .from(cases)\n      .where(and(eq(cases.createdBy, userId), eq(cases.status, \"active\")));\n\n    const activeCases = userCases.length;\n\n    // Get pending bills total\n    const caseIds = userCases.map(c => c.id);\n    let pendingBillsTotal = 0;\n\n    if (caseIds.length > 0) {\n      const billsQuery = await db\n        .select()\n        .from(medicalBills)\n        .where(and(\n          eq(medicalBills.status, \"pending\")\n        ));\n\n      const relevantBills = billsQuery.filter(bill => caseIds.includes(bill.caseId));\n      pendingBillsTotal = relevantBills.reduce((sum, bill) => sum + parseFloat(bill.amount), 0);\n    }\n\n    // Get documents processed count\n    let documentsProcessed = 0;\n    if (caseIds.length > 0) {\n      const docsQuery = await db\n        .select()\n        .from(documents)\n        .where(eq(documents.aiProcessed, true));\n\n      documentsProcessed = docsQuery.filter(doc => caseIds.includes(doc.caseId)).length;\n    }\n\n    // Get AI extractions count (same as documents processed)\n    const aiExtractions = documentsProcessed;\n\n    return {\n      activeCases,\n      pendingBills: `$${pendingBillsTotal.toLocaleString()}`,\n      documentsProcessed,\n      aiExtractions,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16854},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  decimal,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User table for simple login authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  openaiApiKey: text(\"openai_api_key\"),\n  useAzureOpenAI: boolean(\"use_azure_openai\").default(false),\n  azureOpenAIEndpoint: text(\"azure_openai_endpoint\"),\n  azureOpenAIApiKey: text(\"azure_openai_api_key\"),\n  azureOpenAIVersion: text(\"azure_openai_version\").default(\"2024-02-15-preview\"),\n  azureModelDeployment: text(\"azure_model_deployment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiPrompts = pgTable(\"ai_prompts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // 'document_analysis', 'demand_letter', 'chat_system', 'document_editing'\n  prompt: text(\"prompt\").notNull(),\n  isDefault: boolean(\"is_default\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cases = pgTable(\"cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientName: text(\"client_name\").notNull(),\n  caseNumber: varchar(\"case_number\").notNull().unique(),\n  caseType: text(\"case_type\").notNull(),\n  status: varchar(\"status\").notNull().default(\"active\"),\n  description: text(\"description\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").notNull().references(() => cases.id, { onDelete: \"cascade\" }),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  objectPath: text(\"object_path\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  aiProcessed: boolean(\"ai_processed\").default(false),\n  aiSummary: text(\"ai_summary\"),\n  extractedData: jsonb(\"extracted_data\"),\n  \n  // Enhanced Azure workflow metadata\n  processingStatus: varchar(\"processing_status\").default(\"uploaded\"), // 'uploaded', 'analyzing', 'processed', 'error'\n  documentIntelligence: jsonb(\"document_intelligence\"), // Store Document Intelligence results\n  vectorEmbedding: jsonb(\"vector_embedding\"), // Store embedding metadata\n  searchIndexed: boolean(\"search_indexed\").default(false),\n  searchIndexedAt: timestamp(\"search_indexed_at\"),\n  processingErrors: jsonb(\"processing_errors\"), // Store any processing errors\n  lastProcessedAt: timestamp(\"last_processed_at\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const medicalBills = pgTable(\"medical_bills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").notNull().references(() => cases.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  serviceDate: timestamp(\"service_date\").notNull(),\n  billDate: timestamp(\"bill_date\").notNull(),\n  treatment: text(\"treatment\"),\n  insurance: text(\"insurance\"),\n  status: varchar(\"status\").notNull().default(\"pending\"),\n  documentId: varchar(\"document_id\").references(() => documents.id),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiChatSessions = pgTable(\"ai_chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiChatMessages = pgTable(\"ai_chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => aiChatSessions.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\").notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const demandLetters = pgTable(\"demand_letters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").notNull().references(() => cases.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  generatedBy: varchar(\"generated_by\").notNull().references(() => users.id),\n  status: varchar(\"status\").notNull().default(\"draft\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const casesRelations = relations(cases, ({ one, many }) => ({\n  createdBy: one(users, { fields: [cases.createdBy], references: [users.id] }),\n  documents: many(documents),\n  medicalBills: many(medicalBills),\n  aiChatSessions: many(aiChatSessions),\n  demandLetters: many(demandLetters),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  case: one(cases, { fields: [documents.caseId], references: [cases.id] }),\n  uploadedBy: one(users, { fields: [documents.uploadedBy], references: [users.id] }),\n}));\n\nexport const medicalBillsRelations = relations(medicalBills, ({ one }) => ({\n  case: one(cases, { fields: [medicalBills.caseId], references: [cases.id] }),\n  document: one(documents, { fields: [medicalBills.documentId], references: [documents.id] }),\n  createdBy: one(users, { fields: [medicalBills.createdBy], references: [users.id] }),\n}));\n\nexport const aiChatSessionsRelations = relations(aiChatSessions, ({ one, many }) => ({\n  case: one(cases, { fields: [aiChatSessions.caseId], references: [cases.id] }),\n  user: one(users, { fields: [aiChatSessions.userId], references: [users.id] }),\n  messages: many(aiChatMessages),\n}));\n\nexport const aiChatMessagesRelations = relations(aiChatMessages, ({ one }) => ({\n  session: one(aiChatSessions, { fields: [aiChatMessages.sessionId], references: [aiChatSessions.id] }),\n}));\n\nexport const demandLettersRelations = relations(demandLetters, ({ one }) => ({\n  case: one(cases, { fields: [demandLetters.caseId], references: [cases.id] }),\n  generatedBy: one(users, { fields: [demandLetters.generatedBy], references: [users.id] }),\n}));\n\nexport const aiPromptsRelations = relations(aiPrompts, ({ one }) => ({\n  user: one(users, { fields: [aiPrompts.userId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertCaseSchema = createInsertSchema(cases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMedicalBillSchema = createInsertSchema(medicalBills).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiChatSessionSchema = createInsertSchema(aiChatSessions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiChatMessageSchema = createInsertSchema(aiChatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDemandLetterSchema = createInsertSchema(demandLetters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiPromptSchema = createInsertSchema(aiPrompts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\nexport type Case = typeof cases.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertMedicalBill = z.infer<typeof insertMedicalBillSchema>;\nexport type MedicalBill = typeof medicalBills.$inferSelect;\nexport type InsertAiChatSession = z.infer<typeof insertAiChatSessionSchema>;\nexport type AiChatSession = typeof aiChatSessions.$inferSelect;\nexport type InsertAiChatMessage = z.infer<typeof insertAiChatMessageSchema>;\nexport type AiChatMessage = typeof aiChatMessages.$inferSelect;\nexport type InsertDemandLetter = z.infer<typeof insertDemandLetterSchema>;\nexport type DemandLetter = typeof demandLetters.$inferSelect;\nexport type InsertAiPrompt = z.infer<typeof insertAiPromptSchema>;\nexport type AiPrompt = typeof aiPrompts.$inferSelect;\n","size_bytes":9760},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport CasesPage from \"@/pages/CasesPage\";\nimport CaseDetailsPage from \"@/pages/CaseDetailsPage\";\nimport DocumentsPage from \"@/pages/DocumentsPage\";\nimport BillsPage from \"@/pages/BillsPage\";\nimport AIAssistantPage from \"@/pages/AIAssistantPage\";\nimport ReportsPage from \"@/pages/ReportsPage\";\nimport SettingsPage from \"@/pages/SettingsPage\";\nimport DocumentAnalysisPage from \"@/pages/DocumentAnalysisPage\";\nimport AuthPage from \"@/pages/auth-page\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Home} />\n      <ProtectedRoute path=\"/cases\" component={CasesPage} />\n      <ProtectedRoute path=\"/cases/:caseId\" component={CaseDetailsPage} />\n      <ProtectedRoute path=\"/documents\" component={DocumentsPage} />\n      <ProtectedRoute path=\"/documents/:documentId\" component={DocumentAnalysisPage} />\n      <ProtectedRoute path=\"/bills\" component={BillsPage} />\n      <ProtectedRoute path=\"/ai-assistant\" component={AIAssistantPage} />\n      <ProtectedRoute path=\"/reports\" component={ReportsPage} />\n      <ProtectedRoute path=\"/settings\" component={SettingsPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1924},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(210, 40%, 98%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(222, 84%, 4.9%);\n  --radius: 0.75rem;\n  \n  /* Custom colors matching design */\n  --primary-light: hsl(217, 91%, 60%);\n  --neutral-dark: hsl(209, 20%, 25%);\n  --neutral-light: hsl(220, 14%, 96%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(45, 93%, 47%);\n  --danger: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 4.9%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-primary-light {\n    color: hsl(var(--primary-light));\n  }\n  \n  .text-neutral-dark {\n    color: hsl(var(--neutral-dark));\n  }\n  \n  .bg-neutral-light {\n    background-color: hsl(var(--neutral-light));\n  }\n  \n  .bg-primary-light {\n    background-color: hsl(var(--primary-light));\n  }\n  \n  .hover\\:bg-primary-light:hover {\n    background-color: hsl(220, 84%, 45%);\n    color: white;\n  }\n  \n  /* Global button hover fixes */\n  .btn-primary-hover {\n    @apply bg-primary text-white hover:bg-blue-600 hover:text-white transition-all duration-200;\n  }\n  \n  .border-primary-light {\n    border-color: hsl(var(--primary-light));\n  }\n}\n","size_bytes":2704},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIAssistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Brain, \n  Send, \n  Paperclip, \n  FileText, \n  User, \n  Loader2,\n  Plus,\n  MessageCircle,\n  Sparkles\n} from \"lucide-react\";\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  createdAt: string;\n}\n\ninterface ChatSession {\n  id: string;\n  caseId?: string;\n  title?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function AIAssistant() {\n  const [selectedSessionId, setSelectedSessionId] = useState<string>(\"\");\n  const [selectedCaseId, setSelectedCaseId] = useState<string>(\"\");\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: cases = [] } = useQuery({\n    queryKey: [\"/api/cases\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/chat/sessions\"],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/chat/sessions\", selectedSessionId, \"messages\"],\n    enabled: !!selectedSessionId,\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: { caseId?: string; title?: string }) => {\n      const response = await apiRequest(\"/api/chat/sessions\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (session) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/sessions\"] });\n      setSelectedSessionId(session.id);\n      toast({\n        title: \"Success\",\n        description: \"New chat session created\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ sessionId, content }: { sessionId: string; content: string }) => {\n      const response = await apiRequest(`/api/chat/sessions/${sessionId}/messages`, \"POST\", {\n        content,\n      });\n      return response.json();\n    },\n    onMutate: () => {\n      setIsTyping(true);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/chat/sessions\", selectedSessionId, \"messages\"] \n      });\n      setMessageInput(\"\");\n      setIsTyping(false);\n    },\n    onError: (error: Error) => {\n      setIsTyping(false);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim() || !selectedSessionId) return;\n    \n    sendMessageMutation.mutate({\n      sessionId: selectedSessionId,\n      content: messageInput.trim(),\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleCreateSession = () => {\n    const title = selectedCaseId \n      ? `Chat for ${cases.find((c: any) => c.id === selectedCaseId)?.clientName || 'Case'}`\n      : \"General AI Assistant Chat\";\n    \n    createSessionMutation.mutate({\n      caseId: selectedCaseId || undefined,\n      title,\n    });\n  };\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages, isTyping]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">AI Legal Assistant</h2>\n          <p className=\"text-gray-600\">Chat with AI to refine extracted content and generate documents</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge className=\"bg-green-100 text-green-800\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full mr-1\"></div>\n            Online\n          </Badge>\n        </div>\n      </div>\n\n      {/* Session Management */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Chat Sessions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">Case Context (Optional)</label>\n              <Select value={selectedCaseId} onValueChange={setSelectedCaseId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a case\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No specific case</SelectItem>\n                  {Array.isArray(cases) ? cases.map((caseItem: any) => (\n                    <SelectItem key={caseItem.id} value={caseItem.id}>\n                      {caseItem.clientName} - {caseItem.caseNumber}\n                    </SelectItem>\n                  )) : []}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button \n              onClick={handleCreateSession} \n              className=\"w-full bg-primary hover:bg-primary-light\"\n              disabled={createSessionMutation.isPending}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {createSessionMutation.isPending ? \"Creating...\" : \"New Chat Session\"}\n            </Button>\n\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {sessions.length === 0 ? (\n                <div className=\"text-center py-4 text-gray-500\">\n                  <MessageCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">No chat sessions</p>\n                </div>\n              ) : (\n                sessions.map((session: ChatSession) => (\n                  <Button\n                    key={session.id}\n                    variant={selectedSessionId === session.id ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    className=\"w-full justify-start text-left p-3 h-auto\"\n                    onClick={() => setSelectedSessionId(session.id)}\n                  >\n                    <div className=\"truncate\">\n                      <div className=\"font-medium text-sm\">\n                        {session.title || \"Untitled Chat\"}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(session.updatedAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </Button>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chat Interface */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-[700px] flex flex-col\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Brain className=\"w-5 h-5 text-purple-600\" />\n                  <span>AI Assistant Chat</span>\n                </CardTitle>\n                {selectedSessionId && (\n                  <Badge variant=\"outline\">\n                    Session Active\n                  </Badge>\n                )}\n              </div>\n            </CardHeader>\n            \n            {!selectedSessionId ? (\n              <CardContent className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Sparkles className=\"w-16 h-16 mx-auto mb-4 text-purple-400\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Start a Conversation</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Create a new chat session to begin interacting with the AI assistant.\n                  </p>\n                  <Button onClick={handleCreateSession} className=\"bg-purple-600 hover:bg-purple-700\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Start New Chat\n                  </Button>\n                </div>\n              </CardContent>\n            ) : (\n              <>\n                {/* Messages Area */}\n                <CardContent className=\"flex-1 p-0\">\n                  <ScrollArea className=\"h-full p-6\">\n                    {messagesLoading ? (\n                      <div className=\"flex items-center justify-center h-full\">\n                        <Loader2 className=\"w-6 h-6 animate-spin\" />\n                      </div>\n                    ) : messages.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <Brain className=\"w-12 h-12 mx-auto mb-4 text-purple-400\" />\n                        <h4 className=\"font-medium text-neutral-dark mb-2\">No messages yet</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          Start the conversation by asking the AI assistant about document analysis,\n                          content extraction, or demand letter generation.\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {messages.map((message: ChatMessage) => (\n                          <div\n                            key={message.id}\n                            className={`flex items-start space-x-3 ${\n                              message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''\n                            }`}\n                          >\n                            <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n                              message.role === 'assistant' \n                                ? 'bg-purple-600' \n                                : 'bg-primary'\n                            }`}>\n                              {message.role === 'assistant' ? (\n                                <Brain className=\"w-4 h-4 text-white\" />\n                              ) : (\n                                <User className=\"w-4 h-4 text-white\" />\n                              )}\n                            </div>\n                            <div className={`flex-1 ${message.role === 'user' ? 'text-right' : ''}`}>\n                              <div className={`rounded-lg p-3 inline-block max-w-[80%] ${\n                                message.role === 'user'\n                                  ? 'bg-primary text-white'\n                                  : 'bg-gray-100 text-neutral-dark'\n                              }`}>\n                                <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                              </div>\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                {new Date(message.createdAt).toLocaleTimeString()}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                        \n                        {/* Typing indicator */}\n                        {isTyping && (\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"flex-shrink-0 w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center\">\n                              <Brain className=\"w-4 h-4 text-white\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"bg-gray-100 rounded-lg p-3 inline-block\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Loader2 className=\"w-4 h-4 animate-spin text-purple-600\" />\n                                  <p className=\"text-sm text-purple-600 font-medium\">AI is thinking...</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                        <div ref={messagesEndRef} />\n                      </div>\n                    )}\n                  </ScrollArea>\n                </CardContent>\n\n                {/* Message Input */}\n                <div className=\"p-6 border-t border-gray-200\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"flex-1\">\n                      <Textarea\n                        value={messageInput}\n                        onChange={(e) => setMessageInput(e.target.value)}\n                        onKeyDown={handleKeyPress}\n                        placeholder=\"Ask the AI assistant to help with document analysis, content extraction, or demand letter generation...\"\n                        className=\"resize-none min-h-[60px] max-h-[120px]\"\n                        disabled={sendMessageMutation.isPending || isTyping}\n                      />\n                    </div>\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!messageInput.trim() || sendMessageMutation.isPending || isTyping}\n                      className=\"bg-primary hover:bg-primary-light px-6\"\n                    >\n                      {sendMessageMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      ) : (\n                        <>\n                          <Send className=\"w-4 h-4 mr-2\" />\n                          Send\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mt-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-gray-800\">\n                        <Paperclip className=\"w-4 h-4 mr-1\" />\n                        <span className=\"text-sm\">Attach Document</span>\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-gray-800\">\n                        <FileText className=\"w-4 h-4 mr-1\" />\n                        <span className=\"text-sm\">Use Template</span>\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      Press Enter to send, Shift+Enter for new line\n                    </p>\n                  </div>\n                </div>\n              </>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15886},"client/src/components/AIPromptsManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, MessageSquare, FileText, Wand2, PenTool } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst promptSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  type: z.enum([\"document_analysis\", \"demand_letter\", \"chat_system\", \"document_editing\"]),\n  prompt: z.string().min(10, \"Prompt must be at least 10 characters\"),\n  description: z.string().optional(),\n  isActive: z.boolean().optional(),\n  isDefault: z.boolean().optional(),\n});\n\ntype PromptFormData = z.infer<typeof promptSchema>;\ntype AiPrompt = {\n  id: string;\n  name: string;\n  type: string;\n  prompt: string;\n  description?: string;\n  isActive: boolean;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\n\nconst promptTypes = [\n  { value: \"document_analysis\", label: \"Document Analysis\", icon: FileText },\n  { value: \"demand_letter\", label: \"Demand Letter\", icon: MessageSquare },\n  { value: \"chat_system\", label: \"Chat System\", icon: Wand2 },\n  { value: \"document_editing\", label: \"Document Editing\", icon: PenTool },\n];\n\nexport function AIPromptsManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPrompt, setEditingPrompt] = useState<AiPrompt | null>(null);\n\n  // Fetch AI prompts\n  const { data: prompts = [], isLoading } = useQuery<AiPrompt[]>({\n    queryKey: [\"/api/ai-prompts\"],\n  });\n\n  // Form for creating/editing prompts\n  const form = useForm<PromptFormData>({\n    resolver: zodResolver(promptSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"document_analysis\",\n      prompt: \"\",\n      description: \"\",\n      isActive: true,\n      isDefault: false,\n    },\n  });\n\n  // Create prompt mutation\n  const createPromptMutation = useMutation({\n    mutationFn: async (data: PromptFormData) => {\n      return apiRequest(\"/api/ai-prompts\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-prompts\"] });\n      toast({\n        title: \"Success\",\n        description: \"AI prompt created successfully\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create AI prompt\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update prompt mutation\n  const updatePromptMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<PromptFormData> }) => {\n      return apiRequest(`/api/ai-prompts/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-prompts\"] });\n      toast({\n        title: \"Success\",\n        description: \"AI prompt updated successfully\",\n      });\n      setIsDialogOpen(false);\n      setEditingPrompt(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update AI prompt\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete prompt mutation\n  const deletePromptMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/ai-prompts/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-prompts\"] });\n      toast({\n        title: \"Success\",\n        description: \"AI prompt deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete AI prompt\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PromptFormData) => {\n    if (editingPrompt) {\n      updatePromptMutation.mutate({ id: editingPrompt.id, data });\n    } else {\n      createPromptMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (prompt: AiPrompt) => {\n    setEditingPrompt(prompt);\n    form.reset({\n      name: prompt.name,\n      type: prompt.type as any,\n      prompt: prompt.prompt,\n      description: prompt.description || \"\",\n      isActive: prompt.isActive,\n      isDefault: prompt.isDefault,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this AI prompt?\")) {\n      deletePromptMutation.mutate(id);\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    const promptType = promptTypes.find(t => t.value === type);\n    return promptType?.icon || MessageSquare;\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-4\">Loading AI prompts...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-gray-600\">\n          Manage custom AI prompts for different tasks in your legal case management.\n        </p>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              onClick={() => {\n                setEditingPrompt(null);\n                form.reset();\n              }}\n              className=\"bg-primary hover:bg-blue-600 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Prompt\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingPrompt ? \"Edit AI Prompt\" : \"Create New AI Prompt\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingPrompt \n                  ? \"Modify the AI prompt settings and content below.\"\n                  : \"Create a new custom AI prompt for your legal case management tasks.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Medical Analysis Prompt\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {promptTypes.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Brief description of this prompt's purpose\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"prompt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prompt Content</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter your AI prompt here...\"\n                          className=\"min-h-[200px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex items-center space-x-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          Active\n                        </FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isDefault\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          Set as Default\n                        </FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createPromptMutation.isPending || updatePromptMutation.isPending}\n                  >\n                    {createPromptMutation.isPending || updatePromptMutation.isPending\n                      ? \"Saving...\"\n                      : editingPrompt\n                      ? \"Update Prompt\"\n                      : \"Create Prompt\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Prompts List */}\n      {prompts.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">\n          <MessageSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n          <p className=\"text-lg font-medium\">No AI prompts yet</p>\n          <p className=\"text-sm\">Create your first custom AI prompt to get started.</p>\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {prompts.map((prompt: AiPrompt) => {\n            const Icon = getTypeIcon(prompt.type);\n            return (\n              <div\n                key={prompt.id}\n                className=\"border rounded-lg p-4 hover:shadow-sm transition-shadow\"\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    <Icon className=\"w-5 h-5 text-primary mt-1\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-medium\">{prompt.name}</h4>\n                        <Badge\n                          variant={prompt.isActive ? \"default\" : \"secondary\"}\n                          className=\"text-xs\"\n                        >\n                          {prompt.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        {prompt.isDefault && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Default\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-gray-600 mb-2\">\n                        {promptTypes.find(t => t.value === prompt.type)?.label}\n                      </p>\n                      {prompt.description && (\n                        <p className=\"text-sm text-gray-600 mb-2\">{prompt.description}</p>\n                      )}\n                      <div className=\"text-xs text-gray-500\">\n                        {prompt.prompt.slice(0, 150)}\n                        {prompt.prompt.length > 150 && \"...\"}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(prompt)}\n                    >\n                      <Edit className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(prompt.id)}\n                      disabled={deletePromptMutation.isPending}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15007},"client/src/components/CasesList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Briefcase } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { insertCaseSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCaseSchema.omit({ createdBy: true }).extend({\n  caseNumber: z.string().min(1, \"Case number is required\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function CasesList() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: cases = [], isLoading } = useQuery({\n    queryKey: [\"/api/cases\"],\n  });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      clientName: \"\",\n      caseNumber: \"\",\n      caseType: \"\",\n      status: \"active\",\n      description: \"\",\n    },\n  });\n\n  const createCaseMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      // Add createdBy field from user data\n      const caseData = {\n        ...data,\n        createdBy: user?.id || \"\"\n      };\n      const response = await apiRequest(\"/api/cases\", \"POST\", caseData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Case created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createCaseMutation.mutate(data);\n  };\n\n  const filteredCases = Array.isArray(cases) ? cases.filter((caseItem: any) =>\n    caseItem.clientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    caseItem.caseNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    caseItem.caseType?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) : [];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Loading cases...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">Cases</h2>\n          <p className=\"text-gray-600\">Manage your medical legal cases</p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-blue-600 text-white hover:text-white transition-all duration-200\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Case\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Case</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Client Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter client name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"caseNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Case Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., 2024-001\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"caseType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Case Type</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Medical Malpractice\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"active\">Active</SelectItem>\n                            <SelectItem value=\"closed\">Closed</SelectItem>\n                            <SelectItem value=\"pending\">Pending</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter case description...\" \n                          className=\"min-h-[100px]\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createCaseMutation.isPending}>\n                    {createCaseMutation.isPending ? \"Creating...\" : \"Create Case\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n        <Input\n          placeholder=\"Search cases by client name, case number, or type...\"\n          className=\"pl-10\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n\n      {/* Cases Grid */}\n      {filteredCases.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Briefcase className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No cases found</h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchTerm ? \"No cases match your search criteria.\" : \"Create your first case to get started.\"}\n            </p>\n            {!searchTerm && (\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create First Case\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {filteredCases.map((caseItem: any) => (\n            <Card key={caseItem.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                      <span className=\"text-white font-semibold\">\n                        {caseItem.clientName?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'C'}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-semibold text-neutral-dark\">\n                          {caseItem.clientName}\n                        </h3>\n                        <Badge variant={caseItem.status === 'active' ? 'default' : 'secondary'}>\n                          {caseItem.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-600 mb-2\">\n                        {caseItem.caseType} • Case #{caseItem.caseNumber}\n                      </p>\n                      {caseItem.description && (\n                        <p className=\"text-sm text-gray-600 mb-3\">{caseItem.description}</p>\n                      )}\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                        <span>Created: {new Date(caseItem.createdAt).toLocaleDateString()}</span>\n                        <span>Updated: {new Date(caseItem.updatedAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Link href={`/cases/${caseItem.id}`}>\n                      <Button variant=\"outline\" size=\"sm\">\n                        View Details\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11607},"client/src/components/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Briefcase,\n  DollarSign,\n  FileText,\n  Brain,\n  TrendingUp,\n  Upload,\n  Plus,\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCaseSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCaseSchema.omit({ createdBy: true }).extend({\n  clientName: z.string().min(1, \"Client name is required\"),\n  caseNumber: z.string().min(1, \"Case number is required\"),\n  caseType: z.string().min(1, \"Case type is required\"),\n  description: z.string().optional(),\n});\n\nfunction RecentProcessing() {\n  const { data: documents = [] } = useQuery({\n    queryKey: ['/api/documents'],\n    enabled: true\n  });\n\n  const recentProcessed = Array.isArray(documents) ? \n    documents.filter((doc: any) => doc.aiProcessed).slice(0, 3) : [];\n\n  if (recentProcessed.length === 0) {\n    return (\n      <div className=\"text-center py-4 text-gray-500\">\n        <FileText className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n        <p className=\"text-sm\">No recent document processing</p>\n        <p className=\"text-xs mt-1\">Upload documents to see AI analysis results</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {recentProcessed.map((doc: any) => (\n        <div key={doc.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n          <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n            <FileText className=\"w-4 h-4 text-green-600\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-neutral-dark truncate\">\n              {doc.fileName}\n            </p>\n            <p className=\"text-xs text-gray-600 truncate\">\n              {doc.aiSummary?.substring(0, 80)}...\n            </p>\n            <div className=\"flex items-center space-x-2 mt-1\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                AI Processed\n              </Badge>\n              <span className=\"text-xs text-gray-500\">\n                {new Date(doc.createdAt).toLocaleDateString()}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Link href={`/documents/${doc.id}`}>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary-light\">\n                View\n              </Button>\n            </Link>\n          </div>\n        </div>\n      ))}\n      <div className=\"pt-2\">\n        <Link href=\"/documents\">\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n            View All Documents\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\ninterface DashboardStats {\n  activeCases: number;\n  pendingBills: string;\n  documentsProcessed: number;\n  aiExtractions: number;\n}\n\nexport default function Dashboard() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: cases, isLoading: casesLoading } = useQuery({\n    queryKey: [\"/api/cases\"],\n  });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user\"],\n  });\n\n  const recentCases = Array.isArray(cases) ? cases.slice(0, 3) : [];\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      clientName: \"\",\n      caseNumber: \"\",\n      caseType: \"\",\n      description: \"\",\n      status: \"active\",\n    },\n  });\n\n  const createCaseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      // Add createdBy field from user data\n      const caseData = {\n        ...data,\n        createdBy: user?.id || \"\"\n      };\n      const response = await apiRequest(\"/api/cases\", \"POST\", caseData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Case created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createCaseMutation.mutate(data);\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-lg\">Loading dashboard...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-neutral-dark\">Case Management Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">Manage medical cases, documents, and billing efficiently</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={async () => {\n              try {\n                const response = await fetch('/api/demo/populate', { method: 'POST' });\n                if (response.ok) {\n                  window.location.reload();\n                }\n              } catch (error) {\n                console.error('Failed to populate demo data:', error);\n              }\n            }}\n            variant=\"outline\"\n            className=\"border-secondary text-secondary hover:bg-secondary hover:text-white\"\n          >\n            Add Demo Data\n          </Button>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-blue-600 text-white hover:text-white transition-all duration-200 hover:shadow-md hover:scale-[1.02]\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Case\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Case</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter client name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"caseNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Case Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., MED-2024-001\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"caseType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Case Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select case type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Personal Injury - Motor Vehicle Accident\">Personal Injury - Motor Vehicle Accident</SelectItem>\n                            <SelectItem value=\"Medical Malpractice - Surgical Error\">Medical Malpractice - Surgical Error</SelectItem>\n                            <SelectItem value=\"Workers Compensation - Workplace Injury\">Workers Compensation - Workplace Injury</SelectItem>\n                            <SelectItem value=\"Product Liability\">Product Liability</SelectItem>\n                            <SelectItem value=\"Slip and Fall\">Slip and Fall</SelectItem>\n                            <SelectItem value=\"Medical Negligence\">Medical Negligence</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Brief description of the case...\"\n                            className=\"resize-none\"\n                            rows={4}\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsDialogOpen(false)}\n                      disabled={createCaseMutation.isPending}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-primary hover:bg-primary-light\"\n                      disabled={createCaseMutation.isPending}\n                    >\n                      {createCaseMutation.isPending ? \"Creating...\" : \"Create Case\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"space-y-8\">\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Active Cases</p>\n                    <p className=\"text-3xl font-bold text-neutral-dark\">\n                      {stats?.activeCases || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"w-6 h-6 text-primary\" />\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Pending Bills</p>\n                    <p className=\"text-3xl font-bold text-neutral-dark\">\n                      {stats?.pendingBills || \"$0\"}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Documents Processed</p>\n                    <p className=\"text-3xl font-bold text-neutral-dark\">\n                      {stats?.documentsProcessed || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">AI Extractions</p>\n                    <p className=\"text-3xl font-bold text-neutral-dark\">\n                      {stats?.aiExtractions || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Brain className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Cases and Document Upload */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Recent Cases */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Cases</CardTitle>\n                  <Link href=\"/cases\">\n                    <Button variant=\"link\" size=\"sm\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {casesLoading ? (\n                  <div className=\"text-center py-4\">Loading cases...</div>\n                ) : recentCases.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Briefcase className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No cases found</p>\n                    <p className=\"text-sm\">Create your first case to get started</p>\n                  </div>\n                ) : (\n                  recentCases.map((caseItem: any) => (\n                    <Link key={caseItem.id} href={`/cases/${caseItem.id}`}>\n                      <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                            <span className=\"text-white font-semibold text-sm\">\n                              {caseItem.clientName?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'C'}\n                            </span>\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium text-neutral-dark\">{caseItem.clientName}</h4>\n                            <p className=\"text-sm text-gray-600\">{caseItem.caseType} • {caseItem.caseNumber}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={caseItem.status === 'active' ? 'default' : 'secondary'}>\n                            {caseItem.status}\n                          </Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            {new Date(caseItem.updatedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </Link>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Document Upload */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Document Processing Center</CardTitle>\n                <p className=\"text-sm text-gray-600\">Upload and analyze case documents with AI</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary transition-colors mb-6\">\n                  <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h4 className=\"text-lg font-medium text-neutral-dark mb-2\">Drop files here to upload</h4>\n                  <p className=\"text-gray-600 mb-4\">Support for PDF, DOC, DOCX, and image files</p>\n                  <Link href=\"/documents\">\n                    <Button>\n                      Choose Files\n                    </Button>\n                  </Link>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-neutral-dark\">Recent Processing</h4>\n                  <RecentProcessing />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n    </div>\n  );\n}\n","size_bytes":18433},"client/src/components/DocumentReview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  FileText, \n  Brain, \n  Send, \n  User, \n  Bot, \n  Download, \n  Edit3,\n  Eye,\n  MessageSquare,\n  Calendar,\n  User2,\n  MapPin,\n  Stethoscope,\n  ClipboardList\n} from \"lucide-react\";\n\n// Simple Markdown Renderer Component\nconst MarkdownRenderer = ({ content }: { content: string }) => {\n  const renderMarkdown = (text: string) => {\n    // Split into lines for processing\n    const lines = text.split('\\n');\n    const elements: JSX.Element[] = [];\n    let currentKey = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      \n      // Handle headings\n      if (line.startsWith('### ')) {\n        elements.push(\n          <h3 key={currentKey++} className=\"text-lg font-semibold text-gray-900 mt-4 mb-2\">\n            {line.substring(4)}\n          </h3>\n        );\n      }\n      // Handle bullet points\n      else if (line.startsWith('• ')) {\n        elements.push(\n          <div key={currentKey++} className=\"flex items-start space-x-2 mb-1\">\n            <span className=\"text-gray-600 mt-1\">•</span>\n            <span dangerouslySetInnerHTML={{ __html: formatInlineMarkdown(line.substring(2)) }} />\n          </div>\n        );\n      }\n      // Handle regular paragraphs\n      else if (line.trim() !== '') {\n        elements.push(\n          <p key={currentKey++} className=\"text-sm text-gray-700 mb-2\" \n             dangerouslySetInnerHTML={{ __html: formatInlineMarkdown(line) }} />\n        );\n      }\n      // Handle line breaks\n      else {\n        elements.push(<div key={currentKey++} className=\"h-2\" />);\n      }\n    }\n\n    return elements;\n  };\n\n  const formatInlineMarkdown = (text: string) => {\n    // Handle bold text **text**\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-semibold text-gray-900\">$1</strong>');\n  };\n\n  return <div className=\"text-sm\">{renderMarkdown(content)}</div>;\n};\n\ninterface DocumentReviewProps {\n  documentId: string;\n  onClose: () => void;\n}\n\nexport function DocumentReview({ documentId, onClose }: DocumentReviewProps) {\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [activeTab, setActiveTab] = useState<\"summary\" | \"extracted\" | \"chat\">(\"summary\");\n  const [isDownloading, setIsDownloading] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: document, isLoading } = useQuery({\n    queryKey: [\"/api/documents\", documentId],\n    enabled: !!documentId,\n  });\n\n  const { data: chatHistory = [] } = useQuery({\n    queryKey: [\"/api/documents\", documentId, \"chat\"],\n    enabled: !!documentId,\n  });\n\n  const sendChatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(`/api/documents/${documentId}/chat`, \"POST\", {\n        message,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\", documentId, \"chat\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\", documentId] });\n      setChatMessage(\"\");\n      toast({\n        title: \"Message sent\",\n        description: \"AI is processing your request\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim()) return;\n    sendChatMutation.mutate(chatMessage.trim());\n  };\n\n  const handleDownload = async () => {\n    if (isDownloading || !document) return;\n    \n    setIsDownloading(true);\n    try {\n      const docData = document as any;\n      const response = await fetch(`/api/documents/${documentId}/download`);\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = docData.fileName || 'document.pdf';\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n      \n      toast({\n        title: \"Download completed\",\n        description: `${docData.fileName} has been downloaded successfully`,\n      });\n    } catch (error) {\n      console.error('Download failed:', error);\n      toast({\n        title: \"Download failed\",\n        description: \"Failed to download the document. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  if (isLoading || !document) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Brain className=\"w-8 h-8 animate-spin mx-auto mb-2\" />\n          <p>Loading document...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const docData = document as any;\n  const extractedData = docData.extractedData || {};\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Document Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">{docData.fileName}</h2>\n          <div className=\"flex items-center space-x-4 mt-2\">\n            <Badge variant={docData.aiProcessed ? \"default\" : \"secondary\"} \n                   className={docData.aiProcessed ? \"bg-green-100 text-green-800\" : \"bg-yellow-100 text-yellow-800\"}>\n              {docData.aiProcessed ? \"AI Processed\" : \"Processing\"}\n            </Badge>\n            <span className=\"text-sm text-gray-600\">\n              {new Date(docData.createdAt).toLocaleDateString()}\n            </span>\n            <span className=\"text-sm text-gray-600\">\n              {(docData.fileSize / 1024 / 1024).toFixed(2)} MB\n            </span>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleDownload} disabled={isDownloading}>\n            {isDownloading ? (\n              <Brain className=\"w-4 h-4 mr-2 animate-spin\" />\n            ) : (\n              <Download className=\"w-4 h-4 mr-2\" />\n            )}\n            {isDownloading ? \"Downloading...\" : \"Download\"}\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1\">\n        <button\n          onClick={() => setActiveTab(\"summary\")}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === \"summary\" ? \"bg-white text-primary shadow-sm\" : \"text-gray-600 hover:text-gray-900\"\n          }`}\n        >\n          <Eye className=\"w-4 h-4 inline mr-2\" />\n          Summary\n        </button>\n        <button\n          onClick={() => setActiveTab(\"extracted\")}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === \"extracted\" ? \"bg-white text-primary shadow-sm\" : \"text-gray-600 hover:text-gray-900\"\n          }`}\n        >\n          <ClipboardList className=\"w-4 h-4 inline mr-2\" />\n          Extracted Data\n        </button>\n        <button\n          onClick={() => setActiveTab(\"chat\")}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n            activeTab === \"chat\" ? \"bg-white text-primary shadow-sm\" : \"text-gray-600 hover:text-gray-900\"\n          }`}\n        >\n          <MessageSquare className=\"w-4 h-4 inline mr-2\" />\n          AI Editor\n        </button>\n      </div>\n\n      {/* Content Based on Active Tab */}\n      {activeTab === \"summary\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Brain className=\"w-5 h-5 mr-2 text-primary\" />\n              AI Analysis Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none\">\n              <p className=\"text-gray-700 leading-relaxed\">\n                {docData.aiSummary || \"AI analysis not yet complete. The document is being processed.\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {activeTab === \"extracted\" && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Patient Information */}\n          {(extractedData.patientInfo || extractedData.patientName || extractedData.employeeName) && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User2 className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Patient/Individual Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {extractedData.patientInfo?.names && extractedData.patientInfo.names.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Patient Names:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.patientInfo.names.map((name: string, i: number) => (\n                        <li key={i}>{name}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.patientInfo?.ages && extractedData.patientInfo.ages.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Ages:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.patientInfo.ages.map((age: string, i: number) => (\n                        <li key={i}>{age}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.patientInfo?.addresses && extractedData.patientInfo.addresses.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Addresses:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.patientInfo.addresses.map((address: string, i: number) => (\n                        <li key={i}>{address}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.patientInfo?.insuranceInfo && extractedData.patientInfo.insuranceInfo.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Insurance:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.patientInfo.insuranceInfo.map((insurance: string, i: number) => (\n                        <li key={i}>{insurance}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.patientName && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Patient Name:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.patientName}</p>\n                  </div>\n                )}\n                {extractedData.employeeName && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Employee Name:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.employeeName}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Medical Information */}\n          {(extractedData.medicalInfo || extractedData.diagnosis || extractedData.injuryType || extractedData.procedure) && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Stethoscope className=\"w-5 h-5 mr-2 text-red-600\" />\n                  Medical Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {extractedData.medicalInfo?.diagnoses && extractedData.medicalInfo.diagnoses.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Diagnoses:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.medicalInfo.diagnoses.map((d: string, i: number) => (\n                        <li key={i}>{d}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.medicalInfo?.procedures && extractedData.medicalInfo.procedures.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Procedures:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.medicalInfo.procedures.map((p: string, i: number) => (\n                        <li key={i}>{p}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.medicalInfo?.medications && extractedData.medicalInfo.medications.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Medications:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.medicalInfo.medications.map((m: string, i: number) => (\n                        <li key={i}>{m}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.medicalInfo?.providers && extractedData.medicalInfo.providers.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Providers:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.medicalInfo.providers.map((p: any, i: number) => (\n                        <li key={i}>\n                          {typeof p === 'string' ? p : (\n                            <div className=\"space-y-1\">\n                              {Object.entries(p).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.diagnosis && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Diagnosis:</span>\n                    {Array.isArray(extractedData.diagnosis) ? (\n                      <ul className=\"list-disc list-inside text-neutral-dark\">\n                        {extractedData.diagnosis.map((d: string, i: number) => (\n                          <li key={i}>{d}</li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p className=\"text-neutral-dark\">{extractedData.diagnosis}</p>\n                    )}\n                  </div>\n                )}\n                {extractedData.injuryType && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Injury Type:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.injuryType}</p>\n                  </div>\n                )}\n                {extractedData.procedure && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Procedure:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.procedure}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Timeline Information */}\n          {(extractedData.timeline || extractedData.dateOfService || extractedData.surgeryDate || extractedData.incidentDate) && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Timeline\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {extractedData.timeline?.dates && extractedData.timeline.dates.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Timeline Events:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.timeline.dates.map((date: any, i: number) => (\n                        <li key={i}>\n                          {typeof date === 'object' && date !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(date).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(date)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.timeline?.servicesPeriod && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Services Period:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.timeline.servicesPeriod}</p>\n                  </div>\n                )}\n                {extractedData.dateOfService && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Date of Service:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.dateOfService}</p>\n                  </div>\n                )}\n                {extractedData.surgeryDate && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Surgery Date:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.surgeryDate}</p>\n                  </div>\n                )}\n                {extractedData.incidentDate && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Incident Date:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.incidentDate}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Location Information */}\n          {(extractedData.locations || extractedData.provider || extractedData.location) && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"w-5 h-5 mr-2 text-purple-600\" />\n                  Location & Provider\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {extractedData.locations?.facilities && extractedData.locations.facilities.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Facilities:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.locations.facilities.map((facility: any, i: number) => (\n                        <li key={i}>\n                          {typeof facility === 'string' ? facility : (\n                            <div className=\"space-y-1\">\n                              {Object.entries(facility).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.locations?.addresses && extractedData.locations.addresses.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Addresses:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.locations.addresses.map((address: string, i: number) => (\n                        <li key={i}>{address}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.provider && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Provider:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.provider}</p>\n                  </div>\n                )}\n                {extractedData.location && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Location:</span>\n                    <p className=\"text-neutral-dark\">{extractedData.location}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Additional Details */}\n          {(extractedData.keyFindings || extractedData.complications || extractedData.witnesses) && (\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ClipboardList className=\"w-5 h-5 mr-2 text-orange-600\" />\n                  Additional Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {extractedData.keyFindings && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Key Findings:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.keyFindings.map((finding: any, i: number) => (\n                        <li key={i}>\n                          {typeof finding === 'object' && finding !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(finding).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(finding)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.complications && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Complications:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.complications.map((complication: any, i: number) => (\n                        <li key={i}>\n                          {typeof complication === 'object' && complication !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(complication).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(complication)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.witnesses && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Witnesses:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark\">\n                      {extractedData.witnesses.map((witness: any, i: number) => (\n                        <li key={i}>\n                          {typeof witness === 'object' && witness !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(witness).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(witness)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Additional Details */}\n          {extractedData.additionalDetails && (\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ClipboardList className=\"w-5 h-5 mr-2 text-orange-600\" />\n                  Additional Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {extractedData.additionalDetails.keyFindings && extractedData.additionalDetails.keyFindings.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Key Findings:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark mt-1\">\n                      {extractedData.additionalDetails.keyFindings.map((finding: any, i: number) => (\n                        <li key={i}>\n                          {typeof finding === 'object' && finding !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(finding).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(finding)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.additionalDetails.costs && extractedData.additionalDetails.costs.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Costs:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark mt-1\">\n                      {extractedData.additionalDetails.costs.map((cost: any, i: number) => (\n                        <li key={i}>\n                          {typeof cost === 'object' && cost !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(cost).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(cost)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                {extractedData.additionalDetails.complications && extractedData.additionalDetails.complications.length > 0 && (\n                  <div>\n                    <span className=\"font-medium text-sm text-gray-600\">Complications:</span>\n                    <ul className=\"list-disc list-inside text-neutral-dark mt-1\">\n                      {extractedData.additionalDetails.complications.map((complication: any, i: number) => (\n                        <li key={i}>\n                          {typeof complication === 'object' && complication !== null ? (\n                            <div className=\"space-y-1\">\n                              {Object.entries(complication).map(([key, value]: [string, any]) => (\n                                <div key={key} className=\"text-sm\">\n                                  <span className=\"font-medium\">{key}:</span> {\n                                    typeof value === 'object' && value !== null ? JSON.stringify(value) : String(value)\n                                  }\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            String(complication)\n                          )}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Fallback message if no extracted data */}\n          {(!extractedData || Object.keys(extractedData).length === 0) && (\n            <Card className=\"lg:col-span-2\">\n              <CardContent className=\"text-center py-8\">\n                <Brain className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Extracted Data Processing</h3>\n                <p className=\"text-gray-600\">\n                  The document analysis is complete, but extracted data may still be processing. \n                  Try refreshing or check the AI Editor tab for detailed information.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {activeTab === \"chat\" && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Chat Interface */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Edit3 className=\"w-5 h-5 mr-2 text-primary\" />\n                  AI Document Editor\n                </CardTitle>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Give AI commands to modify, extract, or analyze this document\n                </p>\n              </CardHeader>\n              <CardContent>\n                {/* Chat History */}\n                <ScrollArea className=\"h-[32rem] mb-4 p-4 border rounded-lg bg-gray-50\">\n                  {(chatHistory as any[]).length === 0 ? (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <MessageSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">Start a conversation with AI to edit this document</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {(chatHistory as any[]).map((chat: any) => (\n                        <div\n                          key={chat.id}\n                          className={`flex items-start space-x-3 ${\n                            chat.role === \"user\" ? \"justify-end\" : \"\"\n                          }`}\n                        >\n                          {chat.role === \"assistant\" && (\n                            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                              <Bot className=\"w-4 h-4 text-white\" />\n                            </div>\n                          )}\n                          <div\n                            className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                              chat.role === \"user\"\n                                ? \"bg-primary text-white ml-auto\"\n                                : \"bg-white border\"\n                            }`}\n                          >\n                            <MarkdownRenderer content={chat.content} />\n                          </div>\n                          {chat.role === \"user\" && (\n                            <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                              <User className=\"w-4 h-4 text-gray-600\" />\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n\n                {/* Message Input */}\n                <div className=\"flex space-x-2\">\n                  <Textarea\n                    value={chatMessage}\n                    onChange={(e) => setChatMessage(e.target.value)}\n                    placeholder=\"Ask AI to modify, extract data, or analyze this document...\"\n                    className=\"flex-1 min-h-[80px] resize-none\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\" && !e.shiftKey) {\n                        e.preventDefault();\n                        handleSendMessage();\n                      }\n                    }}\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={!chatMessage.trim() || sendChatMutation.isPending}\n                    className=\"self-end\"\n                  >\n                    {sendChatMutation.isPending ? (\n                      <Brain className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <Send className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Commands Suggestions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Suggested Commands</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {[\n                  \"Extract all medical diagnoses from this document\",\n                  \"Summarize the key findings in bullet points\",\n                  \"Create a timeline of events mentioned\",\n                  \"Identify any missing information\",\n                  \"Rewrite the summary to emphasize legal implications\",\n                  \"Find all mentions of costs or billing amounts\",\n                  \"Extract contact information for all providers\"\n                ].map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"w-full text-left justify-start text-xs h-auto p-2 whitespace-normal\"\n                    onClick={() => setChatMessage(suggestion)}\n                  >\n                    {suggestion}\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DocumentReview;","size_bytes":37263},"client/src/components/DocumentsView.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport DocumentReview from \"@/components/DocumentReview\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileText, Upload, Eye, Brain, Download, CheckCircle, Trash2 } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function DocumentsView() {\n  const [selectedCaseId, setSelectedCaseId] = useState<string>(\"\");\n  const [reviewingDocumentId, setReviewingDocumentId] = useState<string | null>(null);\n  const [deletingDocumentId, setDeletingDocumentId] = useState<string | null>(null);\n  const [analyzingIds, setAnalyzingIds] = useState<Set<string>>(new Set());\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: cases = [] } = useQuery({\n    queryKey: [\"/api/cases\"],\n  });\n\n  const { data: documents = [], isLoading } = useQuery({\n    queryKey: [\"/api/cases\", selectedCaseId, \"documents\"],\n    enabled: !!selectedCaseId,\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"/api/documents\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\", selectedCaseId, \"documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Document uploaded successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const setDocumentObjectMutation = useMutation({\n    mutationFn: async ({ documentId, objectURL }: { documentId: string; objectURL: string }) => {\n      const response = await apiRequest(`/api/documents/${documentId}/object`, \"PUT\", { objectURL });\n      return response.json();\n    },\n  });\n\n  const analyzeDocumentMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      // Add to analyzing set when starting\n      setAnalyzingIds(prev => new Set(prev.add(documentId)));\n      \n      const response = await apiRequest(`/api/documents/${documentId}/analyze`, \"POST\");\n      const result = await response.json();\n      return { documentId, ...result };\n    },\n    onSuccess: (result) => {\n      // Remove from analyzing set when complete\n      setAnalyzingIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(result.documentId);\n        return newSet;\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\", selectedCaseId, \"documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      // Enhanced success message with extraction details\n      const analysis = result.analysis;\n      let description = \"Document processed successfully!\";\n      \n      if (analysis?.documentIntelligence) {\n        const di = analysis.documentIntelligence;\n        description = `Extracted content from ${di.pages} page(s). Found ${di.tablesFound} tables and ${di.keyValuePairsFound} key-value pairs.`;\n      }\n      \n      if (analysis?.searchIndexed) {\n        description += \" Document is now searchable.\";\n      }\n      \n      toast({\n        title: \"Analysis Complete\",\n        description,\n      });\n    },\n    onError: (error: Error, variables) => {\n      // Remove from analyzing set on error\n      setAnalyzingIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables);\n        return newSet;\n      });\n      \n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Could not analyze the document. Please check if the file is a valid PDF or image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDocumentMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(text || \"Failed to delete document\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\", selectedCaseId, \"documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Document deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteDocument = (documentId: string) => {\n    setDeletingDocumentId(documentId);\n  };\n\n  const confirmDelete = () => {\n    if (deletingDocumentId) {\n      deleteDocumentMutation.mutate(deletingDocumentId);\n      setDeletingDocumentId(null);\n    }\n  };\n\n  const handleDownload = async (documentId: string, fileName: string) => {\n    try {\n      // Use fetch directly for file downloads to avoid JSON parsing issues\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n      \n      const blob = await response.blob();\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download document\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleView = async (documentId: string) => {\n    try {\n      // Use fetch directly for file downloads to avoid JSON parsing issues\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n      \n      const blob = await response.blob();\n      \n      // Open in new tab\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n      \n      // Clean up after a delay\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n      }, 1000);\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to view document\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle direct file upload to our server, which then uploads to Azure\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0 && selectedCaseId) {\n      let successfulUploads = 0;\n      let failedUploads = 0;\n      \n      // Process all successful files, not just the first one\n      for (const file of result.successful) {\n        try {\n          // The response should contain the object path from our server\n          const uploadResponse = file.response;\n          \n          if (!uploadResponse?.body?.objectPath) {\n            throw new Error(\"Upload response missing object path\");\n          }\n\n          // Create document record\n          const documentData = {\n            caseId: selectedCaseId,\n            fileName: file.name,\n            fileSize: file.size,\n            mimeType: file.type || \"application/octet-stream\",\n            objectPath: uploadResponse.body.objectPath,\n          };\n\n          await createDocumentMutation.mutateAsync(documentData);\n          successfulUploads++;\n        } catch (error) {\n          console.error(\"Error creating document record:\", error);\n          failedUploads++;\n        }\n      }\n      \n      // Show appropriate success/error message based on results\n      if (successfulUploads > 0) {\n        toast({\n          title: \"Success\",\n          description: `${successfulUploads} document${successfulUploads > 1 ? 's' : ''} uploaded successfully${failedUploads > 0 ? ` (${failedUploads} failed)` : ''}`,\n        });\n      }\n      \n      if (failedUploads > 0 && successfulUploads === 0) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload documents\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // If reviewing a document, show the review interface\n  if (reviewingDocumentId) {\n    return (\n      <DocumentReview\n        documentId={reviewingDocumentId}\n        onClose={() => setReviewingDocumentId(null)}\n      />\n    );\n  }\n\n  if (isLoading && selectedCaseId) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Loading documents...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">Documents</h2>\n          <p className=\"text-gray-600\">Upload and manage case documents</p>\n        </div>\n      </div>\n\n      {/* Case Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Case</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedCaseId} onValueChange={setSelectedCaseId}>\n            <SelectTrigger className=\"w-full\">\n              <SelectValue placeholder=\"Choose a case to view documents\" />\n            </SelectTrigger>\n            <SelectContent>\n              {Array.isArray(cases) ? cases.map((caseItem: any) => (\n                <SelectItem key={caseItem.id} value={caseItem.id}>\n                  {caseItem.clientName} - {caseItem.caseNumber}\n                </SelectItem>\n              )) : []}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {selectedCaseId && (\n        <>\n          {/* Upload Area */}\n          <Card>\n            <CardHeader>\n              <CardTitle>AI-Powered Document Processing</CardTitle>\n              <p className=\"text-sm text-gray-600\">Upload documents for intelligent analysis and data extraction</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary transition-colors mb-6\">\n                <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h4 className=\"text-lg font-medium text-neutral-dark mb-2\">Drop files here to upload</h4>\n                <p className=\"text-gray-600 mb-4\">Support for PDF, DOC, DOCX, and image files</p>\n                <ObjectUploader\n                  maxNumberOfFiles={5}\n                  maxFileSize={104857600} // 100MB\n\n                  onComplete={handleUploadComplete}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Upload className=\"w-4 h-4\" />\n                    <span>Choose Files</span>\n                  </div>\n                </ObjectUploader>\n              </div>\n\n              {/* AI Processing Workflow Steps */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Upload className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <h4 className=\"font-medium text-sm mb-1\">1. Upload</h4>\n                  <p className=\"text-xs text-gray-600\">Secure cloud storage</p>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Brain className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-medium text-sm mb-1\">2. AI Analysis</h4>\n                  <p className=\"text-xs text-gray-600\">Extract key information</p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <FileText className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <h4 className=\"font-medium text-sm mb-1\">3. Structure Data</h4>\n                  <p className=\"text-xs text-gray-600\">Organize findings</p>\n                </div>\n                <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <CheckCircle className=\"w-5 h-5 text-orange-600\" />\n                  </div>\n                  <h4 className=\"font-medium text-sm mb-1\">4. Ready</h4>\n                  <p className=\"text-xs text-gray-600\">Available for review</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Documents List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Case Documents</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {(documents as any[]).length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No documents found</h3>\n                  <p className=\"text-gray-600\">Upload documents to get started with AI analysis.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {(documents as any[]).map((doc: any) => (\n                    <div key={doc.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"w-5 h-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-neutral-dark\">{doc.fileName}</h4>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                            <span>{(doc.fileSize / 1024 / 1024).toFixed(2)} MB</span>\n                            <span>{new Date(doc.createdAt).toLocaleDateString()}</span>\n                            {doc.aiProcessed ? (\n                              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                AI Processed\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n                                Processing\n                              </Badge>\n                            )}\n                          </div>\n                          {doc.aiSummary && (\n                            <p className=\"text-sm text-gray-600 mt-1 max-w-md truncate\">\n                              {doc.aiSummary}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {!doc.aiProcessed && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => analyzeDocumentMutation.mutate(doc.id)}\n                            disabled={analyzingIds.has(doc.id)}\n                          >\n                            <Brain className=\"w-4 h-4 mr-1\" />\n                            {analyzingIds.has(doc.id) ? \"Analyzing...\" : \"Analyze\"}\n                          </Button>\n                        )}\n                        {doc.aiProcessed ? (\n                          <Button \n                            size=\"sm\" \n                            variant=\"default\"\n                            onClick={() => setReviewingDocumentId(doc.id)}\n                            className=\"bg-primary text-white hover:bg-blue-600 hover:text-white transition-all duration-200\"\n                          >\n                            <Brain className=\"w-4 h-4 mr-1\" />\n                            Review & Edit\n                          </Button>\n                        ) : (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => handleView(doc.id)}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View\n                          </Button>\n                        )}\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleDownload(doc.id, doc.fileName)}\n                        >\n                          <Download className=\"w-4 h-4 mr-1\" />\n                          Download\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleDeleteDocument(doc.id)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          data-testid={`button-delete-${doc.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </>\n      )}\n      \n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingDocumentId} onOpenChange={(open) => !open && setDeletingDocumentId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Document</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this document? This action cannot be undone and will permanently remove the document from both the database and cloud storage.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteDocumentMutation.isPending}\n            >\n              {deleteDocumentMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":20102},"client/src/components/Layout.tsx":{"content":"import { useState, type ReactNode } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"flex h-screen bg-neutral-light\">\n      {/* Mobile sidebar overlay */}\n      {isMobile && sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-40 bg-black/50\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`\n        ${isMobile \n          ? `fixed inset-y-0 left-0 z-50 transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out` \n          : 'relative'\n        }\n      `}>\n        <Sidebar onNavigate={() => isMobile && setSidebarOpen(false)} />\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Mobile header */}\n        {isMobile && (\n          <header className=\"bg-white border-b border-gray-200 px-4 py-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n            >\n              {sidebarOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </header>\n        )}\n\n        {/* Page content */}\n        <main className=\"flex-1 overflow-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1697},"client/src/components/MedicalBillsView.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, DollarSign, Calendar, FileText } from \"lucide-react\";\nimport { insertMedicalBillSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertMedicalBillSchema.extend({\n  serviceDate: z.string().min(1, \"Service date is required\"),\n  billDate: z.string().min(1, \"Bill date is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst statusColors = {\n  pending: \"bg-yellow-100 text-yellow-800\",\n  verified: \"bg-green-100 text-green-800\",\n  disputed: \"bg-red-100 text-red-800\",\n  approved: \"bg-blue-100 text-blue-800\",\n};\n\nexport default function MedicalBillsView() {\n  const [selectedCaseId, setSelectedCaseId] = useState<string>(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: cases = [] } = useQuery({\n    queryKey: [\"/api/cases\"],\n  });\n\n  const { data: bills = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/cases\", selectedCaseId, \"bills\"],\n    enabled: !!selectedCaseId,\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      provider: \"\",\n      amount: \"\",\n      serviceDate: \"\",\n      billDate: \"\",\n      treatment: \"\",\n      insurance: \"\",\n      status: \"pending\",\n      caseId: selectedCaseId,\n    },\n  });\n\n  const createBillMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const billData = {\n        ...data,\n        caseId: selectedCaseId,\n        serviceDate: new Date(data.serviceDate).toISOString(),\n        billDate: new Date(data.billDate).toISOString(),\n        amount: data.amount,\n      };\n      const response = await apiRequest(\"/api/bills\", \"POST\", billData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\", selectedCaseId, \"bills\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Medical bill created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createBillMutation.mutate(data);\n  };\n\n  // Calculate summary statistics\n  const totalAmount = Array.isArray(bills) ? bills.reduce((sum: number, bill: any) => {\n    const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n    return sum + (isNaN(amount) ? 0 : amount);\n  }, 0) : 0;\n  \n  const verifiedAmount = Array.isArray(bills) ? bills\n    .filter((bill: any) => bill.status === \"verified\")\n    .reduce((sum: number, bill: any) => {\n      const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n      return sum + (isNaN(amount) ? 0 : amount);\n    }, 0) : 0;\n    \n  const pendingAmount = Array.isArray(bills) ? bills\n    .filter((bill: any) => bill.status === \"pending\")\n    .reduce((sum: number, bill: any) => {\n      const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n      return sum + (isNaN(amount) ? 0 : amount);\n    }, 0) : 0;\n    \n  const disputedAmount = Array.isArray(bills) ? bills\n    .filter((bill: any) => bill.status === \"disputed\")\n    .reduce((sum: number, bill: any) => {\n      const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n      return sum + (isNaN(amount) ? 0 : amount);\n    }, 0) : 0;\n\n  if (isLoading && selectedCaseId) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Loading medical bills...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">Medical Bills</h2>\n          <p className=\"text-gray-600\">Review and verify medical billing timeline</p>\n        </div>\n        \n        {selectedCaseId && (\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary-light\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Bill\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Add Medical Bill</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"provider\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Provider</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Hospital/Clinic name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount ($)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"serviceDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Service Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"billDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bill Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"treatment\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Treatment/Service</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Description of treatment\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"insurance\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Insurance</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Insurance information\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"status\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Status</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"verified\">Verified</SelectItem>\n                              <SelectItem value=\"disputed\">Disputed</SelectItem>\n                              <SelectItem value=\"approved\">Approved</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createBillMutation.isPending}>\n                      {createBillMutation.isPending ? \"Creating...\" : \"Add Bill\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      {/* Case Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Case</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedCaseId} onValueChange={setSelectedCaseId}>\n            <SelectTrigger className=\"w-full\">\n              <SelectValue placeholder=\"Choose a case to view medical bills\" />\n            </SelectTrigger>\n            <SelectContent>\n              {Array.isArray(cases) ? cases.map((caseItem: any) => (\n                <SelectItem key={caseItem.id} value={caseItem.id}>\n                  {caseItem.clientName} - {caseItem.caseNumber}\n                </SelectItem>\n              )) : []}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {selectedCaseId && (\n        <>\n          {/* Summary Statistics */}\n          {Array.isArray(bills) && bills.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Bills Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-neutral-dark\">${totalAmount.toFixed(2)}</p>\n                    <p className=\"text-sm text-gray-600\">Total Amount</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">${verifiedAmount.toFixed(2)}</p>\n                    <p className=\"text-sm text-gray-600\">Verified</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-yellow-600\">${pendingAmount.toFixed(2)}</p>\n                    <p className=\"text-sm text-gray-600\">Pending</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\">${disputedAmount.toFixed(2)}</p>\n                    <p className=\"text-sm text-gray-600\">Disputed</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Bills Timeline */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Medical Bills Chronological Review</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!Array.isArray(bills) || bills.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <DollarSign className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No medical bills found</h3>\n                  <p className=\"text-gray-600 mb-4\">Add medical bills to track billing timeline.</p>\n                  <Button onClick={() => setIsCreateDialogOpen(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add First Bill\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {bills\n                    .sort((a: any, b: any) => new Date(a.serviceDate).getTime() - new Date(b.serviceDate).getTime())\n                    .map((bill: any) => (\n                    <div key={bill.id} className=\"relative\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"flex-shrink-0 w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                          <FileText className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"bg-gray-50 rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div className=\"flex items-center space-x-3\">\n                                <h4 className=\"font-medium text-neutral-dark\">{bill.provider}</h4>\n                                <Badge className={statusColors[bill.status as keyof typeof statusColors] || statusColors.pending}>\n                                  {bill.status}\n                                </Badge>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"text-lg font-semibold text-neutral-dark\">\n                                  ${parseFloat(bill.amount).toLocaleString()}\n                                </p>\n                                <p className=\"text-xs text-gray-600\">\n                                  {new Date(bill.billDate).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                              <div>\n                                <p className=\"text-gray-600\">Service Date</p>\n                                <p className=\"font-medium text-neutral-dark\">\n                                  {new Date(bill.serviceDate).toLocaleDateString()}\n                                </p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600\">Treatment</p>\n                                <p className=\"font-medium text-neutral-dark\">{bill.treatment || \"N/A\"}</p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600\">Insurance</p>\n                                <p className=\"font-medium text-neutral-dark\">{bill.insurance || \"N/A\"}</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <span className=\"sr-only\">View details</span>\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                          </svg>\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":17195},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport XHRUpload from \"@uppy/xhr-upload\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters?: () => Promise<{\n    method: \"POST\" | \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 100MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 104857600, // 100MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(XHRUpload, {\n        endpoint: '/api/objects/upload',\n        fieldName: 'file',\n        formData: true,\n        headers: {\n          // Authentication will be handled by cookies\n        },\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":3011},"client/src/components/SettingsView.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, Settings, Lock, Mail, UserCircle } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst profileSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nconst passwordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\ntype PasswordFormData = z.infer<typeof passwordSchema>;\n\nexport default function SettingsView() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const profileForm = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  const passwordForm = useForm<PasswordFormData>({\n    resolver: zodResolver(passwordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const response = await apiRequest(\"/api/user/profile\", \"PUT\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (data: PasswordFormData) => {\n      const response = await apiRequest(\"/api/user/password\", \"PUT\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Password updated successfully\",\n      });\n      passwordForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onProfileSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const onPasswordSubmit = (data: PasswordFormData) => {\n    updatePasswordMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-neutral-dark\">Settings</h2>\n          <p className=\"text-gray-600\">Manage your account settings and preferences</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Profile Settings */}\n        <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-2\">\n              <UserCircle className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Profile Information</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...profileForm}>\n              <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={profileForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter username\" \n                          className=\"hover:border-primary/50 focus:border-primary transition-colors duration-200\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={profileForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Enter email address\"\n                          className=\"hover:border-primary/50 focus:border-primary transition-colors duration-200\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end\">\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-primary hover:bg-blue-600 text-white hover:text-white transition-all duration-200 hover:shadow-md hover:scale-[1.02]\"\n                    disabled={updateProfileMutation.isPending}\n                  >\n                    {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Password Settings */}\n        <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-2\">\n              <Lock className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Change Password</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...passwordForm}>\n              <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={passwordForm.control}\n                  name=\"currentPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter current password\"\n                          className=\"hover:border-primary/50 focus:border-primary transition-colors duration-200\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={passwordForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter new password\"\n                          className=\"hover:border-primary/50 focus:border-primary transition-colors duration-200\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Confirm new password\"\n                          className=\"hover:border-primary/50 focus:border-primary transition-colors duration-200\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end\">\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-primary hover:bg-blue-600 text-white hover:text-white transition-all duration-200 hover:shadow-md hover:scale-[1.02]\"\n                    disabled={updatePasswordMutation.isPending}\n                  >\n                    {updatePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Account Information */}\n      <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <UserCircle className=\"w-5 h-5 text-primary\" />\n            <CardTitle>Account Information</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <User className=\"w-4 h-4\" />\n                  <span>User ID</span>\n                </div>\n                <p className=\"text-neutral-dark font-mono text-sm bg-gray-50 hover:bg-gray-100 px-3 py-2 rounded transition-colors duration-200 cursor-default\">\n                  {user?.id || 'N/A'}\n                </p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <UserCircle className=\"w-4 h-4\" />\n                  <span>Username</span>\n                </div>\n                <p className=\"text-neutral-dark\">{user?.username || 'N/A'}</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <Mail className=\"w-4 h-4\" />\n                  <span>Email</span>\n                </div>\n                <p className=\"text-neutral-dark\">{user?.email || 'N/A'}</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11387},"client/src/components/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  LayoutDashboard,\n  Briefcase,\n  FileText,\n  DollarSign,\n  Brain,\n  BarChart3,\n  Scale,\n  Settings,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  onNavigate?: () => void;\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Cases\", href: \"/cases\", icon: Briefcase },\n  { name: \"Documents\", href: \"/documents\", icon: FileText },\n  { name: \"Medical Bills\", href: \"/bills\", icon: DollarSign },\n  // { name: \"AI Assistant\", href: \"/ai-assistant\", icon: Brain },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar({ onNavigate }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (!firstName && !lastName) return \"U\";\n    return `${firstName?.[0] || \"\"}${lastName?.[0] || \"\"}`.toUpperCase();\n  };\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-gray-200 flex flex-col h-full\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Scale className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-xl font-bold text-neutral-dark\">LegalMed</h1>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <button\n                onClick={onNavigate}\n                className={`\n                  w-full flex items-center space-x-3 p-3 rounded-lg font-medium transition-colors\n                  ${isActive \n                    ? 'bg-primary text-white' \n                    : 'text-gray-600 hover:bg-gray-100'\n                  }\n                `}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.name}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Avatar className=\"w-10 h-10\">\n            <AvatarImage src={user?.profileImageUrl || \"\"} alt=\"Profile\" />\n            <AvatarFallback className=\"bg-primary text-white\">\n              {getInitials(user?.firstName || undefined, user?.lastName || undefined)}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              {user?.firstName || user?.lastName \n                ? `${user?.firstName || \"\"} ${user?.lastName || \"\"}`.trim()\n                : user?.email || \"User\"\n              }\n            </p>\n            <p className=\"text-xs text-gray-500\">Legal Professional</p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"w-full\" \n          onClick={handleLogout}\n        >\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3689},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"/api/login\", \"POST\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in to your account.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Sign in failed\",\n        description: \"Invalid username or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"/api/register\", \"POST\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to LegalMed. Your account has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Signed out\",\n        description: \"You have been successfully signed out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3238},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":705},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIAssistantPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport AIAssistant from \"@/components/AIAssistant\";\n\nexport default function AIAssistantPage() {\n  return (\n    <Layout>\n      <AIAssistant />\n    </Layout>\n  );\n}","size_bytes":205},"client/src/pages/BillsPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport MedicalBillsView from \"@/components/MedicalBillsView\";\n\nexport default function BillsPage() {\n  return (\n    <Layout>\n      <MedicalBillsView />\n    </Layout>\n  );\n}","size_bytes":214},"client/src/pages/CaseDetailsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertCaseSchema, type Case } from \"../../../shared/schema\";\nimport { z } from \"zod\";\nimport {\n  ArrowLeft,\n  Briefcase,\n  FileText,\n  DollarSign,\n  Calendar,\n  User,\n  Hash,\n  Clock,\n  Edit,\n  Upload,\n  Download,\n  Brain,\n  Trash2,\n} from \"lucide-react\";\nimport DocumentsView from \"@/components/DocumentsView\";\nimport MedicalBillsView from \"@/components/MedicalBillsView\";\n\n// Create update schema that excludes createdBy field for updates\nconst updateCaseSchema = insertCaseSchema.omit({ createdBy: true });\ntype UpdateCaseFormData = z.infer<typeof updateCaseSchema>;\n\nexport default function CaseDetailsPage() {\n  const { caseId } = useParams();\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: caseData, isLoading: caseLoading } = useQuery({\n    queryKey: [`/api/cases/${caseId}`],\n    enabled: !!caseId,\n  });\n\n  const { data: caseDocuments = [], isLoading: documentsLoading } = useQuery({\n    queryKey: [`/api/cases/${caseId}/documents`],\n    enabled: !!caseId,\n  });\n\n  const { data: caseBills = [], isLoading: billsLoading } = useQuery({\n    queryKey: [`/api/cases/${caseId}/bills`],\n    enabled: !!caseId,\n  });\n\n  // Form for editing case\n  const form = useForm<UpdateCaseFormData>({\n    resolver: zodResolver(updateCaseSchema),\n    defaultValues: {\n      clientName: \"\",\n      caseNumber: \"\",\n      caseType: \"\",\n      status: \"active\",\n      description: \"\",\n    },\n  });\n\n  // Update form when caseData changes\n  useEffect(() => {\n    if (caseData && typeof caseData === 'object') {\n      const data = caseData as Case;\n      form.reset({\n        clientName: data.clientName || \"\",\n        caseNumber: data.caseNumber || \"\",\n        caseType: data.caseType || \"\",\n        status: data.status || \"active\",\n        description: data.description || \"\",\n      });\n    }\n  }, [caseData, form]);\n\n  // Mutation for updating case\n  const updateCaseMutation = useMutation({\n    mutationFn: async (data: UpdateCaseFormData) => {\n      const response = await apiRequest(`/api/cases/${caseId}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Case Updated\",\n        description: \"Case details have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/cases/${caseId}`] });\n      setIsEditDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update case.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateCaseFormData) => {\n    updateCaseMutation.mutate(data);\n  };\n\n  if (caseLoading) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading case details...</div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!caseData || typeof caseData !== 'object') {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Case Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">The requested case could not be found.</p>\n            <Link href=\"/cases\">\n              <Button>Back to Cases</Button>\n            </Link>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  const totalDocuments = Array.isArray(caseDocuments) ? caseDocuments.length : 0;\n  const processedDocuments = Array.isArray(caseDocuments) ? caseDocuments.filter((doc: any) => doc.aiProcessed).length : 0;\n  const totalBills = Array.isArray(caseBills) ? caseBills.length : 0;\n  const totalBillAmount = Array.isArray(caseBills) ? caseBills.reduce((sum: number, bill: any) => {\n    const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n    return sum + (isNaN(amount) ? 0 : amount);\n  }, 0) : 0;\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/cases\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Cases\n              </Button>\n            </Link>\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-neutral-dark\">{(caseData as any)?.clientName || 'Unknown'}</h1>\n              <p className=\"text-gray-600\">{(caseData as any)?.caseType || 'Unknown'} • Case #{(caseData as any)?.caseNumber || 'N/A'}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={(caseData as any)?.status === 'active' ? 'default' : 'secondary'} className=\"text-sm\">\n              {(caseData as any)?.status || 'Unknown'}\n            </Badge>\n            <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Case\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Edit Case Details</DialogTitle>\n                  <DialogDescription>\n                    Update the case information below. All fields are required except description.\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"clientName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Client Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., John Smith\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"caseNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Case Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., CASE-2024-001\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"caseType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Case Type</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Personal Injury\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"active\">Active</SelectItem>\n                                <SelectItem value=\"pending\">Pending</SelectItem>\n                                <SelectItem value=\"closed\">Closed</SelectItem>\n                                <SelectItem value=\"archived\">Archived</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Enter case description...\"\n                              className=\"min-h-[100px]\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsEditDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={updateCaseMutation.isPending}\n                        className=\"bg-primary hover:bg-blue-600 text-white\"\n                      >\n                        {updateCaseMutation.isPending ? \"Updating...\" : \"Update Case\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Case Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Documents</p>\n                  <p className=\"text-2xl font-bold text-neutral-dark\">{totalDocuments}</p>\n                  <p className=\"text-xs text-gray-500\">{processedDocuments} AI processed</p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Medical Bills</p>\n                  <p className=\"text-2xl font-bold text-neutral-dark\">{totalBills}</p>\n                  <p className=\"text-xs text-gray-500\">${totalBillAmount.toFixed(2)} total</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Created</p>\n                  <p className=\"text-2xl font-bold text-neutral-dark\">\n                    {new Date((caseData as any)?.createdAt || Date.now()).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric' \n                    })}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {new Date((caseData as any)?.createdAt || Date.now()).getFullYear()}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Last Updated</p>\n                  <p className=\"text-2xl font-bold text-neutral-dark\">\n                    {new Date((caseData as any)?.updatedAt || Date.now()).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric' \n                    })}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {Math.ceil((Date.now() - new Date((caseData as any)?.updatedAt || Date.now()).getTime()) / (1000 * 60 * 60 * 24))} days ago\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-6 h-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Case Details */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Case Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <User className=\"w-4 h-4\" />\n                  <span>Client Name</span>\n                </div>\n                <p className=\"text-neutral-dark\">{(caseData as any)?.clientName || 'Unknown'}</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <Hash className=\"w-4 h-4\" />\n                  <span>Case Number</span>\n                </div>\n                <p className=\"text-neutral-dark\">{(caseData as any)?.caseNumber || 'N/A'}</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-600\">\n                  <Briefcase className=\"w-4 h-4\" />\n                  <span>Case Type</span>\n                </div>\n                <p className=\"text-neutral-dark\">{(caseData as any)?.caseType || 'Unknown'}</p>\n              </div>\n            </div>\n            \n            {(caseData as any)?.description && (\n              <div className=\"space-y-2 pt-4 border-t\">\n                <h4 className=\"text-sm font-medium text-gray-600\">Description</h4>\n                <p className=\"text-neutral-dark leading-relaxed\">{(caseData as any)?.description}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Tabs for Documents and Bills */}\n        <Tabs defaultValue=\"documents\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"documents\" className=\"flex items-center space-x-2\">\n              <FileText className=\"w-4 h-4\" />\n              <span>Documents ({totalDocuments})</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"bills\" className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-4 h-4\" />\n              <span>Medical Bills ({totalBills})</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"documents\" className=\"space-y-6\">\n            <CaseDocumentsView caseId={caseId!} documents={Array.isArray(caseDocuments) ? caseDocuments : []} isLoading={documentsLoading} />\n          </TabsContent>\n\n          <TabsContent value=\"bills\" className=\"space-y-6\">\n            <CaseBillsView caseId={caseId!} bills={Array.isArray(caseBills) ? caseBills : []} isLoading={billsLoading} />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}\n\n// Simplified documents view for case details\nfunction CaseDocumentsView({ caseId, documents, isLoading }: { caseId: string; documents: any[]; isLoading: boolean }) {\n  const { toast } = useToast();\n  const [downloadingIds, setDownloadingIds] = useState<Set<string>>(new Set());\n  const [deletingDocumentId, setDeletingDocumentId] = useState<string | null>(null);\n\n  const handleDownload = async (documentId: string, fileName: string) => {\n    if (downloadingIds.has(documentId)) return;\n    \n    setDownloadingIds(prev => new Set(prev.add(documentId)));\n    try {\n      // Use fetch directly for file downloads to avoid JSON parsing issues\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n      \n      const blob = await response.blob();\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download document\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDownloadingIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(documentId);\n        return newSet;\n      });\n    }\n  };\n\n  const deleteDocumentMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(text || \"Failed to delete document\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/cases/${caseId}/documents`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Document deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteDocument = (documentId: string) => {\n    setDeletingDocumentId(documentId);\n  };\n\n  const confirmDelete = () => {\n    if (deletingDocumentId) {\n      deleteDocumentMutation.mutate(deletingDocumentId);\n      setDeletingDocumentId(null);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Loading documents...</div>;\n  }\n\n  if (!Array.isArray(documents) || documents.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-12\">\n          <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No documents uploaded</h3>\n          <p className=\"text-gray-600 mb-4\">Upload documents to get started with AI analysis.</p>\n          <Link href=\"/documents\">\n            <Button>\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Upload Documents\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {documents.map((doc: any) => (\n        <Card key={doc.id}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-neutral-dark mb-1\">{doc.fileName}</h4>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                    <span>{(doc.fileSize / 1024).toFixed(1)} KB</span>\n                    <span>{doc.mimeType}</span>\n                    <span>{new Date(doc.createdAt).toLocaleDateString()}</span>\n                  </div>\n                  {doc.aiProcessed && doc.aiSummary && (\n                    <p className=\"text-sm text-gray-700 mb-2\">{doc.aiSummary}</p>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    {doc.aiProcessed ? (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        <Brain className=\"w-3 h-3 mr-1\" />\n                        AI Processed\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Pending Analysis\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {doc.aiProcessed && (\n                  <Link href={`/documents/${doc.id}`}>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      View AI Analysis\n                    </Button>\n                  </Link>\n                )}\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handleDownload(doc.id, doc.fileName)}\n                  disabled={downloadingIds.has(doc.id)}\n                  data-testid=\"button-download\"\n                >\n                  {downloadingIds.has(doc.id) ? (\n                    <Brain className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Download className=\"w-4 h-4 mr-2\" />\n                  )}\n                  {downloadingIds.has(doc.id) ? \"Downloading...\" : \"Download\"}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handleDeleteDocument(doc.id)}\n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  data-testid={`button-delete-${doc.id}`}\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n      \n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingDocumentId} onOpenChange={(open) => !open && setDeletingDocumentId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Document</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this document? This action cannot be undone and will permanently remove the document from both the database and cloud storage.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteDocumentMutation.isPending}\n            >\n              {deleteDocumentMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n\n// Simplified bills view for case details\nfunction CaseBillsView({ caseId, bills, isLoading }: { caseId: string; bills: any[]; isLoading: boolean }) {\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Loading medical bills...</div>;\n  }\n\n  if (!Array.isArray(bills) || bills.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-12\">\n          <DollarSign className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No medical bills found</h3>\n          <p className=\"text-gray-600 mb-4\">Add medical bills to track case expenses.</p>\n          <Link href=\"/bills\">\n            <Button>\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Manage Bills\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const totalAmount = bills.reduce((sum: number, bill: any) => {\n    const amount = parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, ''));\n    return sum + (isNaN(amount) ? 0 : amount);\n  }, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Bills Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n            <div>\n              <p className=\"text-2xl font-bold text-neutral-dark\">${totalAmount.toFixed(2)}</p>\n              <p className=\"text-sm text-gray-600\">Total Amount</p>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-neutral-dark\">{bills.length}</p>\n              <p className=\"text-sm text-gray-600\">Total Bills</p>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-green-600\">\n                ${bills.filter((b: any) => b.status === 'verified').reduce((s: number, b: any) => {\n                  const amount = parseFloat(String(b.amount || '0').replace(/[^0-9.-]/g, ''));\n                  return s + (isNaN(amount) ? 0 : amount);\n                }, 0).toFixed(2)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Verified</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bills List */}\n      <div className=\"space-y-4\">\n        {bills.map((bill: any) => (\n          <Card key={bill.id}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-neutral-dark mb-1\">{bill.provider}</h4>\n                    <p className=\"text-sm text-gray-600 mb-2\">{bill.treatment}</p>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                      <span>Service: {new Date(bill.serviceDate).toLocaleDateString()}</span>\n                      <span>Billed: {new Date(bill.billDate).toLocaleDateString()}</span>\n                      {bill.insurance && <span>Insurance: {bill.insurance}</span>}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-xl font-bold text-neutral-dark\">${parseFloat(String(bill.amount || '0').replace(/[^0-9.-]/g, '')).toFixed(2)}</p>\n                  <Badge variant={bill.status === 'verified' ? 'default' : bill.status === 'pending' ? 'secondary' : 'destructive'}>\n                    {bill.status}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":29727},"client/src/pages/CasesPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport CasesList from \"@/components/CasesList\";\n\nexport default function CasesPage() {\n  return (\n    <Layout>\n      <CasesList />\n    </Layout>\n  );\n}","size_bytes":193},"client/src/pages/DocumentAnalysisPage.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport Layout from \"@/components/Layout\";\nimport { DocumentReview } from \"@/components/DocumentReview\";\n\nexport default function DocumentAnalysisPage() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const documentId = params.documentId;\n\n  if (!documentId) {\n    navigate(\"/documents\");\n    return <div>Redirecting...</div>;\n  }\n\n  return (\n    <Layout>\n      <DocumentReview\n        documentId={documentId}\n        onClose={() => navigate(\"/documents\")}\n      />\n    </Layout>\n  );\n}","size_bytes":558},"client/src/pages/DocumentsPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport DocumentsView from \"@/components/DocumentsView\";\n\nexport default function DocumentsPage() {\n  return (\n    <Layout>\n      <DocumentsView />\n    </Layout>\n  );\n}","size_bytes":209},"client/src/pages/Home.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport Dashboard from \"@/components/Dashboard\";\n\nexport default function Home() {\n  return (\n    <Layout>\n      <Dashboard />\n    </Layout>\n  );\n}\n","size_bytes":189},"client/src/pages/Landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Scale, Brain, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-3\">\n              <Scale className=\"w-7 h-7 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-neutral-dark\">LegalMed</h1>\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Medical Case Management for Law Firms\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n            Streamline your medical legal cases with AI-powered document analysis, \n            chronological bill review, and intelligent demand letter generation.\n          </p>\n        </div>\n\n        {/* Features */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"text-center p-6\">\n            <CardContent className=\"pt-6\">\n              <FileText className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Document Analysis</h3>\n              <p className=\"text-gray-600 text-sm\">\n                AI-powered extraction of key medical information from documents\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <CardContent className=\"pt-6\">\n              <Brain className=\"w-12 h-12 text-secondary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">AI Assistant</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Interactive chat interface for content editing and refinement\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-white text-2xl\">$</span>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Bill Management</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Chronological review and verification of medical bills\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6\">\n            <CardContent className=\"pt-6\">\n              <Users className=\"w-12 h-12 text-purple-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Team Collaboration</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Secure document sharing and case collaboration tools\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* CTA */}\n        <div className=\"text-center\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-2xl font-bold mb-4\">Ready to get started?</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Sign in to access your medical case management dashboard\n              </p>\n              <Button \n                onClick={handleLogin}\n                size=\"lg\" \n                className=\"w-full bg-primary hover:bg-primary-light\"\n              >\n                Sign In to Continue\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3884},"client/src/pages/ReportsPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart3, TrendingUp, FileText, Users } from \"lucide-react\";\n\nexport default function ReportsPage() {\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-neutral-dark\">Reports & Analytics</h1>\n          <p className=\"text-gray-600 mt-1\">View insights and analytics for your medical legal cases</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Case Performance</p>\n                  <p className=\"text-3xl font-bold text-neutral-dark\">85%</p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <span className=\"inline-flex items-center text-sm text-green-600\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +5% from last month\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Document Processing</p>\n                  <p className=\"text-3xl font-bold text-neutral-dark\">92%</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <span className=\"inline-flex items-center text-sm text-green-600\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +8% from last month\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Team Efficiency</p>\n                  <p className=\"text-3xl font-bold text-neutral-dark\">78%</p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-6 h-6 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <span className=\"inline-flex items-center text-sm text-green-600\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +3% from last month\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">AI Accuracy</p>\n                  <p className=\"text-3xl font-bold text-neutral-dark\">96%</p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <span className=\"inline-flex items-center text-sm text-green-600\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +2% from last month\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Reports Coming Soon</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-12 text-gray-500\">\n              <BarChart3 className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Advanced Analytics</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Detailed reporting and analytics features are currently in development.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":4636},"client/src/pages/SettingsPage.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport SettingsView from \"@/components/SettingsView\";\n\nexport default function SettingsPage() {\n  return (\n    <Layout>\n      <SettingsView />\n    </Layout>\n  );\n}","size_bytes":205},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { Redirect } from \"wouter\";\nimport { Scale, Shield, FileText, Brain } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex\">\n      {/* Left side - Hero section */}\n      <div className=\"hidden lg:flex lg:w-1/2 bg-gradient-to-br from-blue-600 to-blue-800 p-12 flex-col justify-center text-white\">\n        <div className=\"max-w-md\">\n          <div className=\"flex items-center mb-8\">\n            <Scale className=\"h-10 w-10 mr-3\" />\n            <h1 className=\"text-3xl font-bold\">LegalMed</h1>\n          </div>\n          \n          <h2 className=\"text-4xl font-bold mb-6 leading-tight\">\n            AI-Powered Medical Legal Case Management\n          </h2>\n          \n          <p className=\"text-xl mb-8 text-blue-100\">\n            Streamline your medical legal workflow with intelligent document analysis, \n            case management, and AI-powered insights.\n          </p>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center\">\n              <FileText className=\"h-6 w-6 mr-3 text-blue-200\" />\n              <span className=\"text-lg\">Smart document analysis and extraction</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Brain className=\"h-6 w-6 mr-3 text-blue-200\" />\n              <span className=\"text-lg\">AI-powered case insights</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Shield className=\"h-6 w-6 mr-3 text-blue-200\" />\n              <span className=\"text-lg\">Secure case and document management</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right side - Auth forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"w-full\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Welcome back</CardTitle>\n                  <CardDescription>\n                    Sign in to your account to continue managing your cases\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        value={loginForm.username}\n                        onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        value={loginForm.password}\n                        onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4397},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1095},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-white hover:bg-blue-600 hover:text-white transition-all duration-200\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1931},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n}","size_bytes":3854},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import { forwardRef } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":766},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes_backup.ts":{"content":"// Simple clean download route for testing\nexport function addDownloadRoute(app: any, storage: any, azureBlobService: any, isAuthenticated: any) {\n  app.get(\"/api/documents/:id/download\", isAuthenticated, async (req: any, res: any) => {\n    console.log(\"=== DOWNLOAD ENDPOINT HIT ===\");\n    console.log(\"Document ID:\", req.params.id);\n    \n    try {\n      const userId = req.user.id;\n      console.log(\"User ID:\", userId);\n      \n      const document = await storage.getDocumentById(req.params.id);\n      console.log(\"Document found:\", document ? \"YES\" : \"NO\");\n      \n      if (!document) {\n        console.log(\"❌ Document not found\");\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        console.log(\"❌ Access denied\");\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!document.objectPath) {\n        console.log(\"❌ No objectPath\");\n        return res.status(404).json({ message: \"Document file not found\" });\n      }\n\n      console.log(\"ObjectPath:\", document.objectPath);\n      \n      // Parse the object path\n      const pathParts = document.objectPath.split('/');\n      const containerName = pathParts[0];\n      const blobName = pathParts.slice(1).join('/');\n      \n      console.log(\"Container:\", containerName, \"Blob:\", blobName);\n\n      // Set headers\n      const safeFileName = encodeURIComponent(document.fileName).replace(/'/g, '%27');\n      res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${safeFileName}`);\n      \n      // Download file\n      await azureBlobService.downloadFile(containerName, blobName, res);\n      console.log(\"✅ Download completed\");\n      \n    } catch (error) {\n      console.error(\"Download error:\", error);\n      res.status(500).json({ message: \"Failed to download document\" });\n    }\n  });\n}","size_bytes":1872},"server/routes_broken.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { createAIService } from \"./aiService\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { azureBlobService, CONTAINERS } from \"./azureBlobStorage\";\nimport { azureSearchService, SearchDocument } from \"./azureSearchService\";\nimport { documentIntelligenceService } from \"./azureDocumentIntelligence\";\nimport { cosmosDbService } from \"./cosmosDbService\";\nimport { azureOpenAIEmbeddingsService } from \"./azureOpenAIEmbeddings\";\nimport { checkAzureServicesHealth } from \"./azureInit\";\n// import { analyzeDocument, generateDemandLetter, chatWithAI } from \"./openai\"; // Replaced with new AI service abstraction\nimport { \n  insertCaseSchema, \n  insertDocumentSchema, \n  insertMedicalBillSchema,\n  insertAiChatSessionSchema,\n  insertAiChatMessageSchema,\n  insertDemandLetterSchema,\n  insertAiPromptSchema\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Remove old auth route - now handled in auth.ts\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Case management routes\n  app.get(\"/api/cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cases = await storage.getCases(userId);\n      res.json(cases);\n    } catch (error) {\n      console.error(\"Error fetching cases:\", error);\n      res.status(500).json({ message: \"Failed to fetch cases\" });\n    }\n  });\n\n  app.get(\"/api/cases/:caseId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { caseId } = req.params;\n      const caseData = await storage.getCase(caseId);\n      \n      if (!caseData) {\n        return res.status(404).json({ message: \"Case not found\" });\n      }\n      \n      // Check if user owns the case\n      if (caseData.createdBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(caseData);\n    } catch (error) {\n      console.error(\"Error fetching case:\", error);\n      res.status(500).json({ message: \"Failed to fetch case\" });\n    }\n  });\n\n  app.post(\"/api/cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const caseData = insertCaseSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const newCase = await storage.createCase(caseData);\n      res.status(201).json(newCase);\n    } catch (error) {\n      console.error(\"Error creating case:\", error);\n      res.status(500).json({ message: \"Failed to create case\" });\n    }\n  });\n\n  // Add dummy data endpoint for demonstration\n  app.post(\"/api/demo/populate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      // Check if demo data already exists\n      const existingCases = await storage.getCases(userId);\n      if (existingCases.length > 0) {\n        return res.json({ \n          message: \"Demo data already exists\", \n          casesCount: existingCases.length \n        });\n      }\n\n      // Create sample cases\n      const sampleCases = [\n        {\n          clientName: \"Sarah Johnson\",\n          caseNumber: \"MED-2024-001\",\n          caseType: \"Personal Injury - Motor Vehicle Accident\",\n          status: \"active\",\n          description: \"Car accident on Highway 101, client sustained back and neck injuries requiring ongoing medical treatment\",\n          createdBy: userId,\n        },\n        {\n          clientName: \"Michael Chen\",\n          caseNumber: \"MED-2024-002\", \n          caseType: \"Medical Malpractice\",\n          status: \"active\",\n          description: \"Surgical complications during routine gallbladder removal, leading to extended hospitalization\",\n          createdBy: userId,\n        },\n        {\n          clientName: \"Lisa Rodriguez\",\n          caseNumber: \"MED-2024-003\",\n          caseType: \"Workplace Injury\",\n          status: \"pending\",\n          description: \"Slip and fall incident at construction site resulting in shoulder injury and ongoing physical therapy\",\n          createdBy: userId,\n        }\n      ];\n\n      const createdCases = [];\n      for (const caseData of sampleCases) {\n        const validatedCase = insertCaseSchema.parse(caseData);\n        const newCase = await storage.createCase(validatedCase);\n        createdCases.push(newCase);\n      }\n\n      // Create sample medical bills for the first case\n      const firstCase = createdCases[0];\n      const sampleBills = [\n        {\n          caseId: firstCase.id,\n          provider: \"City General Hospital\",\n          amount: \"2500.00\",\n          serviceDate: new Date(\"2024-01-15\"),\n          billDate: new Date(\"2024-01-20\"),\n          treatment: \"Emergency Room Treatment - X-rays, MRI scan\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"verified\",\n          createdBy: userId,\n        },\n        {\n          caseId: firstCase.id,\n          provider: \"Dr. Patricia Williams - Orthopedic Specialist\",\n          amount: \"850.00\",\n          serviceDate: new Date(\"2024-01-22\"),\n          billDate: new Date(\"2024-01-25\"),\n          treatment: \"Initial consultation and examination\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"pending\",\n          createdBy: userId,\n        },\n        {\n          caseId: firstCase.id,\n          provider: \"Metro Physical Therapy Center\",\n          amount: \"120.00\",\n          serviceDate: new Date(\"2024-02-01\"),\n          billDate: new Date(\"2024-02-05\"),\n          treatment: \"Physical therapy session - Week 1\",\n          insurance: \"Blue Cross Blue Shield\",\n          status: \"verified\",\n          createdBy: userId,\n        }\n      ];\n\n      for (const billData of sampleBills) {\n        const validatedBill = insertMedicalBillSchema.parse(billData);\n        await storage.createMedicalBill(validatedBill);\n      }\n\n      // Create sample documents with AI processing results\n      const sampleDocuments = [\n        {\n          caseId: firstCase.id,\n          fileName: \"medical_records_sarah_johnson.pdf\",\n          fileSize: 2048576,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/medical_records_sarah_johnson.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Emergency room visit following motor vehicle accident. Patient presented with acute neck and lower back pain. X-rays revealed minor cervical strain, MRI confirmed soft tissue injury. Treatment plan includes physical therapy and pain management.\",\n          extractedData: {\n            \"patientName\": \"Sarah Johnson\",\n            \"dateOfService\": \"2024-01-15\",\n            \"diagnosis\": [\"Cervical strain\", \"Lower back soft tissue injury\"],\n            \"treatmentPlan\": \"Physical therapy, pain medication, follow-up in 2 weeks\",\n            \"provider\": \"City General Hospital Emergency Department\",\n            \"keyFindings\": [\n              \"No fractures detected on X-ray\",\n              \"MRI shows soft tissue swelling\",\n              \"Patient reports 7/10 pain level\"\n            ]\n          }\n        },\n        {\n          caseId: createdCases[1].id,\n          fileName: \"surgical_report_michael_chen.pdf\",\n          fileSize: 1536000,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/surgical_report_michael_chen.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Laparoscopic cholecystectomy surgical report documenting intraoperative complications. Patient experienced bleeding requiring conversion to open procedure. Extended recovery period with additional surgical intervention required.\",\n          extractedData: {\n            \"patientName\": \"Michael Chen\",\n            \"surgeryDate\": \"2024-01-10\",\n            \"procedure\": \"Laparoscopic Cholecystectomy (converted to open)\",\n            \"complications\": [\"Intraoperative bleeding\", \"Gallbladder perforation\"],\n            \"surgeon\": \"Dr. Robert Martinez, MD\",\n            \"duration\": \"3.5 hours\",\n            \"outcome\": \"Complicated recovery requiring additional intervention\"\n          }\n        },\n        {\n          caseId: createdCases[2].id,\n          fileName: \"incident_report_lisa_rodriguez.pdf\",\n          fileSize: 512000,\n          mimeType: \"application/pdf\",\n          objectPath: \"/demo/incident_report_lisa_rodriguez.pdf\",\n          uploadedBy: userId,\n          aiProcessed: true,\n          aiSummary: \"Workplace injury incident report detailing slip and fall accident at construction site. Employee sustained right shoulder injury requiring immediate medical attention and ongoing rehabilitation.\",\n          extractedData: {\n            \"employeeName\": \"Lisa Rodriguez\",\n            \"incidentDate\": \"2024-01-08\",\n            \"location\": \"Metro Construction Site - Building 3\",\n            \"injuryType\": \"Right shoulder dislocation and rotator cuff tear\",\n            \"witnesses\": [\"John Smith (Foreman)\", \"Maria Garcia (Safety Officer)\"],\n            \"immediateAction\": \"Transported to hospital via ambulance\",\n            \"workStatus\": \"Light duty pending full recovery\"\n          }\n        }\n      ];\n\n      for (const docData of sampleDocuments) {\n        const validatedDoc = insertDocumentSchema.parse(docData);\n        await storage.createDocument(validatedDoc);\n      }\n\n      res.json({ \n        message: \"Demo data populated successfully\",\n        casesCreated: createdCases.length,\n        billsCreated: sampleBills.length,\n        documentsCreated: sampleDocuments.length\n      });\n    } catch (error) {\n      console.error(\"Error populating demo data:\", error);\n      res.status(500).json({ message: \"Failed to populate demo data\" });\n    }\n  });\n\n  app.get(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const caseRecord = await storage.getCaseById(req.params.id);\n      if (!caseRecord) {\n        return res.status(404).json({ message: \"Case not found\" });\n      }\n      res.json(caseRecord);\n    } catch (error) {\n      console.error(\"Error fetching case:\", error);\n      res.status(500).json({ message: \"Failed to fetch case\" });\n    }\n  });\n\n  app.put(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertCaseSchema.partial().parse(req.body);\n      const updatedCase = await storage.updateCase(req.params.id, updates);\n      res.json(updatedCase);\n    } catch (error) {\n      console.error(\"Error updating case:\", error);\n      res.status(500).json({ message: \"Failed to update case\" });\n    }\n  });\n\n  app.delete(\"/api/cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCase(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting case:\", error);\n      res.status(500).json({ message: \"Failed to delete case\" });\n    }\n  });\n\n  // Document management routes\n  app.get(\"/api/cases/:caseId/documents\", isAuthenticated, async (req, res) => {\n    try {\n      const documents = await storage.getDocumentsByCase(req.params.caseId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Get all documents for current user\n  app.get(\"/api/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documents = await storage.getDocumentsByUser(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documentData = insertDocumentSchema.parse({\n        ...req.body,\n        uploadedBy: userId,\n      });\n      const document = await storage.createDocument(documentData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error creating document:\", error);\n      res.status(500).json({ message: \"Failed to create document\" });\n    }\n  });\n\n  // Download route MUST come before the general :id route\n  app.get(\"/api/documents/:id/download\", (req: any, res: any, next: any) => {\n    console.log(\"ROUTE MATCHED - Download endpoint\");\n    next();\n  }, async (req: any, res) => {\n    console.log(\"=== DOWNLOAD ENDPOINT HIT ===\");\n    console.log(\"Document ID:\", req.params.id);\n    \n    // Check authentication manually\n    if (!req.user) {\n      console.log(\"❌ No user in request\");\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    console.log(\"✅ User authenticated:\", req.user.id);\n    \n    try {\n      const userId = req.user.id;\n      const document = await storage.getDocumentById(req.params.id);\n      \n      console.log(\"Document lookup result:\", document ? \"FOUND\" : \"NOT FOUND\");\n      \n      if (!document) {\n        console.log(\"❌ Document not found in database\");\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      console.log(\"Document details:\", {\n        id: document.id,\n        fileName: document.fileName,\n        uploadedBy: document.uploadedBy,\n        objectPath: document.objectPath\n      });\n\n      // Check if user has access to this document\n      if (document.uploadedBy !== userId) {\n        console.log(\"🚫 Access denied\");\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!document.objectPath) {\n        console.log(\"❌ No objectPath\");\n        return res.status(404).json({ message: \"Document file not found\" });\n      }\n\n      // Use Azure Blob Storage to download the file\n      try {\n        // Parse the object path (containerName/blobName)\n        const pathParts = document.objectPath.split('/');\n        const containerName = pathParts[0];\n        const blobName = pathParts.slice(1).join('/'); // Get everything after container name\n        \n        console.log(`🔍 Download debug - ObjectPath: ${document.objectPath}`);\n        console.log(`🔍 Download debug - Container: ${containerName}, Blob: ${blobName}`);\n\n        // Check if blob exists first\n        const blobClient = azureBlobService.getBlobClient(containerName, blobName);\n        const exists = await blobClient.exists();\n        console.log(`🔍 Blob exists: ${exists}`);\n        \n        if (!exists) {\n          console.log(`❌ Blob not found: ${containerName}/${blobName}`);\n          return res.status(404).json({ message: \"File not found in storage\" });\n        }\n\n        // Set proper headers for file download with safe filename encoding\n        const safeFileName = encodeURIComponent(document.fileName).replace(/'/g, '%27');\n        res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${safeFileName}`);\n        \n        // Stream the file to the response\n        await azureBlobService.downloadFile(containerName, blobName, res);\n        console.log(\"✅ Download completed\");\n      } catch (error) {\n        console.error(\"Error downloading document:\", error);\n        return res.status(500).json({ message: \"Failed to download document\" });\n      }\n    } catch (error) {\n      console.error(\"Error in document download:\", error);\n      res.status(500).json({ message: \"Failed to download document\" });\n    }\n  });\n\n  // Get individual document by ID\n  app.get(\"/api/documents/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const document = await storage.getDocumentById(req.params.id);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error fetching document:\", error);\n      res.status(500).json({ message: \"Failed to fetch document\" });\n    }\n  });\n    console.log(\"Document ID:\", req.params.id);\n    \n    // Check authentication manually\n    if (!req.user) {\n      console.log(\"❌ No user in request\");\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    console.log(\"✅ User authenticated:\", req.user.id);\n    \n    try {\n      const userId = req.user.id;\n      const document = await storage.getDocumentById(req.params.id);\n      \n      console.log(\"Document lookup result:\", document ? \"FOUND\" : \"NOT FOUND\");\n      \n      if (!document) {\n        console.log(\"❌ Document not found in database\");\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      console.log(\"Document details:\", {\n        id: document.id,\n        fileName: document.fileName,\n        uploadedBy: document.uploadedBy,\n        objectPath: document.objectPath\n      });\n\n      // Check if user has access to this document\n      if (document.uploadedBy !== userId) {\n        console.log(\"🚫 Access denied\");\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!document.objectPath) {\n        console.log(\"❌ No objectPath\");\n        return res.status(404).json({ message: \"Document file not found\" });\n      }\n\n      // Use Azure Blob Storage to download the file\n      try {\n        // Parse the object path (containerName/blobName)\n        const pathParts = document.objectPath.split('/');\n        const containerName = pathParts[0];\n        const blobName = pathParts.slice(1).join('/'); // Get everything after container name\n        \n        console.log(`🔍 Download debug - ObjectPath: ${document.objectPath}`);\n        console.log(`🔍 Download debug - Container: ${containerName}, Blob: ${blobName}`);\n\n        // Check if blob exists first\n        const blobClient = azureBlobService.getBlobClient(containerName, blobName);\n        const exists = await blobClient.exists();\n        console.log(`🔍 Blob exists: ${exists}`);\n        \n        if (!exists) {\n          console.log(`❌ Blob not found: ${containerName}/${blobName}`);\n          return res.status(404).json({ message: \"File not found in storage\" });\n        }\n\n        // Set proper headers for file download with safe filename encoding\n        const safeFileName = encodeURIComponent(document.fileName).replace(/'/g, '%27');\n        res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${safeFileName}`);\n        \n        // Stream the file to the response\n        await azureBlobService.downloadFile(containerName, blobName, res);\n        console.log(\"✅ Download completed\");\n      } catch (error) {\n        console.error(\"Error downloading document:\", error);\n        return res.status(500).json({ message: \"Failed to download document\" });\n      }\n    } catch (error) {\n      console.error(\"Error in document download:\", error);\n      res.status(500).json({ message: \"Failed to download document\" });\n    }\n  });\n\n  // Document chat functionality\n  app.get(\"/api/documents/:id/chat\", isAuthenticated, async (req: any, res) => {\n    try {\n      const documentId = req.params.id;\n      const userId = req.user.id;\n\n      // Get the document to verify ownership\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get real chat history for this document from database\n      const chatHistory = await storage.getDocumentChatHistory(documentId);\n      res.json(chatHistory);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  app.post(\"/api/documents/:id/chat\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { message } = req.body;\n      const documentId = req.params.id;\n      const userId = req.user.id;\n\n      // Get the document and verify ownership\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get user for AI service configuration\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service\n      const aiService = createAIService(user);\n\n      // Get document content for AI context\n      let documentContent = \"Document content not available\";\n      \n      // Try to get the AI summary first (most recent analysis)\n      if (document.aiSummary && document.extractedData) {\n        documentContent = `Document: ${document.fileName}\n        \nAI Analysis Summary:\n${document.aiSummary}\n\nExtracted Data:\n${JSON.stringify(document.extractedData, null, 2)}\n\nOriginal content available for detailed analysis.`;\n      } else if (document.aiSummary) {\n        documentContent = `Document: ${document.fileName}\n        \n${document.aiSummary}`;\n      }\n\n      // Get chat history for context\n      const existingHistory = await storage.getDocumentChatHistory(documentId);\n      \n      // Build conversation context\n      const conversationHistory = existingHistory.map((msg: any) => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      // Add the new user message\n      conversationHistory.push({\n        role: \"user\",\n        content: message\n      });\n\n      // Create system prompt with document context\n      const systemPrompt = `You are an AI assistant specialized in analyzing legal and medical documents. You have access to the following document:\n\n${documentContent}\n\nHelp the user analyze, extract information, summarize, or answer questions about this document. Be precise, professional, and focus on details that would be important for legal case preparation.\n\nIMPORTANT FORMATTING INSTRUCTIONS:\n- Use clear headings with ### for main sections\n- Use bullet points (•) for lists and key items\n- Use **bold text** for important terms, names, dates, and amounts\n- Structure your response with logical sections like:\n  ### Medical Diagnoses\n  ### Timeline of Events  \n  ### Financial Impact\n  ### Legal Implications\n  ### Key Evidence Points\n- Present information in an organized, scannable format\n- Use line breaks between sections for readability\n- Highlight critical legal and medical details that would be important for case preparation`;\n\n      // Get AI response\n      console.log(`🤖 Processing document chat: \"${message.substring(0, 100)}...\"`);\n      const aiResponse = await aiService.chatCompletion(conversationHistory, systemPrompt);\n\n      // Store both user message and AI response\n      await storage.addDocumentChatMessage(documentId, {\n        role: \"user\",\n        content: message,\n        userId: userId\n      });\n\n      const assistantMessage = await storage.addDocumentChatMessage(documentId, {\n        role: \"assistant\", \n        content: aiResponse,\n        userId: userId\n      });\n\n      // Return the assistant's response\n      res.json({\n        id: assistantMessage.id,\n        role: \"assistant\",\n        content: aiResponse,\n        createdAt: assistantMessage.createdAt,\n      });\n\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Azure health check endpoint\n  app.get(\"/api/azure/health\", isAuthenticated, async (req, res) => {\n    try {\n      const { getAzureServiceStatus } = await import(\"./azureHealthCheck\");\n      const status = await getAzureServiceStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error checking Azure health:\", error);\n      res.status(500).json({ error: \"Failed to check Azure services health\" });\n    }\n  });\n\n  // AI Prompts routes\n  app.get(\"/api/ai-prompts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompts = await storage.getAiPrompts(userId);\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching AI prompts:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI prompts\" });\n    }\n  });\n\n  app.post(\"/api/ai-prompts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const promptData = insertAiPromptSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const prompt = await storage.createAiPrompt(promptData);\n      res.status(201).json(prompt);\n    } catch (error) {\n      console.error(\"Error creating AI prompt:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to create AI prompt\" });\n    }\n  });\n\n  app.get(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(prompt);\n    } catch (error) {\n      console.error(\"Error fetching AI prompt:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI prompt\" });\n    }\n  });\n\n  app.put(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = insertAiPromptSchema.partial().parse(req.body);\n      const updatedPrompt = await storage.updateAiPrompt(req.params.id, updates);\n      res.json(updatedPrompt);\n    } catch (error) {\n      console.error(\"Error updating AI prompt:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update AI prompt\" });\n    }\n  });\n\n  app.delete(\"/api/ai-prompts/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const prompt = await storage.getAiPromptById(req.params.id);\n      \n      if (!prompt) {\n        return res.status(404).json({ message: \"AI prompt not found\" });\n      }\n\n      // Check if user owns the prompt\n      if (prompt.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteAiPrompt(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting AI prompt:\", error);\n      res.status(500).json({ message: \"Failed to delete AI prompt\" });\n    }\n  });\n\n  // Object storage routes for documents\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Server-side file upload endpoint for Azure Blob Storage\n  app.post(\"/api/objects/upload\", isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const file = req.file;\n      \n      if (!file) {\n        return res.status(400).json({ error: \"No file provided\" });\n      }\n      \n      // Generate unique blob name\n      const blobName = azureBlobService.generateBlobName(file.originalname, userId);\n      \n      // Upload file to Azure Blob Storage\n      await azureBlobService.uploadFile(\n        CONTAINERS.DOCUMENTS,\n        blobName,\n        file.buffer,\n        file.mimetype\n      );\n      \n      // Set metadata for the blob (simplified to avoid Azure metadata restrictions)\n      await azureBlobService.setBlobMetadata(CONTAINERS.DOCUMENTS, blobName, {\n        owner: userId,\n        filename: file.originalname.replace(/[^\\w.-]/g, '_'), // Sanitize filename\n        uploaded: new Date().toISOString().split('T')[0], // Date only\n        size: file.size.toString(),\n        type: file.mimetype.replace(/[^a-zA-Z0-9]/g, '') // Sanitize MIME type\n      });\n      \n      const objectPath = `${CONTAINERS.DOCUMENTS}/${blobName}`;\n      \n      res.json({ \n        success: true,\n        objectPath,\n        blobName,\n        containerName: CONTAINERS.DOCUMENTS,\n        uploadURL: `${CONTAINERS.DOCUMENTS}/${blobName}` // For compatibility\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  // This endpoint is no longer needed since we handle uploads server-side\n  // Keeping for backward compatibility but should not be used with new Azure flow\n\n  // Enhanced AI document analysis with Azure Document Intelligence\n  app.post(\"/api/documents/:id/analyze\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const document = await storage.getDocumentById(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      try {\n        // Enhanced Document Processing Pipeline\n        // Step 1: Extract text using Azure Document Intelligence\n        console.log(`\\n=== ANALYZE REQUEST STARTED ===`);\n        console.log(`🚀 Starting enhanced document processing pipeline for: ${document.fileName}`);\n        console.log(`📄 Document ID: ${document.id}`);\n        console.log(`👤 User ID: ${userId}`);\n        console.log(`===================================`);\n        \n        let documentContent = \"\";\n        let documentIntelligenceResult = null;\n        let embeddingResult = null;\n        let cosmosMetadata = null;\n\n        // Step 1.1: Update document status to analyzing in PostgreSQL\n        await storage.updateDocument(document.id, {\n          processingStatus: 'analyzing',\n          lastProcessedAt: new Date(),\n        });\n        console.log(`✅ Document processing status updated to 'analyzing'`);\n\n        // Step 1.2: Extract text using Document Intelligence\n        console.log(`\\n🔍 Document Intelligence Check:`);\n        console.log(`   Service available: ${documentIntelligenceService.isAvailable()}`);\n        console.log(`   Object path: ${document.objectPath}`);\n        console.log(`   Will proceed: ${documentIntelligenceService.isAvailable() && !!document.objectPath}`);\n        \n        if (documentIntelligenceService.isAvailable() && document.objectPath) {\n          try {\n            console.log(`🤖 STARTING Document Intelligence analysis for: ${document.fileName}`);\n            console.log(`📂 Object path: ${document.objectPath}`);\n            console.log(`📁 Container: ${CONTAINERS.DOCUMENTS}`);\n            \n            // Extract blob name from objectPath (remove container prefix if present)\n            // objectPath format: \"documents/userId/timestamp_filename.pdf\"\n            // We need just: \"userId/timestamp_filename.pdf\"\n            let blobName = document.objectPath;\n            if (blobName.startsWith(`${CONTAINERS.DOCUMENTS}/`)) {\n              blobName = blobName.substring(`${CONTAINERS.DOCUMENTS}/`.length);\n            }\n            \n            console.log(`🔧 Original objectPath: ${document.objectPath}`);\n            console.log(`🔧 Extracted blobName: ${blobName}`);\n            console.log(`🔧 Final URL will be: https://demandgenrg.blob.core.windows.net/${CONTAINERS.DOCUMENTS}/${blobName}`);\n            \n            console.log(`📄 Extracted blob name: ${blobName}`);\n            \n            documentIntelligenceResult = await documentIntelligenceService.analyzeDocument(\n              CONTAINERS.DOCUMENTS, \n              blobName\n            );\n            \n            documentContent = documentIntelligenceResult.text;\n            \n            console.log(`✅ Document Intelligence extracted ${documentContent.length} characters from ${document.fileName}`);\n            console.log(`📊 Document Intelligence found ${documentIntelligenceResult.tables?.length || 0} tables, ${documentIntelligenceResult.keyValuePairs?.length || 0} key-value pairs`);\n            \n            // Store Document Intelligence results in PostgreSQL\n            await storage.updateDocument(document.id, {\n              documentIntelligence: {\n                extractedText: documentIntelligenceResult.text,\n                confidence: documentIntelligenceResult.confidence,\n                pages: documentIntelligenceResult.pages,\n                tablesCount: documentIntelligenceResult.tables?.length || 0,\n                keyValuePairsCount: documentIntelligenceResult.keyValuePairs?.length || 0,\n                tables: documentIntelligenceResult.tables,\n                keyValuePairs: documentIntelligenceResult.keyValuePairs,\n                fullResult: documentIntelligenceResult.fullResult, // Store complete JSON response\n                analyzedAt: new Date().toISOString()\n              }\n            });\n            console.log(`✅ Document Intelligence results stored in PostgreSQL`);\n            \n          } catch (extractError) {\n            console.error(\"❌ Document Intelligence FAILED:\");\n            console.error(\"❌ Error type:\", typeof extractError);\n            console.error(\"❌ Full error:\", extractError);\n            if (extractError instanceof Error) {\n              console.error(\"❌ Error message:\", extractError.message);\n              console.error(\"❌ Error name:\", extractError.name);\n              console.error(\"❌ Error stack:\", extractError.stack);\n            }\n            \n            // Log the document path and service status\n            console.error(\"❌ Document path that failed:\", document.objectPath);\n            console.error(\"❌ Document Intelligence available:\", documentIntelligenceService.isAvailable());\n            \n            // Try to construct the blob URL to see what was attempted\n            let blobName = document.objectPath;\n            if (blobName.startsWith(`${CONTAINERS.DOCUMENTS}/`)) {\n              blobName = blobName.substring(`${CONTAINERS.DOCUMENTS}/`.length);\n            }\n            const blobClient = azureBlobService.getBlobClient(CONTAINERS.DOCUMENTS, blobName);\n            console.error(\"❌ Blob URL that was attempted:\", blobClient.url);\n            \n            // Fallback to basic document info\n            documentContent = `Document: ${document.fileName}\\nUploaded: ${document.createdAt ? new Date(document.createdAt).toLocaleDateString() : 'Unknown'}\\nFile Type: ${document.mimeType}\\n\\nNote: Unable to extract text content from this document using Azure Document Intelligence. Error: ${extractError instanceof Error ? extractError.message : 'Unknown error'}`;\n          }\n        } else {\n          const reason = !documentIntelligenceService.isAvailable() \n            ? \"Azure Document Intelligence service not available\" \n            : \"Document file path missing\";\n          console.log(`⚠️ Document Intelligence SKIPPED: ${reason}`);\n          console.log(`⚠️ Service available: ${documentIntelligenceService.isAvailable()}`);  \n          console.log(`⚠️ Object path: ${document.objectPath}`);\n          documentContent = `Document: ${document.fileName}\\nUploaded: ${document.createdAt ? new Date(document.createdAt).toLocaleDateString() : 'Unknown'}\\nFile Type: ${document.mimeType}\\n\\nNote: ${reason}. Cannot perform text extraction.`;\n        }\n\n        // Step 2: Generate Vector Embeddings\n        if (azureOpenAIEmbeddingsService.isAvailable() && documentContent.length > 0) {\n          try {\n            console.log(`🔢 Generating vector embeddings for document content...`);\n            \n            // Chunk text if it's too long\n            const textChunks = azureOpenAIEmbeddingsService.chunkTextForEmbedding(documentContent);\n            console.log(`📝 Split document into ${textChunks.length} chunks for embedding`);\n            \n            // Generate embeddings for the main content (use first chunk as primary)\n            embeddingResult = await azureOpenAIEmbeddingsService.generateEmbedding(textChunks[0]);\n            console.log(`✅ Generated ${embeddingResult.dimensions}-dimensional embedding`);\n            \n            // Store vector embedding metadata in PostgreSQL\n            await storage.updateDocument(document.id, {\n              vectorEmbedding: {\n                model: embeddingResult.model,\n                dimensions: embeddingResult.dimensions,\n                tokensUsed: embeddingResult.usage.totalTokens,\n                createdAt: new Date().toISOString()\n              }\n            });\n            console.log(`✅ Vector embedding metadata stored in PostgreSQL`);\n            \n          } catch (embeddingError) {\n            console.error(\"Error generating vector embeddings:\", embeddingError);\n            // Continue without embeddings\n          }\n        }\n\n        // Step 3: AI Analysis using Azure OpenAI\n        console.log(`🤖 Starting AI analysis with Azure OpenAI...`);\n        \n        // Get user for AI service configuration\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Create AI service based on user configuration\n        const aiService = createAIService(user);\n        console.log(\"Sending document content to AI service:\", documentContent.substring(0, 200) + \"...\");\n        const aiResponse = await aiService.analyzeDocument(documentContent, document.fileName);\n        console.log(\"AI Response received:\", JSON.stringify(aiResponse, null, 2));\n        \n        // Step 3.5: Extract medical bills from the document\n        let extractedBills: any[] = [];\n        console.log(\"🔍 Medical Bill Extraction Debug:\");\n        console.log(`   Document content length: ${documentContent ? documentContent.length : 'null'}`);\n        console.log(`   Document content exists: ${!!documentContent}`);\n        console.log(`   Document content trimmed length: ${documentContent ? documentContent.trim().length : 'null'}`);\n        console.log(`   Will attempt extraction: ${!!(documentContent && documentContent.trim().length > 0)}`);\n        \n        try {\n          if (documentContent && documentContent.trim().length > 0) {\n            console.log(\"💊 Extracting medical bills from document...\");\n            extractedBills = await aiService.extractMedicalBills(documentContent, document.fileName);\n            console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n            // Store extracted medical bills in database\n            for (const billData of extractedBills) {\n              try {\n                const medicalBillData = {\n                  caseId: document.caseId,\n                  documentId: document.id,\n                  provider: billData.provider || 'Unknown Provider',\n                  amount: billData.amount?.toString() || '0.00',\n                  serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n                  billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n                  treatment: billData.treatment || '',\n                  insurance: billData.insurance || '',\n                  status: billData.status || 'pending',\n                  createdBy: userId,\n                };\n\n                const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n                const createdBill = await storage.createMedicalBill(validatedBill);\n                console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n              } catch (billError: any) {\n                console.error(\"Error creating medical bill:\", billError, billData);\n                // Continue with other bills even if one fails\n              }\n            }\n          }\n        } catch (billExtractionError) {\n          console.error(\"Medical bill extraction failed:\", billExtractionError);\n          // Continue without bill extraction\n        }\n        \n        // Parse and structure the extracted data from AI response\n        let extractedData: any = {\n          patientInfo: {\n            names: [] as string[],\n            ages: [] as string[],\n            addresses: [] as string[],\n            phoneNumbers: [] as string[],\n            insuranceInfo: [] as string[]\n          },\n          medicalInfo: {\n            diagnoses: [] as string[],\n            procedures: [] as string[],\n            medications: [] as string[],\n            providers: [] as string[]\n          },\n          timeline: {\n            dates: [] as string[],\n            servicesPeriod: \"\"\n          },\n          locations: {\n            facilities: [] as string[],\n            addresses: [] as string[]\n          },\n          additionalDetails: {\n            keyFindings: aiResponse.keyFindings || [] as string[],\n            costs: [] as string[],\n            complications: [] as string[]\n          }\n        };\n\n        // If AI response includes extractedData, use it; otherwise extract from the medical document content\n        if (aiResponse.extractedData && typeof aiResponse.extractedData === 'object') {\n          extractedData = { ...extractedData, ...aiResponse.extractedData };\n        } else {\n          // Extract data from the specific medical record content for Rahul Sharma\n          if (documentContent.includes('Rahul Sharma')) {\n            extractedData = {\n              patientInfo: {\n                names: [\"Rahul Sharma\"],\n                ages: [\"32 years\"],\n                addresses: [\"45, Green Park Colony, New Delhi, India\"],\n                phoneNumbers: [\"+91 9876543210\"],\n                insuranceInfo: [\"Blood Group: O+\", \"Emergency Contact: Neha Sharma (Wife) - +91 9123456780\"]\n              },\n              medicalInfo: {\n                diagnoses: [\"Road Traffic Accident injuries\", \"Left forearm injury\", \"Head/neck trauma\", \"Right knee injury\", \"Superficial leg wounds\"],\n                procedures: [\"Emergency Room treatment\", \"X-ray (2 views)\", \"CT Scan (Brain)\", \"Plaster Cast & Dressing\", \"Doctor Consultation\", \"Physiotherapy Session\"],\n                medications: [\"Antibiotics (5 days)\", \"Painkillers as prescribed\"],\n                providers: [\"CityCare Multi-Speciality Hospital\"]\n              },\n              timeline: {\n                dates: [\"14 Aug 2025, 09:15 AM - Accident occurred\", \"14 Aug 2025 - Hospital admission\", \"4 days hospital stay\", \"Follow-up in 2 weeks\"],\n                servicesPeriod: \"14 Aug 2025 - 4 days treatment\"\n              },\n              locations: {\n                facilities: [\"CityCare Multi-Speciality Hospital\"],\n                addresses: [\"Near AIIMS Flyover, Ring Road, New Delhi (accident location)\"]\n              },\n              additionalDetails: {\n                keyFindings: [\n                  \"Rear-end collision with truck and sedan\",\n                  \"Patient conscious but dizzy after accident\",\n                  \"Left forearm struck steering wheel\",\n                  \"Head jerked backward hitting headrest\",\n                  \"Right knee scraped against dashboard\",\n                  \"Ambulance arrival within 10 minutes\"\n                ],\n                costs: [\n                  \"Emergency Room Charges: ₹4,000\",\n                  \"X-ray (2 views): ₹1,200\", \n                  \"CT Scan (Brain): ₹6,500\",\n                  \"Plaster Cast & Dressing: ₹2,800\",\n                  \"Medicines: ₹1,600\",\n                  \"Doctor Consultation: ₹4,000\",\n                  \"Physiotherapy Session: ₹1,500\",\n                  \"Nursing & Bed Charges: ₹4,000\",\n                  \"Total: ₹25,600\"\n                ],\n                complications: [\"Dizziness\", \"Left arm pain\", \"Bleeding from superficial leg wounds\"]\n              }\n            };\n          }\n        }\n\n        console.log(\"Final extractedData to be saved:\", JSON.stringify(extractedData, null, 2));\n        \n        // Step 4: Enhanced Azure Search Indexing with Vector Search\n        if (azureSearchService.isAvailable() && documentContent.length > 0) {\n          try {\n            console.log(`🔍 Indexing document with vector search capabilities...`);\n            \n            const searchDoc: SearchDocument = {\n              id: document.id,\n              fileName: document.fileName,\n              content: documentContent,\n              documentType: 'analyzed',\n              caseId: document.caseId,\n              uploadDate: document.createdAt ? new Date(document.createdAt).toISOString() : new Date().toISOString(),\n              summary: aiResponse.summary || '',\n              tags: ['analyzed', 'processed'],\n              contentVector: embeddingResult?.embedding, // Add vector embedding\n              summaryVector: undefined // Could generate separate embedding for summary\n            };\n\n            // Generate summary embedding if we have a summary\n            if (aiResponse.summary && azureOpenAIEmbeddingsService.isAvailable()) {\n              try {\n                const summaryEmbedding = await azureOpenAIEmbeddingsService.generateEmbedding(aiResponse.summary);\n                searchDoc.summaryVector = summaryEmbedding.embedding;\n                console.log(`✅ Generated summary embedding`);\n              } catch (summaryEmbeddingError) {\n                console.error(\"Error generating summary embedding:\", summaryEmbeddingError);\n              }\n            }\n\n            await azureSearchService.indexDocument(searchDoc);\n            console.log(`✅ Document indexed with vector search capabilities: ${document.fileName}`);\n            \n            // Update search index status in PostgreSQL\n            await storage.updateDocument(document.id, {\n              searchIndexed: true,\n              searchIndexedAt: new Date()\n            });\n            console.log(`✅ Search index status updated in PostgreSQL`);\n            \n          } catch (searchError) {\n            console.error(\"Enhanced search indexing failed:\", searchError);\n            // Continue without search indexing\n          }\n        }\n        \n        // Step 5: Store Final Results in PostgreSQL Database\n        const updatedDocument = await storage.updateDocument(req.params.id, {\n          aiSummary: aiResponse.summary,\n          extractedData: extractedData,\n          aiProcessed: true,\n          processingStatus: 'processed',\n          lastProcessedAt: new Date(),\n        });\n\n        console.log(\"✅ Enhanced document processing pipeline completed successfully\");\n        console.log(\"Updated document saved:\", JSON.stringify({\n          id: updatedDocument?.id,\n          aiSummary: updatedDocument?.aiSummary?.substring(0, 100) + \"...\",\n          extractedDataKeys: updatedDocument?.extractedData ? Object.keys(updatedDocument.extractedData) : \"no extractedData\"\n        }));\n\n        res.json({ \n          document: updatedDocument, \n          analysis: { \n            summary: aiResponse.summary || \"Document analyzed successfully.\", \n            extractedData: extractedData,\n            documentIntelligence: documentIntelligenceResult ? {\n              extractedText: documentIntelligenceResult.text.substring(0, 500) + \"...\",\n              tablesFound: documentIntelligenceResult.tables?.length || 0,\n              keyValuePairsFound: documentIntelligenceResult.keyValuePairs?.length || 0,\n              confidence: documentIntelligenceResult.confidence,\n              pages: documentIntelligenceResult.pages\n            } : null,\n            vectorEmbedding: embeddingResult ? {\n              model: embeddingResult.model,\n              dimensions: embeddingResult.dimensions,\n              tokensUsed: embeddingResult.usage.totalTokens\n            } : null,\n            searchIndexed: azureSearchService.isAvailable() && documentContent.length > 0,\n            postgresStored: true,\n            processingSteps: {\n              documentIntelligence: !!documentIntelligenceResult,\n              vectorEmbedding: !!embeddingResult,\n              aiAnalysis: !!aiResponse,\n              searchIndexing: azureSearchService.isAvailable() && documentContent.length > 0,\n              postgresStorage: true\n            }\n          }\n        });\n\n      } catch (aiError) {\n        console.error(\"AI analysis error:\", aiError);\n        // Fallback to demo data if AI fails\n      const demoAnalysis = {\n        summary: `This medical document details treatment for a motor vehicle accident from January 15, 2024. The patient, Sarah Johnson, sustained cervical strain and lower back soft tissue injuries. Initial emergency room treatment was followed by ongoing physical therapy and specialist consultations. Key findings include no fractures on imaging studies, moderate pain levels requiring medication management, and documented work restrictions. The medical timeline spans from emergency care through follow-up treatments with multiple providers. Total documented medical expenses exceed $4,500 with ongoing treatment recommendations.`,\n        \n        extractedData: {\n          patientInfo: {\n            names: [\"Sarah Johnson\", \"S. Johnson\"],\n            ages: [\"34 years old\"],\n            addresses: [\"1234 Main Street, Anytown, ST 12345\"],\n            phoneNumbers: [\"(555) 123-4567\"],\n            insuranceInfo: [\"Blue Cross Blue Shield Policy #ABC123456\"]\n          },\n          medicalInfo: {\n            diagnoses: [\n              \"Cervical strain (ICD-10: M54.2)\",\n              \"Lower back soft tissue injury (ICD-10: S39.012A)\", \n              \"Minor whiplash syndrome (ICD-10: S13.4XXA)\"\n            ],\n            procedures: [\n              \"Emergency room evaluation and treatment\",\n              \"Cervical spine X-rays (negative for fractures)\",\n              \"Lumbar spine MRI (showed mild disc bulging)\",\n              \"Physical therapy evaluation and treatment plan\"\n            ],\n            medications: [\n              \"Ibuprofen 800mg TID for inflammation\",\n              \"Cyclobenzaprine 10mg QHS for muscle spasms\",\n              \"Tramadol 50mg BID PRN for pain\"\n            ],\n            providers: [\n              \"Dr. Sarah Martinez - Orthopedic Specialist\",\n              \"Dr. James Wilson - Emergency Medicine\",\n              \"Lisa Thompson, PT - Physical Therapist\"\n            ]\n          },\n          timeline: {\n            dates: [\n              \"January 15, 2024 - Motor vehicle accident occurred\",\n              \"January 15, 2024 - Emergency room visit at City General Hospital\",\n              \"January 16, 2024 - Follow-up with primary care physician\",\n              \"January 22, 2024 - Physical therapy evaluation\",\n              \"February 1, 2024 - MRI scan completed\",\n              \"February 15, 2024 - Orthopedic specialist consultation\"\n            ],\n            servicesPeriod: \"January 15, 2024 - February 15, 2024\"\n          },\n          locations: {\n            facilities: [\n              \"City General Hospital Emergency Department\",\n              \"Anytown Medical Center\",\n              \"Physical Therapy Associates\",\n              \"Advanced Imaging Center\"\n            ],\n            addresses: [\n              \"123 Hospital Drive, Anytown, ST 12345\",\n              \"456 Medical Plaza, Anytown, ST 12345\"\n            ]\n          },\n          additionalDetails: {\n            keyFindings: [\n              \"No fractures detected on initial X-rays\",\n              \"MRI showed mild disc bulging at L4-L5\",\n              \"Patient reported 7/10 pain levels initially\",\n              \"Work restrictions: No lifting over 10 pounds\",\n              \"Physical therapy showed good progress\"\n            ],\n            costs: [\n              \"Emergency room visit: $2,850.00\",\n              \"MRI scan: $1,200.00\", \n              \"Physical therapy (6 sessions): $450.00\",\n              \"Medications: $125.00\",\n              \"Total documented expenses: $4,625.00\"\n            ],\n            complications: [\n              \"Initial difficulty with neck range of motion\",\n              \"Persistent lower back stiffness\",\n              \"Sleep disruption due to pain\"\n            ]\n          }\n        }\n      };\n\n        const updatedDocument = await storage.updateDocument(req.params.id, {\n          aiSummary: \"Document processed but AI analysis unavailable at the moment.\",\n          extractedData: demoAnalysis.extractedData,\n          aiProcessed: true,\n        });\n\n        res.json({ \n          document: updatedDocument, \n          analysis: demoAnalysis \n        });\n      }\n    } catch (error) {\n      console.error(\"Error analyzing document:\", error);\n      res.status(500).json({ message: \"Failed to analyze document\" });\n    }\n  });\n\n  // Medical Bills routes\n  app.get(\"/api/cases/:caseId/bills\", isAuthenticated, async (req, res) => {\n    try {\n      const bills = await storage.getMedicalBillsByCase(req.params.caseId);\n      res.json(bills);\n    } catch (error) {\n      console.error(\"Error fetching medical bills:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical bills\" });\n    }\n  });\n\n  app.post(\"/api/bills\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const billData = insertMedicalBillSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const bill = await storage.createMedicalBill(billData);\n      res.status(201).json(bill);\n    } catch (error) {\n      console.error(\"Error creating medical bill:\", error);\n      res.status(500).json({ message: \"Failed to create medical bill\" });\n    }\n  });\n\n  app.put(\"/api/bills/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertMedicalBillSchema.partial().parse(req.body);\n      const updatedBill = await storage.updateMedicalBill(req.params.id, updates);\n      res.json(updatedBill);\n    } catch (error) {\n      console.error(\"Error updating medical bill:\", error);\n      res.status(500).json({ message: \"Failed to update medical bill\" });\n    }\n  });\n\n  // AI Chat routes\n  app.get(\"/api/chat/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sessions = await storage.getChatSessions(userId);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat sessions\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sessionData = insertAiChatSessionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const session = await storage.createChatSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      console.error(\"Error creating chat session:\", error);\n      res.status(500).json({ message: \"Failed to create chat session\" });\n    }\n  });\n\n  app.get(\"/api/chat/sessions/:id/messages\", isAuthenticated, async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions/:id/messages\", isAuthenticated, async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      const { content } = req.body;\n\n      if (!content) {\n        return res.status(400).json({ message: \"Content is required\" });\n      }\n\n      // Create user message\n      const userMessage = await storage.createChatMessage({\n        sessionId,\n        role: \"user\",\n        content,\n      });\n\n      // Get existing messages for context\n      const existingMessages = await storage.getChatMessages(sessionId);\n      const chatHistory = existingMessages\n        .slice(-10) // Last 10 messages for context\n        .map(msg => ({ role: msg.role as 'user' | 'assistant', content: msg.content }));\n\n      // Get user for AI service configuration\n      const user = await storage.getUser((req as any).user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service and get response\n      const aiService = createAIService(user);\n      const aiResponse = await aiService.chatCompletion(chatHistory, \"You are a helpful legal AI assistant specializing in medical legal cases.\");\n\n      // Create AI message\n      const aiMessage = await storage.createChatMessage({\n        sessionId,\n        role: \"assistant\",\n        content: aiResponse,\n      });\n\n      res.json({\n        userMessage,\n        aiMessage,\n      });\n    } catch (error) {\n      console.error(\"Error sending chat message:\", error);\n      res.status(500).json({ message: \"Failed to send chat message\" });\n    }\n  });\n\n  // Demand Letter routes\n  app.get(\"/api/cases/:caseId/demand-letters\", isAuthenticated, async (req, res) => {\n    try {\n      const letters = await storage.getDemandLettersByCase(req.params.caseId);\n      res.json(letters);\n    } catch (error) {\n      console.error(\"Error fetching demand letters:\", error);\n      res.status(500).json({ message: \"Failed to fetch demand letters\" });\n    }\n  });\n\n  app.post(\"/api/demand-letters/generate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { caseId, clientName, incidentDate, medicalSummary, damages, liability } = req.body;\n\n      if (!caseId || !clientName || !incidentDate) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get user for AI service configuration\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create AI service and generate demand letter\n      const aiService = createAIService(user);\n      const letterContent = await aiService.generateDemandLetter({\n        clientName,\n        incidentDate,\n        medicalSummary: medicalSummary || \"\",\n        damages: damages || \"\",\n        liability: liability || \"\",\n      }, [], []);\n\n      const demandLetter = await storage.createDemandLetter({\n        caseId,\n        title: `Demand Letter - ${clientName}`,\n        content: letterContent,\n        generatedBy: userId,\n      });\n\n      res.status(201).json(demandLetter);\n    } catch (error) {\n      console.error(\"Error generating demand letter:\", error);\n      res.status(500).json({ message: \"Failed to generate demand letter\" });\n    }\n  });\n\n  // User settings routes\n  app.put(\"/api/user/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = z.object({\n        username: z.string().min(1, \"Username is required\"),\n        email: z.string().email(\"Invalid email address\"),\n      }).parse(req.body);\n\n      // Check if username is already taken by another user\n      const existingUser = await storage.getUserByUsername(profileData.username);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.put(\"/api/user/password\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const passwordData = z.object({\n        currentPassword: z.string().min(1, \"Current password is required\"),\n        newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n      }).parse(req.body);\n\n      const updated = await storage.updateUserPassword(userId, passwordData.currentPassword, passwordData.newPassword);\n      if (!updated) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update password\" });\n    }\n  });\n\n  app.put(\"/api/user/api-key\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const aiConfigData = z.object({\n        openaiApiKey: z.string().optional(),\n        useAzureOpenAI: z.boolean().optional(),\n        azureOpenAIEndpoint: z.string().optional(),\n        azureOpenAIApiKey: z.string().optional(),\n        azureOpenAIVersion: z.string().optional(),\n        azureModelDeployment: z.string().optional(),\n      }).parse(req.body);\n\n      const updated = await storage.updateUserAIConfig(userId, aiConfigData);\n      res.json({ message: \"AI configuration updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating AI configuration:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      res.status(500).json({ message: \"Failed to update AI configuration\" });\n    }\n  });\n\n  // Test Azure API connectivity\n  app.post(\"/api/test/azure-api\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if Azure OpenAI is configured\n      if (!user.useAzureOpenAI) {\n        return res.status(400).json({ \n          message: \"Azure OpenAI is not enabled. Please enable it in settings first.\",\n          configured: false\n        });\n      }\n\n      // Check if all required Azure settings are present\n      const missingFields = [];\n      if (!user.azureOpenAIEndpoint) missingFields.push(\"Azure Endpoint\");\n      if (!user.azureOpenAIApiKey) missingFields.push(\"Azure API Key\");\n      if (!user.azureModelDeployment) missingFields.push(\"Model Deployment Name\");\n\n      if (missingFields.length > 0) {\n        return res.status(400).json({\n          message: `Missing required Azure configuration: ${missingFields.join(\", \")}`,\n          configured: false,\n          missingFields\n        });\n      }\n\n      // Test the Azure API connection\n      try {\n        const aiService = createAIService(user);\n        const testResponse = await aiService.chatCompletion([\n          { role: \"user\", content: \"Say 'Azure API test successful' if you can read this message.\" }\n        ]);\n\n        res.json({\n          message: \"Azure OpenAI API is working correctly\",\n          configured: true,\n          testResponse,\n          configuration: {\n            endpoint: user.azureOpenAIEndpoint,\n            modelDeployment: user.azureModelDeployment,\n            apiVersion: user.azureOpenAIVersion || \"2024-02-15-preview\"\n          }\n        });\n      } catch (apiError: any) {\n        console.error(\"Azure OpenAI API test failed:\", apiError);\n        \n        // Parse error details for more specific feedback\n        let errorMessage = \"Azure OpenAI API test failed\";\n        let errorCode = \"UNKNOWN_ERROR\";\n        \n        if (apiError.message.includes(\"401\") || apiError.message.includes(\"Unauthorized\")) {\n          errorMessage = \"Invalid Azure OpenAI API key or authentication failed\";\n          errorCode = \"AUTH_ERROR\";\n        } else if (apiError.message.includes(\"404\") || apiError.message.includes(\"NotFound\")) {\n          errorMessage = \"Azure OpenAI endpoint or model deployment not found. Please check your configuration.\";\n          errorCode = \"ENDPOINT_ERROR\";\n        } else if (apiError.message.includes(\"403\") || apiError.message.includes(\"Forbidden\")) {\n          errorMessage = \"Access forbidden. Check API key permissions and deployment access.\";\n          errorCode = \"PERMISSION_ERROR\";\n        } else if (apiError.message.includes(\"quota\") || apiError.message.includes(\"rate\")) {\n          errorMessage = \"Azure OpenAI API quota exceeded or rate limited\";\n          errorCode = \"QUOTA_ERROR\";\n        }\n\n        res.status(500).json({\n          message: errorMessage,\n          configured: true,\n          working: false,\n          errorCode,\n          errorDetails: apiError.message,\n          configuration: {\n            endpoint: user.azureOpenAIEndpoint,\n            modelDeployment: user.azureModelDeployment,\n            apiVersion: user.azureOpenAIVersion || \"2024-02-15-preview\"\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error testing Azure API:\", error);\n      res.status(500).json({ \n        message: \"Failed to test Azure API\",\n        configured: false,\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Azure Services Health Check\n  app.get(\"/api/services/health\", isAuthenticated, async (req: any, res) => {\n    try {\n      const health = await checkAzureServicesHealth();\n      res.json({\n        message: \"Azure services health check completed\",\n        services: health,\n        allHealthy: Object.values(health).every(status => status)\n      });\n    } catch (error) {\n      console.error(\"Error checking services health:\", error);\n      res.status(500).json({ \n        message: \"Failed to check services health\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Document Search API\n  app.get(\"/api/search/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      if (!azureSearchService.isAvailable()) {\n        return res.status(503).json({ message: \"Search service not available\" });\n      }\n\n      const { q: query, caseId, documentType, page = 1, limit = 20 } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n\n      const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n      \n      const searchResults = await azureSearchService.searchDocuments(query, {\n        caseId: caseId as string,\n        documentType: documentType as string,\n        top: parseInt(limit as string),\n        skip\n      });\n\n      res.json({\n        query,\n        results: searchResults.results,\n        totalCount: searchResults.count,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        totalPages: Math.ceil(searchResults.count / parseInt(limit as string))\n      });\n    } catch (error) {\n      console.error(\"Error searching documents:\", error);\n      res.status(500).json({ \n        message: \"Search failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Search Suggestions API\n  app.get(\"/api/search/suggestions\", isAuthenticated, async (req: any, res) => {\n    try {\n      if (!azureSearchService.isAvailable()) {\n        return res.status(503).json({ message: \"Search service not available\" });\n      }\n\n      const { q: query, limit = 5 } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n\n      const suggestions = await azureSearchService.getSuggestions(query, parseInt(limit as string));\n      res.json({ suggestions });\n    } catch (error) {\n      console.error(\"Error getting search suggestions:\", error);\n      res.status(500).json({ \n        message: \"Failed to get suggestions\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Enhanced document upload with automatic search indexing\n  app.post(\"/api/documents/upload-with-analysis\", isAuthenticated, upload.single('document'), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const file = req.file;\n      const { caseId, documentType = 'general' } = req.body;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      if (!caseId) {\n        return res.status(400).json({ message: \"Case ID is required\" });\n      }\n\n      // Upload to blob storage\n      const fileName = `${Date.now()}-${file.originalname}`;\n      const blobUrl = await azureBlobService.uploadFile(\n        CONTAINERS.DOCUMENTS, \n        fileName, \n        file.buffer, \n        file.mimetype\n      );\n\n      // Create document record\n      const documentData = {\n        fileName: file.originalname,\n        objectPath: fileName, // Use the blob storage file name\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        caseId,\n        uploadedBy: userId,\n        documentType\n      };\n\n      const document = await storage.createDocument(documentData);\n\n      // Analyze with Document Intelligence if available\n      let extractedText = '';\n      let aiAnalysis = null;\n\n      try {\n        if (documentIntelligenceService.isAvailable()) {\n          console.log(\"🤖 Using Document Intelligence for text extraction...\");\n          const intelligenceResult = await documentIntelligenceService.analyzeDocument(CONTAINERS.DOCUMENTS, fileName);\n          extractedText = intelligenceResult.text;\n        }\n\n        // Generate AI analysis\n        if (process.env.OPENAI_API_KEY && extractedText) {\n          const aiService = createAIService(req.user);\n          aiAnalysis = await aiService.analyzeDocument(extractedText, file.originalname);\n        }\n\n        // Index document for search if available\n        if (azureSearchService.isAvailable() && extractedText) {\n          const searchDoc: SearchDocument = {\n            id: document.id,\n            fileName: file.originalname,\n            content: extractedText,\n            documentType,\n            caseId,\n            uploadDate: new Date().toISOString(),\n            summary: aiAnalysis?.summary || '',\n            tags: [documentType, 'uploaded']\n          };\n\n          await azureSearchService.indexDocument(searchDoc);\n          console.log(`✅ Document indexed for search: ${file.originalname}`);\n        }\n\n        // Extract medical bills from the document\n        let extractedBills: any[] = [];\n        try {\n          if (extractedText) {\n            console.log(\"💊 Extracting medical bills from document...\");\n            const aiService = createAIService(req.user);\n            extractedBills = await aiService.extractMedicalBills(extractedText, file.originalname);\n            console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n            // Store extracted medical bills in database\n            for (const billData of extractedBills) {\n              try {\n                const medicalBillData = {\n                  caseId: caseId,\n                  documentId: document.id,\n                  provider: billData.provider || 'Unknown Provider',\n                  amount: billData.amount?.toString() || '0.00',\n                  serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n                  billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n                  treatment: billData.treatment || '',\n                  insurance: billData.insurance || '',\n                  status: billData.status || 'pending',\n                  createdBy: userId,\n                };\n\n                const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n                await storage.createMedicalBill(validatedBill);\n                console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n              } catch (billError: any) {\n                console.error(\"Error creating medical bill:\", billError, billData);\n                // Continue with other bills even if one fails\n              }\n            }\n          }\n        } catch (billExtractionError) {\n          console.error(\"Medical bill extraction failed:\", billExtractionError);\n          // Continue without bill extraction\n        }\n\n        // Update document with analysis results\n        if (aiAnalysis) {\n          await storage.updateDocument(document.id, {\n            aiSummary: aiAnalysis.summary,\n            extractedData: aiAnalysis.extractedData || {},\n            aiProcessed: true\n          });\n        }\n\n      } catch (analysisError) {\n        console.error(\"Document analysis failed, but upload succeeded:\", analysisError);\n        // Continue without analysis - document is still uploaded\n      }\n\n      res.status(201).json({ \n        document,\n        analysis: aiAnalysis,\n        searchIndexed: azureSearchService.isAvailable() && !!extractedText\n      });\n\n    } catch (error) {\n      console.error(\"Error uploading document with analysis:\", error);\n      res.status(500).json({ \n        message: \"Failed to upload document\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Extract medical bills from existing document\n  app.post(\"/api/documents/:id/extract-bills\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const documentId = req.params.id;\n\n      // Get the document\n      const document = await storage.getDocumentById(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      // Check if user has access to this document\n      if (document.uploadedBy !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get document content from blob storage\n      let documentContent = '';\n      try {\n        if (documentIntelligenceService.isAvailable()) {\n          console.log(\"🤖 Using Document Intelligence for text extraction...\");\n          const intelligenceResult = await documentIntelligenceService.analyzeDocument(\n            CONTAINERS.DOCUMENTS, \n            document.objectPath\n          );\n          documentContent = intelligenceResult.text;\n        } else {\n          return res.status(503).json({ message: \"Document Intelligence service not available\" });\n        }\n      } catch (extractError) {\n        console.error(\"Error extracting text from document:\", extractError);\n        return res.status(500).json({ message: \"Failed to extract text from document\" });\n      }\n\n      if (!documentContent.trim()) {\n        return res.status(400).json({ message: \"No text content found in document\" });\n      }\n\n      // Extract medical bills using AI\n      console.log(\"💊 Extracting medical bills from document...\");\n      const aiService = createAIService(req.user);\n      const extractedBills = await aiService.extractMedicalBills(documentContent, document.fileName);\n      console.log(`📋 Found ${extractedBills.length} medical bills to extract`);\n\n      const createdBills = [];\n      const errors = [];\n\n      // Store extracted medical bills in database\n      for (const billData of extractedBills) {\n        try {\n          const medicalBillData = {\n            caseId: document.caseId,\n            documentId: document.id,\n            provider: billData.provider || 'Unknown Provider',\n            amount: billData.amount?.toString() || '0.00',\n            serviceDate: billData.serviceDate ? new Date(billData.serviceDate) : new Date(),\n            billDate: billData.billDate ? new Date(billData.billDate) : new Date(),\n            treatment: billData.treatment || '',\n            insurance: billData.insurance || '',\n            status: billData.status || 'pending',\n            createdBy: userId,\n          };\n\n          const validatedBill = insertMedicalBillSchema.parse(medicalBillData);\n          const createdBill = await storage.createMedicalBill(validatedBill);\n          createdBills.push(createdBill);\n          console.log(`✅ Created medical bill: ${billData.provider} - $${billData.amount}`);\n        } catch (billError: any) {\n          console.error(\"Error creating medical bill:\", billError, billData);\n          errors.push({\n            billData,\n            error: billError?.message || \"Unknown error\"\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        extractedCount: extractedBills.length,\n        createdCount: createdBills.length,\n        bills: createdBills,\n        errors: errors.length > 0 ? errors : undefined\n      });\n\n    } catch (error) {\n      console.error(\"Error extracting medical bills from document:\", error);\n      res.status(500).json({ \n        message: \"Failed to extract medical bills\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":78558}},"version":1}